"""
xcgui for python
"""
from __future__ import annotations
import collections.abc
import typing
__all__: list[str] = ['Alert', 'CallUiThread', 'Cast', 'CombineRect', 'Free', 'FreeLibrary', 'GetDefaultFont', 'GetProcAddress', 'GetTextShowRect', 'GetTextShowSize', 'GetTextShowSizeEx', 'GetTextSize', 'LoadDll', 'LoadIcon', 'LoadLibrary', 'Malloc', 'MessageBox', 'POINT', 'POINTF', 'PointClientToScreen', 'PostMessage', 'PostQuitMessage', 'RECT', 'RECTF', 'RGB', 'RGBA', 'RectInRect', 'RegisterWindowClassName', 'SIZE', 'SendMessage', 'SetActivateTopWindow', 'SetDefaultFont', 'WINDOW_BODY', 'WINDOW_BOTTOM', 'WINDOW_BOTTOMLEFT', 'WINDOW_BOTTOMRIGHT', 'WINDOW_CAPTION', 'WINDOW_LEFT', 'WINDOW_RIGHT', 'WINDOW_TOP', 'WINDOW_TOPLEFT', 'WINDOW_TOPRIGHT', 'WM_CAPTURECHANGED', 'WM_CHAR', 'WM_DESTROY', 'WM_DROPFILES', 'WM_EXITSIZEMOVE', 'WM_KEYDOWN', 'WM_KEYUP', 'WM_KILLFOCUS', 'WM_LBUTTONDBLCLK', 'WM_LBUTTONDOWN', 'WM_MOUSEHOVER', 'WM_MOUSEMOVE', 'WM_MOUSEWHEEL', 'WM_NCDESTROY', 'WM_PAINT', 'WM_RBUTTONDBLCLK', 'WM_RBUTTONDOWN', 'WM_RBUTTONUP', 'WM_SETCURSOR', 'WM_SETFOCUS', 'WM_SIZE', 'WM_TIMER', 'XAdapter', 'XAdapterListView', 'XAdapterMap', 'XAdapterTable', 'XAdapterTree', 'XAnimation', 'XAnimationGroup', 'XAnimationItem', 'XAnimationSequence', 'XApp', 'XBkManager', 'XBkObject', 'XButton', 'XC_ADAPTER', 'XC_ADAPTER_LISTVIEW', 'XC_ADAPTER_MAP', 'XC_ADAPTER_TABLE', 'XC_ADAPTER_TREE', 'XC_ANIMATION_GROUP', 'XC_ANIMATION_ITEM', 'XC_ANIMATION_SEQUENCE', 'XC_BKINFOM', 'XC_BUTTON', 'XC_COMBOBOX', 'XC_COMBOBOXWINDOW', 'XC_DATETIME', 'XC_DWRITE_RENDERING_MODE', 'XC_DWRITE_RENDERING_MODE_ALIASED', 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC', 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL', 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL', 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC', 'XC_DWRITE_RENDERING_MODE_DEFAULT', 'XC_DWRITE_RENDERING_MODE_OUTLINE', 'XC_EDIT', 'XC_EDITOR', 'XC_EDIT_COLOR', 'XC_EDIT_FILE', 'XC_EDIT_FOLDER', 'XC_EDIT_SET', 'XC_ELE', 'XC_ELE_LAYOUT', 'XC_ERROR', 'XC_FLOATWND', 'XC_FONT', 'XC_FRAMEWND', 'XC_HDRAW', 'XC_ID_ERROR', 'XC_ID_FIRST', 'XC_ID_LAST', 'XC_ID_ROOT', 'XC_IMAGE', 'XC_IMAGE_FRAME', 'XC_IMAGE_TEXTURE', 'XC_LAYOUT_BOX', 'XC_LAYOUT_FRAME', 'XC_LAYOUT_LIST', 'XC_LAYOUT_LISTVIEW', 'XC_LAYOUT_OBJECT', 'XC_LAYOUT_OBJECT_GROUP', 'XC_LAYOUT_OBJECT_ITEM', 'XC_LAYOUT_PANEL', 'XC_LIST', 'XC_LISTBOX', 'XC_LISTVIEW', 'XC_LIST_HEADER', 'XC_MENU', 'XC_MENUBAR', 'XC_MENUBAR_BUTTON', 'XC_MODALWINDOW', 'XC_MONTHCAL', 'XC_NAME1', 'XC_NAME2', 'XC_NAME3', 'XC_NAME4', 'XC_NAME5', 'XC_NAME6', 'XC_NOTHING', 'XC_OBJECT_STYLE', 'XC_OBJECT_TYPE', 'XC_OBJECT_TYPE_EX', 'XC_OBJECT_UI', 'XC_PANE', 'XC_PANE_SPLIT', 'XC_POPUPMENUCHILDWINDOW', 'XC_POPUPMENUWINDOW', 'XC_PROGRESSBAR', 'XC_PROPERTYGRID', 'XC_RICHEDIT', 'XC_SCROLLBAR', 'XC_SCROLLVIEW', 'XC_SHAPE', 'XC_SHAPE_ELLIPSE', 'XC_SHAPE_GIF', 'XC_SHAPE_GROUPBOX', 'XC_SHAPE_LINE', 'XC_SHAPE_PICTURE', 'XC_SHAPE_RECT', 'XC_SHAPE_TABLE', 'XC_SHAPE_TEXT', 'XC_SLIDERBAR', 'XC_SVG', 'XC_TABBAR', 'XC_TEXTLINK', 'XC_TOOLBAR', 'XC_TREE', 'XC_WIDGET_UI', 'XC_WINDOW', 'XCareInfo', 'XComboBox', 'XDateInfo', 'XDateTime', 'XDesigner', 'XDraw', 'XE_ADJUSTLAYOUT', 'XE_ADJUSTLAYOUT_END', 'XE_BNCLICK', 'XE_BUTTON_CHECK', 'XE_CHAR', 'XE_COMBOBOX_EXIT_LIST', 'XE_COMBOBOX_POPUP_LIST', 'XE_COMBOBOX_SELECT', 'XE_COMBOBOX_SELECT_END', 'XE_DATETIME_CHANGE', 'XE_DATETIME_EXIT_MONTHCAL', 'XE_DATETIME_POPUP_MONTHCAL', 'XE_DESTROY', 'XE_DESTROY_END', 'XE_DROPFILES', 'XE_EDITOR_AUTOMATCH_SELECT', 'XE_EDITOR_MODIFY_ROWS', 'XE_EDITOR_REMOVEBREAKPOINT', 'XE_EDITOR_SETBREAKPOINT', 'XE_EDIT_CHANGED', 'XE_EDIT_COLOR_CHANGE', 'XE_EDIT_DRAWROW', 'XE_EDIT_ENTER_GET_TABALIGN', 'XE_EDIT_POS_CHANGED', 'XE_EDIT_ROW_CHANGED', 'XE_EDIT_SET', 'XE_EDIT_STYLE_CHANGED', 'XE_EDIT_SWAPROW', 'XE_ELEPROCE', 'XE_KEYDOWN', 'XE_KEYUP', 'XE_KILLCAPTURE', 'XE_KILLFOCUS', 'XE_LBUTTONDBCLICK', 'XE_LBUTTONDOWN', 'XE_LBUTTONUP', 'XE_LISTBOX_DRAWITEM', 'XE_LISTBOX_SELECT', 'XE_LISTBOX_TEMP_ADJUST_COORDINATE', 'XE_LISTBOX_TEMP_CREATE', 'XE_LISTBOX_TEMP_CREATE_END', 'XE_LISTBOX_TEMP_DESTROY', 'XE_LISTBOX_TEMP_UPDATE', 'XE_LISTVIEW_DRAWITEM', 'XE_LISTVIEW_EXPAND', 'XE_LISTVIEW_SELECT', 'XE_LISTVIEW_TEMP_ADJUST_COORDINATE', 'XE_LISTVIEW_TEMP_CREATE', 'XE_LISTVIEW_TEMP_CREATE_END', 'XE_LISTVIEW_TEMP_DESTROY', 'XE_LISTVIEW_TEMP_UPDATE', 'XE_LIST_DRAWITEM', 'XE_LIST_HEADER_CLICK', 'XE_LIST_HEADER_DRAWITEM', 'XE_LIST_HEADER_TEMP_ADJUST_COORDINATE', 'XE_LIST_HEADER_TEMP_CREATE', 'XE_LIST_HEADER_TEMP_CREATE_END', 'XE_LIST_HEADER_TEMP_DESTROY', 'XE_LIST_HEADER_WIDTH_CHANGE', 'XE_LIST_SELECT', 'XE_LIST_TEMP_ADJUST_COORDINATE', 'XE_LIST_TEMP_CREATE', 'XE_LIST_TEMP_CREATE_END', 'XE_LIST_TEMP_DESTROY', 'XE_LIST_TEMP_UPDATE', 'XE_MENU_DRAWITEM', 'XE_MENU_DRAW_BACKGROUND', 'XE_MENU_EXIT', 'XE_MENU_POPUP', 'XE_MENU_POPUP_WND', 'XE_MENU_SELECT', 'XE_MONTHCAL_CHANGE', 'XE_MOUSEHOVER', 'XE_MOUSELEAVE', 'XE_MOUSEMOVE', 'XE_MOUSESTAY', 'XE_MOUSEWHEEL', 'XE_PAINT', 'XE_PAINT_END', 'XE_PAINT_SCROLLVIEW', 'XE_PGRID_ITEM_ADJUST_COORDINATE', 'XE_PGRID_ITEM_DESTROY', 'XE_PGRID_ITEM_EXPAND', 'XE_PGRID_ITEM_SELECT', 'XE_PGRID_ITEM_SET', 'XE_PGRID_VALUE_CHANGE', 'XE_PROGRESSBAR_CHANGE', 'XE_RBUTTONDOWN', 'XE_RBUTTONUP', 'XE_SBAR_SCROLL', 'XE_SCROLLVIEW_SCROLL_H', 'XE_SCROLLVIEW_SCROLL_V', 'XE_SETCAPTURE', 'XE_SETCURSOR', 'XE_SETFOCUS', 'XE_SETFONT', 'XE_SHOW', 'XE_SIZE', 'XE_SLIDERBAR_CHANGE', 'XE_SYSKEYDOWN', 'XE_SYSKEYUP', 'XE_TABBAR_DELETE', 'XE_TABBAR_SELECT', 'XE_TOOLTIP_POPUP', 'XE_TREE_DRAG_ITEM', 'XE_TREE_DRAG_ITEM_ING', 'XE_TREE_DRAWITEM', 'XE_TREE_EXPAND', 'XE_TREE_SELECT', 'XE_TREE_TEMP_ADJUST_COORDINATE', 'XE_TREE_TEMP_CREATE', 'XE_TREE_TEMP_CREATE_END', 'XE_TREE_TEMP_DESTROY', 'XE_TREE_TEMP_UPDATE', 'XE_XC_TIMER', 'XEase', 'XEdit', 'XElement', 'XEvent', 'XFont', 'XFontInfo', 'XFrameWindow', 'XImage', 'XImageSrc', 'XItemHeightInfo', 'XLayoutBox', 'XLayoutEle', 'XLayoutFrame', 'XLayoutSize', 'XList', 'XListBox', 'XListView', 'XListViewItemRangeInfo', 'XMenu', 'XMenuBar', 'XModelWindow', 'XMonthCal', 'XMsgWindow', 'XObject', 'XObjectUI', 'XPane', 'XPoint', 'XPointF', 'XProgressBar', 'XRange', 'XRect', 'XRectF', 'XResource', 'XRotateInfo', 'XScrollBar', 'XScrollView', 'XShadowInfo', 'XShape', 'XShapeEllipse', 'XShapeGif', 'XShapeGroupBox', 'XShapeLine', 'XShapePicture', 'XShapeRect', 'XShapeTable', 'XShapeText', 'XSize', 'XSliderBar', 'XStrokeInfo', 'XSvg', 'XTabBar', 'XTemplate', 'XTemplateNode', 'XTextLink', 'XTimeInfo', 'XToolBar', 'XTrayIcon', 'XTree', 'XWM_BODYVIEW_RECT', 'XWM_CALL_UI_THREAD', 'XWM_CLOUDUI_DOWNLOADFILE_COMPLETE', 'XWM_CLOUNDUI_OPENURL_WAIT', 'XWM_COMBOBOX_POPUP_DROPLIST', 'XWM_DOCK_POPUP', 'XWM_DRAW_T', 'XWM_EVENT_ALL', 'XWM_FLOATWND_DRAG', 'XWM_FLOAT_PANE', 'XWM_MENU_DRAWITEM', 'XWM_MENU_DRAW_BACKGROUND', 'XWM_MENU_EXIT', 'XWM_MENU_POPUP', 'XWM_MENU_POPUP_WND', 'XWM_MENU_SELECT', 'XWM_PAINT_DISPLAY', 'XWM_PAINT_END', 'XWM_PANE_SHOW', 'XWM_REDRAW_ELE', 'XWM_SETFOCUS_ELE', 'XWM_TIMER_T', 'XWM_TRAYICON', 'XWM_WINDPROC', 'XWM_XC_TIMER', 'XWidget', 'XWindow', 'adapter_date_type_', 'adapter_date_type_error', 'adapter_date_type_float', 'adapter_date_type_image', 'adapter_date_type_int', 'adapter_date_type_string', 'adjustLayout_', 'adjustLayout_all', 'adjustLayout_no', 'adjustLayout_self', 'animation_move_', 'animation_move_x', 'animation_move_y', 'bkObject_align_flag_', 'bkObject_align_flag_bottom', 'bkObject_align_flag_center', 'bkObject_align_flag_center_v', 'bkObject_align_flag_left', 'bkObject_align_flag_no', 'bkObject_align_flag_right', 'bkObject_align_flag_top', 'borderSize_', 'button_icon_align_', 'button_icon_align_bottom', 'button_icon_align_left', 'button_icon_align_right', 'button_icon_align_top', 'button_state_', 'button_state_check', 'button_state_disable', 'button_state_down', 'button_state_flag_', 'button_state_flag_WindowMaximize', 'button_state_flag_WindowRestore', 'button_state_flag_check', 'button_state_flag_check_no', 'button_state_flag_down', 'button_state_flag_leave', 'button_state_flag_stay', 'button_state_leave', 'button_state_stay', 'button_style_check', 'button_style_close', 'button_style_default', 'button_style_expand', 'button_style_icon', 'button_style_max', 'button_style_min', 'button_style_pane_close', 'button_style_pane_dock_bottom', 'button_style_pane_dock_left', 'button_style_pane_dock_right', 'button_style_pane_dock_top', 'button_style_pane_lock', 'button_style_pane_menu', 'button_style_radio', 'button_style_scrollbar_down', 'button_style_scrollbar_left', 'button_style_scrollbar_right', 'button_style_scrollbar_slider_h', 'button_style_scrollbar_slider_v', 'button_style_scrollbar_up', 'button_style_slider', 'button_style_tabBar', 'button_style_toolBar', 'button_style_toolBar_left', 'button_style_toolBar_right', 'button_type_check', 'button_type_close', 'button_type_default', 'button_type_max', 'button_type_min', 'button_type_radio', 'chat_flag_', 'chat_flag_center', 'chat_flag_left', 'chat_flag_next_row_bubble', 'chat_flag_right', 'comboBox_state_', 'comboBox_state_down', 'comboBox_state_flag_', 'comboBox_state_flag_down', 'comboBox_state_flag_leave', 'comboBox_state_flag_stay', 'comboBox_state_leave', 'comboBox_state_stay', 'common_state3_', 'common_state3_down', 'common_state3_leave', 'common_state3_stay', 'easeIn', 'easeInOut', 'easeOut', 'ease_flag_', 'ease_flag_back', 'ease_flag_bounce', 'ease_flag_circ', 'ease_flag_cubic', 'ease_flag_elastic', 'ease_flag_expo', 'ease_flag_in', 'ease_flag_inOut', 'ease_flag_linear', 'ease_flag_out', 'ease_flag_quad', 'ease_flag_quart', 'ease_flag_quint', 'ease_flag_sine', 'ease_type_', 'edit_data_copy_', 'edit_data_copy_style_', 'edit_style_info_', 'edit_style_type_', 'edit_style_type_font_color', 'edit_style_type_image', 'edit_style_type_obj', 'edit_textAlign_flag_', 'edit_textAlign_flag_bottom', 'edit_textAlign_flag_center', 'edit_textAlign_flag_center_v', 'edit_textAlign_flag_left', 'edit_textAlign_flag_right', 'edit_textAlign_flag_top', 'edit_type_', 'edit_type_chat', 'edit_type_codeTable', 'edit_type_editor', 'edit_type_none', 'edit_type_richedit', 'editor_color_', 'element_position_', 'element_position_bottom', 'element_position_left', 'element_position_no', 'element_position_right', 'element_position_top', 'element_state_flag_', 'element_state_flag_disable', 'element_state_flag_down', 'element_state_flag_enable', 'element_state_flag_focus', 'element_state_flag_focusEx', 'element_state_flag_focusEx_no', 'element_state_flag_focus_no', 'element_state_flag_leave', 'element_state_flag_nothing', 'element_state_flag_stay', 'element_style_frameWnd_dock_bottom', 'element_style_frameWnd_dock_left', 'element_style_frameWnd_dock_right', 'element_style_frameWnd_dock_top', 'element_style_toolBar_separator', 'element_type_layout', 'fontStyle_', 'fontStyle_bold', 'fontStyle_boldItalic', 'fontStyle_italic', 'fontStyle_regular', 'fontStyle_strikeout', 'fontStyle_underline', 'font_info_', 'frameWnd_cell_type_', 'frameWnd_cell_type_bodyView', 'frameWnd_cell_type_group', 'frameWnd_cell_type_left_right', 'frameWnd_cell_type_no', 'frameWnd_cell_type_pane', 'frameWnd_cell_type_top_bottom', 'image_draw_type_', 'image_draw_type_adaptive', 'image_draw_type_adaptive_border', 'image_draw_type_default', 'image_draw_type_fixed_ratio', 'image_draw_type_stretch', 'image_draw_type_tile', 'layout_align_', 'layout_align_axis_', 'layout_align_axis_auto', 'layout_align_axis_center', 'layout_align_axis_end', 'layout_align_axis_start', 'layout_align_bottom', 'layout_align_center', 'layout_align_equidistant', 'layout_align_left', 'layout_align_right', 'layout_align_top', 'layout_size_', 'layout_size_auto', 'layout_size_disable', 'layout_size_fill', 'layout_size_fixed', 'layout_size_percent', 'layout_size_weight', 'layout_state_flag_', 'layout_state_flag_body', 'layout_state_flag_full', 'layout_state_flag_layout_body', 'layout_state_flag_nothing', 'listBox_item_', 'listBox_item_info_', 'listBox_state_flag_', 'listBox_state_flag_item_leave', 'listBox_state_flag_item_select', 'listBox_state_flag_item_select_no', 'listBox_state_flag_item_stay', 'listBox_style_comboBox', 'listHeader_state_flag_', 'listHeader_state_flag_item_down', 'listHeader_state_flag_item_leave', 'listHeader_state_flag_item_stay', 'listItemTemp_type_', 'listItemTemp_type_list', 'listItemTemp_type_listBox', 'listItemTemp_type_listView', 'listItemTemp_type_listView_group', 'listItemTemp_type_listView_item', 'listItemTemp_type_list_head', 'listItemTemp_type_list_item', 'listItemTemp_type_tree', 'listView_item_', 'listView_item_id_', 'listView_state_flag_', 'listView_state_flag_group_leave', 'listView_state_flag_group_select', 'listView_state_flag_group_select_no', 'listView_state_flag_group_stay', 'listView_state_flag_item_leave', 'listView_state_flag_item_select', 'listView_state_flag_item_select_no', 'listView_state_flag_item_stay', 'list_drawItemBk_flag_', 'list_drawItemBk_flag_group_leave', 'list_drawItemBk_flag_group_stay', 'list_drawItemBk_flag_leave', 'list_drawItemBk_flag_line', 'list_drawItemBk_flag_lineV', 'list_drawItemBk_flag_nothing', 'list_drawItemBk_flag_select', 'list_drawItemBk_flag_stay', 'list_header_item_', 'list_item_', 'list_item_state_', 'list_item_state_cache', 'list_item_state_leave', 'list_item_state_select', 'list_item_state_stay', 'list_state_flag_', 'list_state_flag_item_leave', 'list_state_flag_item_select', 'list_state_flag_item_select_no', 'list_state_flag_item_stay', 'menu_drawBackground_', 'menu_drawItem_', 'menu_item_flag_', 'menu_item_flag_check', 'menu_item_flag_disable', 'menu_item_flag_normal', 'menu_item_flag_popup', 'menu_item_flag_select', 'menu_item_flag_separator', 'menu_item_flag_stay', 'menu_popupWnd_', 'menu_popup_position_', 'menu_popup_position_center_bottom', 'menu_popup_position_center_left', 'menu_popup_position_center_right', 'menu_popup_position_center_top', 'menu_popup_position_left_bottom', 'menu_popup_position_left_top', 'menu_popup_position_right_bottom', 'menu_popup_position_right_top', 'messageBox_flag_', 'messageBox_flag_cancel', 'messageBox_flag_icon_appicon', 'messageBox_flag_icon_error', 'messageBox_flag_icon_info', 'messageBox_flag_icon_qustion', 'messageBox_flag_icon_shield', 'messageBox_flag_icon_warning', 'messageBox_flag_ok', 'messageBox_flag_other', 'monthCal_button_type_', 'monthCal_button_type_last_month', 'monthCal_button_type_last_year', 'monthCal_button_type_next_month', 'monthCal_button_type_next_year', 'monthCal_button_type_today', 'monthCal_item_', 'monthCal_state_flag_', 'monthCal_state_flag_item_cur_month', 'monthCal_state_flag_item_down', 'monthCal_state_flag_item_last_month', 'monthCal_state_flag_item_leave', 'monthCal_state_flag_item_next_month', 'monthCal_state_flag_item_select', 'monthCal_state_flag_item_select_no', 'monthCal_state_flag_item_stay', 'monthCal_state_flag_item_today', 'monthCal_state_flag_leave', 'notifyMsg_skin_', 'notifyMsg_skin_error', 'notifyMsg_skin_message', 'notifyMsg_skin_no', 'notifyMsg_skin_success', 'notifyMsg_skin_warning', 'pane_align_', 'pane_align_bottom', 'pane_align_center', 'pane_align_error', 'pane_align_left', 'pane_align_right', 'pane_align_top', 'pane_state_', 'pane_state_any', 'pane_state_dock', 'pane_state_error', 'pane_state_flag_', 'pane_state_flag_body', 'pane_state_flag_caption', 'pane_state_flag_leave', 'pane_state_flag_stay', 'pane_state_float', 'pane_state_lock', 'position_', 'position_flag_', 'position_flag_bottom', 'position_flag_center', 'position_flag_left', 'position_flag_leftBottom', 'position_flag_leftTop', 'position_flag_right', 'position_flag_rightBottom', 'position_flag_rightTop', 'position_flag_top', 'propertyGrid_item_', 'propertyGrid_item_type_', 'propertyGrid_item_type_comboBox', 'propertyGrid_item_type_edit', 'propertyGrid_item_type_edit_color', 'propertyGrid_item_type_edit_file', 'propertyGrid_item_type_edit_set', 'propertyGrid_item_type_group', 'propertyGrid_item_type_panel', 'propertyGrid_item_type_text', 'propertyGrid_state_flag_', 'propertyGrid_state_flag_group_expand', 'propertyGrid_state_flag_group_expand_no', 'propertyGrid_state_flag_group_leave', 'propertyGrid_state_flag_item_leave', 'propertyGrid_state_flag_item_select', 'propertyGrid_state_flag_item_select_no', 'propertyGrid_state_flag_item_stay', 'table_flag_', 'table_flag_full', 'table_flag_none', 'table_line_flag_', 'table_line_flag_bottom', 'table_line_flag_bottom2', 'table_line_flag_left', 'table_line_flag_left2', 'table_line_flag_right', 'table_line_flag_right2', 'table_line_flag_top', 'table_line_flag_top2', 'textAlignFlag_bottom', 'textAlignFlag_center', 'textAlignFlag_left', 'textAlignFlag_left_top', 'textAlignFlag_right', 'textAlignFlag_top', 'textAlignFlag_vcenter', 'textFormatFlag_', 'textFormatFlag_DirectionRightToLeft', 'textFormatFlag_DirectionVertical', 'textFormatFlag_DisplayFormatControl', 'textFormatFlag_LineLimit', 'textFormatFlag_MeasureTrailingSpaces', 'textFormatFlag_NoClip', 'textFormatFlag_NoFitBlackBox', 'textFormatFlag_NoFontFallback', 'textFormatFlag_NoWrap', 'textTrimming_Character', 'textTrimming_EllipsisCharacter', 'textTrimming_EllipsisPath', 'textTrimming_EllipsisWord', 'textTrimming_None', 'textTrimming_Word', 'trayIcon_flag_', 'trayIcon_flag_icon_error', 'trayIcon_flag_icon_info', 'trayIcon_flag_icon_none', 'trayIcon_flag_icon_user', 'trayIcon_flag_icon_warning', 'trayIcon_flag_nosound', 'tree_drag_item_', 'tree_item_', 'tree_item_state_', 'tree_item_state_leave', 'tree_item_state_select', 'tree_item_state_stay', 'tree_state_flag_', 'tree_state_flag_group', 'tree_state_flag_group_no', 'tree_state_flag_item_leave', 'tree_state_flag_item_select', 'tree_state_flag_item_select_no', 'tree_state_flag_item_stay', 'window_position_', 'window_position_body', 'window_position_bottom', 'window_position_error', 'window_position_left', 'window_position_right', 'window_position_top', 'window_position_window', 'window_state_flag_', 'window_state_flag_body_leave', 'window_state_flag_bottom_leave', 'window_state_flag_layout_body', 'window_state_flag_leave', 'window_state_flag_left_leave', 'window_state_flag_nothing', 'window_state_flag_right_leave', 'window_state_flag_top_leave', 'window_style_', 'window_style_allow_maxWindow', 'window_style_border', 'window_style_btn_close', 'window_style_btn_max', 'window_style_btn_min', 'window_style_caption', 'window_style_center', 'window_style_default', 'window_style_drag_border', 'window_style_drag_window', 'window_style_icon', 'window_style_modal', 'window_style_modal_simple', 'window_style_nothing', 'window_style_pop', 'window_style_simple', 'window_style_title', 'window_transparent_', 'window_transparent_false', 'window_transparent_shadow', 'window_transparent_shaped', 'window_transparent_simple', 'window_transparent_win7', 'xc_ex_error', 'xc_style_default', 'zorder_', 'zorder_after', 'zorder_before', 'zorder_bottom', 'zorder_top']
class POINT:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> POINT:
        ...
    def __init__(self) -> None:
        ...
    @property
    def x(self) -> int:
        ...
    @x.setter
    def x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def y(self) -> int:
        ...
    @y.setter
    def y(self, arg0: typing.SupportsInt) -> None:
        ...
class POINTF:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> POINTF:
        ...
    def __init__(self) -> None:
        ...
    @property
    def x(self) -> float:
        ...
    @x.setter
    def x(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def y(self) -> float:
        ...
    @y.setter
    def y(self, arg0: typing.SupportsFloat) -> None:
        ...
class RECT:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> RECT:
        ...
    def __init__(self) -> None:
        ...
    @property
    def bottom(self) -> int:
        ...
    @bottom.setter
    def bottom(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def left(self) -> int:
        ...
    @left.setter
    def left(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def right(self) -> int:
        ...
    @right.setter
    def right(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top(self) -> int:
        ...
    @top.setter
    def top(self, arg0: typing.SupportsInt) -> None:
        ...
class RECTF:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> RECTF:
        ...
    def __init__(self) -> None:
        ...
    @property
    def bottom(self) -> float:
        ...
    @bottom.setter
    def bottom(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def left(self) -> float:
        ...
    @left.setter
    def left(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def right(self) -> float:
        ...
    @right.setter
    def right(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def top(self) -> float:
        ...
    @top.setter
    def top(self, arg0: typing.SupportsFloat) -> None:
        ...
class SIZE:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> SIZE:
        ...
    def __init__(self) -> None:
        ...
    @property
    def cx(self) -> int:
        ...
    @cx.setter
    def cx(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def cy(self) -> int:
        ...
    @cy.setter
    def cy(self, arg0: typing.SupportsInt) -> None:
        ...
class XAdapter(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAdapter:
        ...
    def addRef(self) -> int:
        ...
    def destroy(self) -> None:
        ...
    def enableAutoDestroy(self, enable: typing.SupportsInt) -> None:
        ...
    def getRefCount(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def release(self) -> int:
        ...
class XAdapterListView(XAdapter):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAdapterListView:
        ...
    def __init__(self) -> None:
        ...
    def deleteAll(self) -> None:
        ...
    def deleteAllGroup(self) -> None:
        ...
    def deleteAllItem(self) -> None:
        ...
    def deleteColumnGroup(self, column: typing.SupportsInt) -> None:
        ...
    def deleteColumnItem(self, column: typing.SupportsInt) -> None:
        ...
    def groupAddColumn(self, name: str) -> int:
        ...
    def groupAddItemImage(self, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupAddItemImageEx(self, name: str, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupAddItemText(self, value: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupAddItemTextEx(self, name: str, value: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupDeleteAllChildItem(self, group: typing.SupportsInt) -> None:
        ...
    def groupDeleteItem(self, group: typing.SupportsInt) -> bool:
        ...
    def groupGetCount(self) -> int:
        ...
    def groupGetImage(self, item: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def groupGetImageEx(self, item: typing.SupportsInt, column: str) -> XImage:
        ...
    def groupGetText(self, group: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def groupGetTextEx(self, group: typing.SupportsInt, name: str) -> str:
        ...
    def groupSetImage(self, group: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def groupSetImageEx(self, group: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def groupSetText(self, group: typing.SupportsInt, column: typing.SupportsInt, value: str) -> bool:
        ...
    def groupSetTextEx(self, group: typing.SupportsInt, name: str, value: str) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def itemAddColumn(self, name: str) -> int:
        ...
    def itemAddItemImage(self, group: typing.SupportsInt, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemAddItemImageEx(self, group: typing.SupportsInt, name: str, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemAddItemText(self, group: typing.SupportsInt, value: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemAddItemTextEx(self, group: typing.SupportsInt, name: str, value: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemDeleteItem(self, group: typing.SupportsInt, item: typing.SupportsInt) -> bool:
        ...
    def itemGetCount(self, group: typing.SupportsInt) -> int:
        ...
    def itemGetImage(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def itemGetImageEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str) -> XImage:
        ...
    def itemGetText(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def itemGetTextEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str) -> str:
        ...
    def itemSetImage(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def itemSetImageEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def itemSetText(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt, value: str) -> bool:
        ...
    def itemSetTextEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str, value: str) -> bool:
        ...
class XAdapterMap(XAdapter):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAdapterMap:
        ...
    def __init__(self) -> None:
        ...
    def addItemImage(self, name: str, image: XImage) -> bool:
        ...
    def addItemText(self, name: str, value: str) -> bool:
        ...
    def deleteItem(self, name: str) -> bool:
        ...
    def getCount(self) -> int:
        ...
    def getItemImage(self, name: str) -> XImage:
        ...
    def getItemText(self, name: str) -> str:
        ...
    def isValid(self) -> bool:
        ...
    def setItemImage(self, name: str, image: XImage) -> bool:
        ...
    def setItemText(self, name: str, value: str) -> bool:
        ...
class XAdapterTable(XAdapter):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAdapterTable:
        ...
    def __init__(self) -> None:
        ...
    def addColumn(self, name: str) -> int:
        ...
    def addItemImage(self, image: XImage) -> int:
        ...
    def addItemImageEx(self, name: str, image: XImage) -> int:
        ...
    def addItemText(self, value: str) -> int:
        ...
    def addItemTextEx(self, name: str, value: str) -> int:
        ...
    def addRowImage(self, image: XImage) -> int:
        ...
    def addRowImageEx(self, name: str, image: XImage) -> int:
        ...
    def addRowText(self, value: str) -> int:
        ...
    def addRowTextEx(self, name: str, value: str) -> int:
        ...
    def deleteColumnAll(self) -> None:
        ...
    def deleteItem(self, item: typing.SupportsInt) -> bool:
        ...
    def deleteItemAll(self) -> None:
        ...
    def deleteItemEx(self, item: typing.SupportsInt, count: typing.SupportsInt) -> bool:
        ...
    def deleteRow(self, row: typing.SupportsInt) -> bool:
        ...
    def deleteRowAll(self) -> None:
        ...
    def deleteRowEx(self, row: typing.SupportsInt, count: typing.SupportsInt) -> bool:
        ...
    def getCount(self) -> int:
        ...
    def getCountColumn(self) -> int:
        ...
    def getCountRow(self) -> int:
        ...
    def getItemDataType(self, item: typing.SupportsInt, column: typing.SupportsInt) -> adapter_date_type_:
        ...
    def getItemDataTypeEx(self, item: typing.SupportsInt, name: str) -> adapter_date_type_:
        ...
    def getItemFloat(self, item: typing.SupportsInt, column: typing.SupportsInt) -> float:
        ...
    def getItemFloatEx(self, item: typing.SupportsInt, name: str) -> float:
        ...
    def getItemImage(self, item: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def getItemImageEx(self, item: typing.SupportsInt, name: str) -> XImage:
        ...
    def getItemInt(self, item: typing.SupportsInt, column: typing.SupportsInt) -> int:
        ...
    def getItemIntEx(self, item: typing.SupportsInt, name: str) -> int:
        ...
    def getItemText(self, item: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def getItemTextEx(self, item: typing.SupportsInt, name: str) -> str:
        ...
    def insertItemImage(self, item: typing.SupportsInt, image: XImage) -> int:
        ...
    def insertItemImageEx(self, item: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def insertItemText(self, item: typing.SupportsInt, value: str) -> int:
        ...
    def insertItemTextEx(self, item: typing.SupportsInt, name: str, value: str) -> int:
        ...
    def insertRowImage(self, row: typing.SupportsInt, image: XImage) -> int:
        ...
    def insertRowImageEx(self, row: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def insertRowText(self, row: typing.SupportsInt, value: str) -> int:
        ...
    def insertRowTextEx(self, row: typing.SupportsInt, name: str, value: str) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setColumn(self, colName: str) -> int:
        ...
    def setItemFloat(self, item: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsFloat) -> bool:
        ...
    def setItemFloatEx(self, item: typing.SupportsInt, name: str, value: typing.SupportsFloat) -> bool:
        ...
    def setItemImage(self, item: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def setItemImageEx(self, item: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def setItemInt(self, item: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsInt) -> bool:
        ...
    def setItemIntEx(self, item: typing.SupportsInt, name: str, value: typing.SupportsInt) -> bool:
        ...
    def setItemText(self, item: typing.SupportsInt, column: typing.SupportsInt, value: str) -> bool:
        ...
    def setItemTextEx(self, item: typing.SupportsInt, name: str, value: str) -> bool:
        ...
    def sort(self, column: typing.SupportsInt, ascending: bool) -> None:
        ...
class XAdapterTree(XAdapter):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAdapterTree:
        ...
    def __init__(self) -> None:
        ...
    def addColumn(self, name: str) -> int:
        ...
    def deleteColumnAll(self) -> None:
        ...
    def deleteItem(self, nId: typing.SupportsInt) -> bool:
        ...
    def deleteItemAll(self) -> None:
        ...
    def getCount(self) -> int:
        ...
    def getCountColumn(self) -> int:
        ...
    def getItemImage(self, nId: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def getItemImageEx(self, nId: typing.SupportsInt, name: str) -> XImage:
        ...
    def getItemText(self, nId: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def getItemTextEx(self, nId: typing.SupportsInt, name: str) -> str:
        ...
    def insertItemImage(self, image: XImage, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def insertItemImageEx(self, name: str, image: XImage, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def insertItemText(self, value: str, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def insertItemTextEx(self, name: str, value: str, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setColumn(self, colName: str) -> int:
        ...
    def setItemImage(self, nId: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def setItemImageEx(self, nId: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def setItemText(self, nId: typing.SupportsInt, column: typing.SupportsInt, value: str) -> bool:
        ...
    def setItemTextEx(self, nId: typing.SupportsInt, name: str, value: str) -> bool:
        ...
class XAnimation(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAnimation:
        ...
    @staticmethod
    def releaseEx(objectUI: XObject, end: bool = False) -> None:
        ...
    def enableAutoDestroy(self, enable: bool) -> None:
        ...
    def getObjectUI(self) -> XObject:
        ...
    def getUserData(self) -> None:
        ...
    def pause(self) -> None:
        ...
    def release(self, end: bool) -> None:
        ...
    def run(self, obejctUI: XObjectUI) -> None:
        ...
    def setCallback(self, callback: collections.abc.Callable[[XAnimation, typing.SupportsInt], None]) -> None:
        ...
    def setUserData(self, userdata: typing.Any) -> None:
        ...
    def start(self) -> None:
        ...
class XAnimationGroup(XAnimation):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAnimationGroup:
        ...
    def __init__(self, loopCount: typing.SupportsInt = 0) -> None:
        ...
    def addItem(self, sequence: XAnimationSequence) -> None:
        ...
    def isValid(self) -> bool:
        ...
class XAnimationItem(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAnimationItem:
        ...
    def enableAutoDestroy(self, enable: bool) -> None:
        ...
    def enableCompleteRelease(self, enable: bool) -> None:
        ...
    def getUserData(self) -> None:
        ...
    def isValid(self) -> bool:
        ...
    def moveSetFlag(self, flags: typing.SupportsInt) -> None:
        ...
    def rotateSetCenter(self, x: typing.SupportsFloat, y: typing.SupportsFloat, offset: bool) -> None:
        ...
    def scaleSetPosition(self, position: position_flag_) -> None:
        ...
    def setCallback(self, callback: collections.abc.Callable[[XAnimationItem, typing.SupportsFloat], None]) -> None:
        ...
    def setUserData(self, userdata: typing.Any) -> None:
        ...
class XAnimationSequence(XAnimation):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XAnimationSequence:
        ...
    def __init__(self, xcObject: XObject = None, loopCount: typing.SupportsInt = 0) -> None:
        ...
    def alpha(self, duration: typing.SupportsInt, alpha: typing.SupportsInt, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def alphaEx(self, duration: typing.SupportsInt, fromAlpha: typing.SupportsInt, toAlpha: typing.SupportsInt, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def color(self, duration: typing.SupportsInt, color: typing.SupportsInt, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def colorEx(self, duration: typing.SupportsInt, fromColor: typing.SupportsInt, toColor: typing.SupportsInt, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def delay(self, duration: typing.SupportsFloat) -> XAnimationItem:
        ...
    def delayEx(self, duration: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def destroyObjectUI(self, duration: typing.SupportsFloat) -> XAnimationItem:
        ...
    def isValid(self) -> bool:
        ...
    def layoutHeight(self, duration: typing.SupportsInt, sizeType: layout_size_, height: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def layoutSize(self, duration: typing.SupportsInt, widthSizeType: layout_size_, width: typing.SupportsFloat, heightSizeType: layout_size_, height: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def layoutWidth(self, duration: typing.SupportsInt, sizeType: layout_size_, width: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def move(self, duration: typing.SupportsInt, x: typing.SupportsFloat, y: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def moveEx(self, duration: typing.SupportsInt, fromX: typing.SupportsFloat, fromY: typing.SupportsFloat, toX: typing.SupportsFloat, toY: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def rotate(self, duration: typing.SupportsInt, angle: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def rotateEx(self, duration: typing.SupportsInt, fromAngle: typing.SupportsFloat, toAngle: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def scale(self, duration: typing.SupportsInt, scaleX: typing.SupportsFloat, scaleY: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = True) -> XAnimationItem:
        ...
    def scaleSize(self, duration: typing.SupportsInt, width: typing.SupportsFloat, height: typing.SupportsFloat, loopCount: typing.SupportsInt = 1, easeFlag: typing.SupportsInt = 0, goBack: bool = False) -> XAnimationItem:
        ...
    def show(self, duration: typing.SupportsFloat, show: bool) -> XAnimationItem:
        ...
class XApp:
    @staticmethod
    def getHandleCount() -> int:
        ...
    @staticmethod
    def isInit() -> int:
        ...
    @staticmethod
    def loadIcon(filePath: str) -> int:
        ...
    @staticmethod
    def loadResourceZipRes(id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    @staticmethod
    def loadStyleZipRes(id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    @staticmethod
    def setD2dTextAntialiasMode(mode: typing.SupportsInt) -> None:
        ...
    @staticmethod
    def trayIconReset() -> None:
        ...
    @staticmethod
    def trayIconSetCallbackMessage(userMessage: typing.SupportsInt) -> None:
        ...
    @staticmethod
    def trayIconSetPopupBalloon(title: str, text: str, balloonIcon: XImage = None, flags: typing.SupportsInt = 0) -> None:
        ...
    @staticmethod
    def trayIconSetTips(tips: str) -> None:
        ...
    def __init__(self, useD2D: bool = False) -> None:
        ...
    def addFileSearchPath(self, path: str) -> None:
        ...
    def debugToFileInfo(self, file: str) -> None:
        ...
    def enableAutoDPI(self, enable: bool) -> None:
        ...
    def enableAutoExitApp(self, enable: bool) -> None:
        ...
    def enableDPI(self, enable: bool) -> None:
        ...
    def enableDebugFile(self, enable: bool) -> None:
        ...
    def enableErrorMessageBox(self, enable: bool) -> None:
        ...
    def enableGdiDrawText(self, enable: bool) -> None:
        ...
    def enableResMonitor(self, enable: bool) -> None:
        ...
    def exit(self) -> None:
        ...
    def run(self) -> None:
        ...
    def setD2dTextRenderingMode(self, mode: XC_DWRITE_RENDERING_MODE) -> None:
        ...
    def setLayoutFrameColor(self, color: typing.SupportsInt) -> None:
        ...
    def setPaintFrequency(self, milliseconds: typing.SupportsInt) -> None:
        ...
    def setTextRenderingHint(self, nType: typing.SupportsInt) -> None:
        ...
    def setWindowIcon(self, hIcon: typing.SupportsInt) -> None:
        ...
    def showLayoutFrame(self, enable: bool) -> None:
        ...
    def showSvgFrame(self, enable: bool) -> None:
        ...
class XBkManager(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XBkManager:
        ...
    def __init__(self) -> None:
        ...
    def addBorder(self, state: typing.SupportsInt, color: typing.SupportsInt, width: typing.SupportsInt, bkId: typing.SupportsInt = 0) -> None:
        ...
    def addFill(self, state: typing.SupportsInt, color: typing.SupportsInt, bkId: typing.SupportsInt = 0) -> None:
        ...
    def addImage(self, state: typing.SupportsInt, image: XImage, bkId: typing.SupportsInt = 0) -> None:
        ...
    def addInfo(self, text: str) -> int:
        ...
    def addRef(self) -> None:
        ...
    def clear(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def draw(self, state: typing.SupportsInt, draw: XDraw, rect: XRect) -> bool:
        ...
    def drawEx(self, state: typing.SupportsInt, draw: XDraw, rect: XRect, stateEx: typing.SupportsInt) -> bool:
        ...
    def enableAutoDestroy(self, enable: typing.SupportsInt) -> None:
        ...
    def getBkObject(self, bkId: typing.SupportsInt = 0) -> XBkObject:
        ...
    def getBkObjectHandle(self, bkId: typing.SupportsInt = 0) -> int:
        ...
    def getCount(self) -> int:
        ...
    def getRefCount(self) -> int:
        ...
    def getStateTextColor(self, state: typing.SupportsInt) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def release(self) -> None:
        ...
    def setInfo(self, text: str) -> int:
        ...
class XBkObject:
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XBkObject:
        ...
    def enableBorder(self, enable: bool) -> None:
        ...
    def enableFill(self, enable: bool) -> None:
        ...
    def getAlign(self) -> int:
        ...
    def getBorderColor(self) -> int:
        ...
    def getBorderWidth(self) -> int:
        ...
    def getFillColor(self) -> int:
        ...
    def getFont(self) -> XFont:
        ...
    def getId(self) -> int:
        ...
    def getImage(self) -> XImage:
        ...
    def getMargin(self) -> XRect:
        ...
    def getRectRoundAngle(self) -> XRect:
        ...
    def getRotate(self) -> int:
        ...
    def getText(self) -> str:
        ...
    def getTextAlign(self) -> int:
        ...
    def isBorder(self) -> bool:
        ...
    def isFill(self) -> bool:
        ...
    @typing.overload
    def setAlign(self, flags: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setAlign(self, flags: typing.SupportsInt) -> None:
        ...
    def setBorderColor(self, color: typing.SupportsInt) -> None:
        ...
    def setBorderWidth(self, width: typing.SupportsInt) -> None:
        ...
    def setFillColor(self, color: typing.SupportsInt) -> None:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setImage(self, image: XImage) -> None:
        ...
    def setMargin(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setRectRoundAngle(self, leftTop: typing.SupportsInt, leftBottom: typing.SupportsInt, rightTop: typing.SupportsInt, rightBottom: typing.SupportsInt) -> None:
        ...
    def setText(self, text: str) -> None:
        ...
    def setTextAlign(self, align: typing.SupportsInt) -> None:
        ...
class XButton(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XButton:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    def addAnimationFrame(self, image: XImage, elapse: typing.SupportsInt) -> None:
        ...
    def getBindEle(self) -> XObject:
        ...
    def getGroupId(self) -> int:
        ...
    def getIcon(self, nType: typing.SupportsInt) -> XImage:
        ...
    def getState(self) -> common_state3_:
        ...
    def getStateEx(self) -> button_state_:
        ...
    @typing.overload
    def getText(self) -> str:
        ...
    @typing.overload
    def getText(self, enable: bool, loopPlay: bool = False) -> None:
        ...
    def getTextAlign(self) -> int:
        ...
    def isCheck(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def setBindEle(self, ele: XWidget) -> None:
        ...
    def setBtnTypeEx(self, nType: XC_OBJECT_TYPE_EX) -> None:
        ...
    def setCheck(self, checked: bool) -> bool:
        ...
    def setGroupId(self, groupId: typing.SupportsInt) -> None:
        ...
    def setIcon(self, image: XImage) -> None:
        ...
    def setIconAlign(self, align: button_icon_align_) -> None:
        ...
    def setIconDisable(self, image: XImage) -> None:
        ...
    def setIconSpace(self, size: typing.SupportsInt) -> None:
        ...
    def setOffset(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setOffsetIcon(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setState(self, state: common_state3_) -> None:
        ...
    def setText(self, text: str) -> None:
        ...
    def setTextAlign(self, flags: typing.SupportsInt) -> None:
        ...
class XC_DWRITE_RENDERING_MODE:
    """
    Members:
    
      XC_DWRITE_RENDERING_MODE_DEFAULT
    
      XC_DWRITE_RENDERING_MODE_ALIASED
    
      XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC
    
      XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL
    
      XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL
    
      XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC
    
      XC_DWRITE_RENDERING_MODE_OUTLINE
    """
    XC_DWRITE_RENDERING_MODE_ALIASED: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_ALIASED: 1>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: 2>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: 3>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: 4>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: 5>
    XC_DWRITE_RENDERING_MODE_DEFAULT: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_DEFAULT: 0>
    XC_DWRITE_RENDERING_MODE_OUTLINE: typing.ClassVar[XC_DWRITE_RENDERING_MODE]  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_OUTLINE: 6>
    __members__: typing.ClassVar[dict[str, XC_DWRITE_RENDERING_MODE]]  # value = {'XC_DWRITE_RENDERING_MODE_DEFAULT': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_DEFAULT: 0>, 'XC_DWRITE_RENDERING_MODE_ALIASED': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_ALIASED: 1>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: 2>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: 3>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: 4>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: 5>, 'XC_DWRITE_RENDERING_MODE_OUTLINE': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_OUTLINE: 6>}
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class XC_OBJECT_STYLE:
    """
    Members:
    
      xc_style_default
    
      button_style_default
    
      button_style_radio
    
      button_style_check
    
      button_style_icon
    
      button_style_expand
    
      button_style_close
    
      button_style_max
    
      button_style_min
    
      button_style_scrollbar_left
    
      button_style_scrollbar_right
    
      button_style_scrollbar_up
    
      button_style_scrollbar_down
    
      button_style_scrollbar_slider_h
    
      button_style_scrollbar_slider_v
    
      button_style_tabBar
    
      button_style_slider
    
      button_style_toolBar
    
      button_style_toolBar_left
    
      button_style_toolBar_right
    
      button_style_pane_close
    
      button_style_pane_lock
    
      button_style_pane_menu
    
      button_style_pane_dock_left
    
      button_style_pane_dock_top
    
      button_style_pane_dock_right
    
      button_style_pane_dock_bottom
    
      element_style_frameWnd_dock_left
    
      element_style_frameWnd_dock_top
    
      element_style_frameWnd_dock_right
    
      element_style_frameWnd_dock_bottom
    
      element_style_toolBar_separator
    
      listBox_style_comboBox
    """
    __members__: typing.ClassVar[dict[str, XC_OBJECT_STYLE]]  # value = {'xc_style_default': <XC_OBJECT_STYLE.xc_style_default: 0>, 'button_style_default': <XC_OBJECT_STYLE.xc_style_default: 0>, 'button_style_radio': <XC_OBJECT_STYLE.button_style_radio: 1>, 'button_style_check': <XC_OBJECT_STYLE.button_style_check: 2>, 'button_style_icon': <XC_OBJECT_STYLE.button_style_icon: 3>, 'button_style_expand': <XC_OBJECT_STYLE.button_style_expand: 4>, 'button_style_close': <XC_OBJECT_STYLE.button_style_close: 5>, 'button_style_max': <XC_OBJECT_STYLE.button_style_max: 6>, 'button_style_min': <XC_OBJECT_STYLE.button_style_min: 7>, 'button_style_scrollbar_left': <XC_OBJECT_STYLE.button_style_scrollbar_left: 8>, 'button_style_scrollbar_right': <XC_OBJECT_STYLE.button_style_scrollbar_right: 9>, 'button_style_scrollbar_up': <XC_OBJECT_STYLE.button_style_scrollbar_up: 10>, 'button_style_scrollbar_down': <XC_OBJECT_STYLE.button_style_scrollbar_down: 11>, 'button_style_scrollbar_slider_h': <XC_OBJECT_STYLE.button_style_scrollbar_slider_h: 12>, 'button_style_scrollbar_slider_v': <XC_OBJECT_STYLE.button_style_scrollbar_slider_v: 13>, 'button_style_tabBar': <XC_OBJECT_STYLE.button_style_tabBar: 14>, 'button_style_slider': <XC_OBJECT_STYLE.button_style_slider: 15>, 'button_style_toolBar': <XC_OBJECT_STYLE.button_style_toolBar: 16>, 'button_style_toolBar_left': <XC_OBJECT_STYLE.button_style_toolBar_left: 17>, 'button_style_toolBar_right': <XC_OBJECT_STYLE.button_style_toolBar_right: 18>, 'button_style_pane_close': <XC_OBJECT_STYLE.button_style_pane_close: 19>, 'button_style_pane_lock': <XC_OBJECT_STYLE.button_style_pane_lock: 20>, 'button_style_pane_menu': <XC_OBJECT_STYLE.button_style_pane_menu: 21>, 'button_style_pane_dock_left': <XC_OBJECT_STYLE.button_style_pane_dock_left: 22>, 'button_style_pane_dock_top': <XC_OBJECT_STYLE.button_style_pane_dock_top: 23>, 'button_style_pane_dock_right': <XC_OBJECT_STYLE.button_style_pane_dock_right: 24>, 'button_style_pane_dock_bottom': <XC_OBJECT_STYLE.button_style_pane_dock_bottom: 25>, 'element_style_frameWnd_dock_left': <XC_OBJECT_STYLE.element_style_frameWnd_dock_left: 26>, 'element_style_frameWnd_dock_top': <XC_OBJECT_STYLE.element_style_frameWnd_dock_top: 27>, 'element_style_frameWnd_dock_right': <XC_OBJECT_STYLE.element_style_frameWnd_dock_right: 28>, 'element_style_frameWnd_dock_bottom': <XC_OBJECT_STYLE.element_style_frameWnd_dock_bottom: 29>, 'element_style_toolBar_separator': <XC_OBJECT_STYLE.element_style_toolBar_separator: 30>, 'listBox_style_comboBox': <XC_OBJECT_STYLE.listBox_style_comboBox: 31>}
    button_style_check: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_check: 2>
    button_style_close: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_close: 5>
    button_style_default: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.xc_style_default: 0>
    button_style_expand: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_expand: 4>
    button_style_icon: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_icon: 3>
    button_style_max: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_max: 6>
    button_style_min: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_min: 7>
    button_style_pane_close: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_close: 19>
    button_style_pane_dock_bottom: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_dock_bottom: 25>
    button_style_pane_dock_left: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_dock_left: 22>
    button_style_pane_dock_right: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_dock_right: 24>
    button_style_pane_dock_top: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_dock_top: 23>
    button_style_pane_lock: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_lock: 20>
    button_style_pane_menu: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_pane_menu: 21>
    button_style_radio: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_radio: 1>
    button_style_scrollbar_down: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_scrollbar_down: 11>
    button_style_scrollbar_left: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_scrollbar_left: 8>
    button_style_scrollbar_right: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_scrollbar_right: 9>
    button_style_scrollbar_slider_h: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_h: 12>
    button_style_scrollbar_slider_v: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_v: 13>
    button_style_scrollbar_up: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_scrollbar_up: 10>
    button_style_slider: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_slider: 15>
    button_style_tabBar: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_tabBar: 14>
    button_style_toolBar: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_toolBar: 16>
    button_style_toolBar_left: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_toolBar_left: 17>
    button_style_toolBar_right: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.button_style_toolBar_right: 18>
    element_style_frameWnd_dock_bottom: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_bottom: 29>
    element_style_frameWnd_dock_left: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_left: 26>
    element_style_frameWnd_dock_right: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_right: 28>
    element_style_frameWnd_dock_top: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_top: 27>
    element_style_toolBar_separator: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.element_style_toolBar_separator: 30>
    listBox_style_comboBox: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.listBox_style_comboBox: 31>
    xc_style_default: typing.ClassVar[XC_OBJECT_STYLE]  # value = <XC_OBJECT_STYLE.xc_style_default: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class XC_OBJECT_TYPE:
    """
    Members:
    
      XC_ERROR
    
      XC_NOTHING
    
      XC_WINDOW
    
      XC_MODALWINDOW
    
      XC_FRAMEWND
    
      XC_FLOATWND
    
      XC_COMBOBOXWINDOW
    
      XC_POPUPMENUWINDOW
    
      XC_POPUPMENUCHILDWINDOW
    
      XC_OBJECT_UI
    
      XC_WIDGET_UI
    
      XC_ELE
    
      XC_ELE_LAYOUT
    
      XC_LAYOUT_FRAME
    
      XC_BUTTON
    
      XC_EDIT
    
      XC_EDITOR
    
      XC_RICHEDIT
    
      XC_COMBOBOX
    
      XC_SCROLLBAR
    
      XC_SCROLLVIEW
    
      XC_LIST
    
      XC_LISTBOX
    
      XC_LISTVIEW
    
      XC_TREE
    
      XC_MENUBAR
    
      XC_SLIDERBAR
    
      XC_PROGRESSBAR
    
      XC_TOOLBAR
    
      XC_MONTHCAL
    
      XC_DATETIME
    
      XC_PROPERTYGRID
    
      XC_EDIT_COLOR
    
      XC_EDIT_SET
    
      XC_TABBAR
    
      XC_TEXTLINK
    
      XC_PANE
    
      XC_PANE_SPLIT
    
      XC_MENUBAR_BUTTON
    
      XC_EDIT_FILE
    
      XC_EDIT_FOLDER
    
      XC_LIST_HEADER
    
      XC_SHAPE
    
      XC_SHAPE_TEXT
    
      XC_SHAPE_PICTURE
    
      XC_SHAPE_RECT
    
      XC_SHAPE_ELLIPSE
    
      XC_SHAPE_LINE
    
      XC_SHAPE_GROUPBOX
    
      XC_SHAPE_GIF
    
      XC_SHAPE_TABLE
    
      XC_MENU
    
      XC_IMAGE
    
      XC_IMAGE_TEXTURE
    
      XC_HDRAW
    
      XC_FONT
    
      XC_IMAGE_FRAME
    
      XC_SVG
    
      XC_LAYOUT_OBJECT
    
      XC_ADAPTER
    
      XC_ADAPTER_TABLE
    
      XC_ADAPTER_TREE
    
      XC_ADAPTER_LISTVIEW
    
      XC_ADAPTER_MAP
    
      XC_BKINFOM
    
      XC_LAYOUT_LISTVIEW
    
      XC_LAYOUT_LIST
    
      XC_LAYOUT_OBJECT_GROUP
    
      XC_LAYOUT_OBJECT_ITEM
    
      XC_LAYOUT_PANEL
    
      XC_LAYOUT_BOX
    
      XC_ANIMATION_SEQUENCE
    
      XC_ANIMATION_GROUP
    
      XC_ANIMATION_ITEM
    """
    XC_ADAPTER: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ADAPTER: 102>
    XC_ADAPTER_LISTVIEW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ADAPTER_LISTVIEW: 105>
    XC_ADAPTER_MAP: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ADAPTER_MAP: 106>
    XC_ADAPTER_TABLE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ADAPTER_TABLE: 103>
    XC_ADAPTER_TREE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ADAPTER_TREE: 104>
    XC_ANIMATION_GROUP: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ANIMATION_GROUP: 132>
    XC_ANIMATION_ITEM: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ANIMATION_ITEM: 133>
    XC_ANIMATION_SEQUENCE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ANIMATION_SEQUENCE: 131>
    XC_BKINFOM: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_BKINFOM: 116>
    XC_BUTTON: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_BUTTON: 22>
    XC_COMBOBOX: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_COMBOBOX: 24>
    XC_COMBOBOXWINDOW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_COMBOBOXWINDOW: 11>
    XC_DATETIME: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_DATETIME: 36>
    XC_EDIT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_EDIT: 45>
    XC_EDITOR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_EDITOR: 46>
    XC_EDIT_COLOR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_EDIT_COLOR: 38>
    XC_EDIT_FILE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_EDIT_FILE: 50>
    XC_EDIT_FOLDER: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_EDIT_FOLDER: 51>
    XC_EDIT_SET: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_EDIT_SET: 39>
    XC_ELE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ELE: 21>
    XC_ELE_LAYOUT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ELE_LAYOUT: 53>
    XC_ERROR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_ERROR: -1>
    XC_FLOATWND: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_FLOATWND: 4>
    XC_FONT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_FONT: 84>
    XC_FRAMEWND: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_FRAMEWND: 3>
    XC_HDRAW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_HDRAW: 83>
    XC_IMAGE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
    XC_IMAGE_FRAME: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_IMAGE_FRAME: 88>
    XC_IMAGE_TEXTURE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
    XC_LAYOUT_BOX: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_BOX: 124>
    XC_LAYOUT_FRAME: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_FRAME: 54>
    XC_LAYOUT_LIST: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_LIST: 112>
    XC_LAYOUT_LISTVIEW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_LISTVIEW: 111>
    XC_LAYOUT_OBJECT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT: 101>
    XC_LAYOUT_OBJECT_GROUP: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_GROUP: 113>
    XC_LAYOUT_OBJECT_ITEM: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_ITEM: 114>
    XC_LAYOUT_PANEL: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LAYOUT_PANEL: 115>
    XC_LIST: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LIST: 27>
    XC_LISTBOX: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LISTBOX: 28>
    XC_LISTVIEW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LISTVIEW: 29>
    XC_LIST_HEADER: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_LIST_HEADER: 52>
    XC_MENU: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_MENU: 81>
    XC_MENUBAR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_MENUBAR: 31>
    XC_MENUBAR_BUTTON: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_MENUBAR_BUTTON: 44>
    XC_MODALWINDOW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_MODALWINDOW: 2>
    XC_MONTHCAL: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_MONTHCAL: 35>
    XC_NOTHING: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_NOTHING: 0>
    XC_OBJECT_UI: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_OBJECT_UI: 19>
    XC_PANE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_PANE: 42>
    XC_PANE_SPLIT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_PANE_SPLIT: 43>
    XC_POPUPMENUCHILDWINDOW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_POPUPMENUCHILDWINDOW: 13>
    XC_POPUPMENUWINDOW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_POPUPMENUWINDOW: 12>
    XC_PROGRESSBAR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_PROGRESSBAR: 33>
    XC_PROPERTYGRID: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_PROPERTYGRID: 37>
    XC_RICHEDIT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_RICHEDIT: 23>
    XC_SCROLLBAR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SCROLLBAR: 25>
    XC_SCROLLVIEW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SCROLLVIEW: 26>
    XC_SHAPE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE: 61>
    XC_SHAPE_ELLIPSE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_ELLIPSE: 65>
    XC_SHAPE_GIF: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_GIF: 68>
    XC_SHAPE_GROUPBOX: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_GROUPBOX: 67>
    XC_SHAPE_LINE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_LINE: 66>
    XC_SHAPE_PICTURE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_PICTURE: 63>
    XC_SHAPE_RECT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_RECT: 64>
    XC_SHAPE_TABLE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_TABLE: 69>
    XC_SHAPE_TEXT: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SHAPE_TEXT: 62>
    XC_SLIDERBAR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SLIDERBAR: 32>
    XC_SVG: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_SVG: 89>
    XC_TABBAR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_TABBAR: 40>
    XC_TEXTLINK: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_TEXTLINK: 41>
    XC_TOOLBAR: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_TOOLBAR: 34>
    XC_TREE: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_TREE: 30>
    XC_WIDGET_UI: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_WIDGET_UI: 20>
    XC_WINDOW: typing.ClassVar[XC_OBJECT_TYPE]  # value = <XC_OBJECT_TYPE.XC_WINDOW: 1>
    __members__: typing.ClassVar[dict[str, XC_OBJECT_TYPE]]  # value = {'XC_ERROR': <XC_OBJECT_TYPE.XC_ERROR: -1>, 'XC_NOTHING': <XC_OBJECT_TYPE.XC_NOTHING: 0>, 'XC_WINDOW': <XC_OBJECT_TYPE.XC_WINDOW: 1>, 'XC_MODALWINDOW': <XC_OBJECT_TYPE.XC_MODALWINDOW: 2>, 'XC_FRAMEWND': <XC_OBJECT_TYPE.XC_FRAMEWND: 3>, 'XC_FLOATWND': <XC_OBJECT_TYPE.XC_FLOATWND: 4>, 'XC_COMBOBOXWINDOW': <XC_OBJECT_TYPE.XC_COMBOBOXWINDOW: 11>, 'XC_POPUPMENUWINDOW': <XC_OBJECT_TYPE.XC_POPUPMENUWINDOW: 12>, 'XC_POPUPMENUCHILDWINDOW': <XC_OBJECT_TYPE.XC_POPUPMENUCHILDWINDOW: 13>, 'XC_OBJECT_UI': <XC_OBJECT_TYPE.XC_OBJECT_UI: 19>, 'XC_WIDGET_UI': <XC_OBJECT_TYPE.XC_WIDGET_UI: 20>, 'XC_ELE': <XC_OBJECT_TYPE.XC_ELE: 21>, 'XC_ELE_LAYOUT': <XC_OBJECT_TYPE.XC_ELE_LAYOUT: 53>, 'XC_LAYOUT_FRAME': <XC_OBJECT_TYPE.XC_LAYOUT_FRAME: 54>, 'XC_BUTTON': <XC_OBJECT_TYPE.XC_BUTTON: 22>, 'XC_EDIT': <XC_OBJECT_TYPE.XC_EDIT: 45>, 'XC_EDITOR': <XC_OBJECT_TYPE.XC_EDITOR: 46>, 'XC_RICHEDIT': <XC_OBJECT_TYPE.XC_RICHEDIT: 23>, 'XC_COMBOBOX': <XC_OBJECT_TYPE.XC_COMBOBOX: 24>, 'XC_SCROLLBAR': <XC_OBJECT_TYPE.XC_SCROLLBAR: 25>, 'XC_SCROLLVIEW': <XC_OBJECT_TYPE.XC_SCROLLVIEW: 26>, 'XC_LIST': <XC_OBJECT_TYPE.XC_LIST: 27>, 'XC_LISTBOX': <XC_OBJECT_TYPE.XC_LISTBOX: 28>, 'XC_LISTVIEW': <XC_OBJECT_TYPE.XC_LISTVIEW: 29>, 'XC_TREE': <XC_OBJECT_TYPE.XC_TREE: 30>, 'XC_MENUBAR': <XC_OBJECT_TYPE.XC_MENUBAR: 31>, 'XC_SLIDERBAR': <XC_OBJECT_TYPE.XC_SLIDERBAR: 32>, 'XC_PROGRESSBAR': <XC_OBJECT_TYPE.XC_PROGRESSBAR: 33>, 'XC_TOOLBAR': <XC_OBJECT_TYPE.XC_TOOLBAR: 34>, 'XC_MONTHCAL': <XC_OBJECT_TYPE.XC_MONTHCAL: 35>, 'XC_DATETIME': <XC_OBJECT_TYPE.XC_DATETIME: 36>, 'XC_PROPERTYGRID': <XC_OBJECT_TYPE.XC_PROPERTYGRID: 37>, 'XC_EDIT_COLOR': <XC_OBJECT_TYPE.XC_EDIT_COLOR: 38>, 'XC_EDIT_SET': <XC_OBJECT_TYPE.XC_EDIT_SET: 39>, 'XC_TABBAR': <XC_OBJECT_TYPE.XC_TABBAR: 40>, 'XC_TEXTLINK': <XC_OBJECT_TYPE.XC_TEXTLINK: 41>, 'XC_PANE': <XC_OBJECT_TYPE.XC_PANE: 42>, 'XC_PANE_SPLIT': <XC_OBJECT_TYPE.XC_PANE_SPLIT: 43>, 'XC_MENUBAR_BUTTON': <XC_OBJECT_TYPE.XC_MENUBAR_BUTTON: 44>, 'XC_EDIT_FILE': <XC_OBJECT_TYPE.XC_EDIT_FILE: 50>, 'XC_EDIT_FOLDER': <XC_OBJECT_TYPE.XC_EDIT_FOLDER: 51>, 'XC_LIST_HEADER': <XC_OBJECT_TYPE.XC_LIST_HEADER: 52>, 'XC_SHAPE': <XC_OBJECT_TYPE.XC_SHAPE: 61>, 'XC_SHAPE_TEXT': <XC_OBJECT_TYPE.XC_SHAPE_TEXT: 62>, 'XC_SHAPE_PICTURE': <XC_OBJECT_TYPE.XC_SHAPE_PICTURE: 63>, 'XC_SHAPE_RECT': <XC_OBJECT_TYPE.XC_SHAPE_RECT: 64>, 'XC_SHAPE_ELLIPSE': <XC_OBJECT_TYPE.XC_SHAPE_ELLIPSE: 65>, 'XC_SHAPE_LINE': <XC_OBJECT_TYPE.XC_SHAPE_LINE: 66>, 'XC_SHAPE_GROUPBOX': <XC_OBJECT_TYPE.XC_SHAPE_GROUPBOX: 67>, 'XC_SHAPE_GIF': <XC_OBJECT_TYPE.XC_SHAPE_GIF: 68>, 'XC_SHAPE_TABLE': <XC_OBJECT_TYPE.XC_SHAPE_TABLE: 69>, 'XC_MENU': <XC_OBJECT_TYPE.XC_MENU: 81>, 'XC_IMAGE': <XC_OBJECT_TYPE.XC_IMAGE: 82>, 'XC_IMAGE_TEXTURE': <XC_OBJECT_TYPE.XC_IMAGE: 82>, 'XC_HDRAW': <XC_OBJECT_TYPE.XC_HDRAW: 83>, 'XC_FONT': <XC_OBJECT_TYPE.XC_FONT: 84>, 'XC_IMAGE_FRAME': <XC_OBJECT_TYPE.XC_IMAGE_FRAME: 88>, 'XC_SVG': <XC_OBJECT_TYPE.XC_SVG: 89>, 'XC_LAYOUT_OBJECT': <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT: 101>, 'XC_ADAPTER': <XC_OBJECT_TYPE.XC_ADAPTER: 102>, 'XC_ADAPTER_TABLE': <XC_OBJECT_TYPE.XC_ADAPTER_TABLE: 103>, 'XC_ADAPTER_TREE': <XC_OBJECT_TYPE.XC_ADAPTER_TREE: 104>, 'XC_ADAPTER_LISTVIEW': <XC_OBJECT_TYPE.XC_ADAPTER_LISTVIEW: 105>, 'XC_ADAPTER_MAP': <XC_OBJECT_TYPE.XC_ADAPTER_MAP: 106>, 'XC_BKINFOM': <XC_OBJECT_TYPE.XC_BKINFOM: 116>, 'XC_LAYOUT_LISTVIEW': <XC_OBJECT_TYPE.XC_LAYOUT_LISTVIEW: 111>, 'XC_LAYOUT_LIST': <XC_OBJECT_TYPE.XC_LAYOUT_LIST: 112>, 'XC_LAYOUT_OBJECT_GROUP': <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_GROUP: 113>, 'XC_LAYOUT_OBJECT_ITEM': <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_ITEM: 114>, 'XC_LAYOUT_PANEL': <XC_OBJECT_TYPE.XC_LAYOUT_PANEL: 115>, 'XC_LAYOUT_BOX': <XC_OBJECT_TYPE.XC_LAYOUT_BOX: 124>, 'XC_ANIMATION_SEQUENCE': <XC_OBJECT_TYPE.XC_ANIMATION_SEQUENCE: 131>, 'XC_ANIMATION_GROUP': <XC_OBJECT_TYPE.XC_ANIMATION_GROUP: 132>, 'XC_ANIMATION_ITEM': <XC_OBJECT_TYPE.XC_ANIMATION_ITEM: 133>}
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class XC_OBJECT_TYPE_EX:
    """
    Members:
    
      xc_ex_error
    
      button_type_default
    
      button_type_radio
    
      button_type_check
    
      button_type_close
    
      button_type_min
    
      button_type_max
    
      element_type_layout
    """
    __members__: typing.ClassVar[dict[str, XC_OBJECT_TYPE_EX]]  # value = {'xc_ex_error': <XC_OBJECT_TYPE_EX.xc_ex_error: -1>, 'button_type_default': <XC_OBJECT_TYPE_EX.button_type_default: 0>, 'button_type_radio': <XC_OBJECT_TYPE_EX.button_type_radio: 1>, 'button_type_check': <XC_OBJECT_TYPE_EX.button_type_check: 2>, 'button_type_close': <XC_OBJECT_TYPE_EX.button_type_close: 3>, 'button_type_min': <XC_OBJECT_TYPE_EX.button_type_min: 4>, 'button_type_max': <XC_OBJECT_TYPE_EX.button_type_max: 5>, 'element_type_layout': <XC_OBJECT_TYPE_EX.element_type_layout: 6>}
    button_type_check: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.button_type_check: 2>
    button_type_close: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.button_type_close: 3>
    button_type_default: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.button_type_default: 0>
    button_type_max: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.button_type_max: 5>
    button_type_min: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.button_type_min: 4>
    button_type_radio: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.button_type_radio: 1>
    element_type_layout: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.element_type_layout: 6>
    xc_ex_error: typing.ClassVar[XC_OBJECT_TYPE_EX]  # value = <XC_OBJECT_TYPE_EX.xc_ex_error: -1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class XCareInfo:
    @property
    def care(self) -> XObject:
        ...
    @property
    def height(self) -> int:
        ...
    @property
    def width(self) -> int:
        ...
    @property
    def x(self) -> int:
        ...
    @property
    def y(self) -> int:
        ...
class XComboBox(XEdit):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XComboBox:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addItemImage(self, image: XImage) -> int:
        ...
    def addItemImageEx(self, name: str, image: XImage) -> int:
        ...
    def addItemText(self, text: str) -> int:
        ...
    def addItemTextEx(self, name: str, text: str) -> int:
        ...
    def bindAdapter(self, adapter: XAdapter) -> None:
        ...
    def createAdapter(self) -> XObject:
        ...
    def deleteColumnAll(self) -> None:
        ...
    def deleteItem(self, item: typing.SupportsInt) -> bool:
        ...
    def deleteItemAll(self) -> None:
        ...
    def deleteItemEx(self, item: typing.SupportsInt, count: typing.SupportsInt) -> bool:
        ...
    def enableDrawButton(self, enable: bool) -> None:
        ...
    def enableDropHeightFixed(self, enable: bool) -> None:
        ...
    def enableEdit(self, enable: bool) -> None:
        ...
    def getAdapter(self) -> XObject:
        ...
    def getButtonRect(self) -> XRect:
        ...
    def getCount(self) -> int:
        ...
    def getCountColumn(self) -> int:
        ...
    def getDropHeight(self) -> int:
        ...
    def getItemFloat(self, item: typing.SupportsInt, column: typing.SupportsInt) -> float:
        ...
    def getItemFloatEx(self, item: typing.SupportsInt, name: str) -> float:
        ...
    def getItemImage(self, item: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def getItemImageEx(self, item: typing.SupportsInt, name: str) -> XImage:
        ...
    def getItemInt(self, item: typing.SupportsInt, column: typing.SupportsInt) -> int:
        ...
    def getItemIntEx(self, item: typing.SupportsInt, name: str) -> int:
        ...
    def getItemTemplate(self) -> XTemplate:
        ...
    def getItemText(self, item: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def getItemTextEx(self, item: typing.SupportsInt, name: str) -> str:
        ...
    def getSelItem(self) -> int:
        ...
    def getState(self) -> comboBox_state_:
        ...
    def insertItemImage(self, item: typing.SupportsInt, image: XImage) -> int:
        ...
    def insertItemImageEx(self, item: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def insertItemText(self, item: typing.SupportsInt, text: str) -> int:
        ...
    def insertItemTextEx(self, item: typing.SupportsInt, name: str, text: str) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def popupDropList(self) -> None:
        ...
    def setBindName(self, name: str) -> None:
        ...
    def setButtonSize(self, size: typing.SupportsInt) -> None:
        ...
    def setDropHeight(self, height: typing.SupportsInt) -> None:
        ...
    def setItemFloat(self, item: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsFloat) -> bool:
        ...
    def setItemFloatEx(self, item: typing.SupportsInt, name: str, value: typing.SupportsFloat) -> bool:
        ...
    def setItemImage(self, item: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def setItemImageEx(self, item: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def setItemInt(self, item: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsInt) -> bool:
        ...
    def setItemIntEx(self, item: typing.SupportsInt, name: str, value: typing.SupportsInt) -> bool:
        ...
    def setItemTemplate(self, template: XTemplate) -> bool:
        ...
    def setItemTemplateXML(self, xml: str) -> None:
        ...
    def setItemTemplateXMLFromMem(self, xmlData: str) -> int:
        ...
    def setItemTemplateXMLFromZipRes(self, id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    def setItemText(self, item: typing.SupportsInt, column: typing.SupportsInt, text: str) -> bool:
        ...
    def setItemTextEx(self, item: typing.SupportsInt, name: str, text: str) -> bool:
        ...
    def setSelItem(self, index: typing.SupportsInt) -> bool:
        ...
class XDateInfo:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, year: typing.SupportsInt, month: typing.SupportsInt, day: typing.SupportsInt) -> None:
        ...
    @property
    def day(self) -> int:
        ...
    @day.setter
    def day(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def month(self) -> int:
        ...
    @month.setter
    def month(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def year(self) -> int:
        ...
    @year.setter
    def year(self, arg0: typing.SupportsInt) -> None:
        ...
class XDateTime(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XDateTime:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def getButton(self, btnType: typing.SupportsInt) -> XButton:
        ...
    def getDate(self) -> XDateInfo:
        ...
    def getSelBkColor(self) -> int:
        ...
    def getStyle(self) -> int:
        ...
    def getTime(self) -> XTimeInfo:
        ...
    def isValid(self) -> bool:
        ...
    def popup(self) -> None:
        ...
    def setDate(self, year: typing.SupportsInt, month: typing.SupportsInt, day: typing.SupportsInt) -> None:
        ...
    def setSelBkColor(self, color: typing.SupportsInt) -> None:
        ...
    def setStyle(self, style: typing.SupportsInt) -> None:
        ...
    def setTime(self, hour: typing.SupportsInt, minute: typing.SupportsInt, second: typing.SupportsInt) -> None:
        ...
class XDesigner:
    @staticmethod
    def loadLayout(fileName: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutEx(fileName: str, prefixName: str = '', parent: XObject = None, parentHWND: typing.SupportsInt = 0, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutFromString(xml: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutFromStringEx(xml: str, prefixName: str = '', parent: XObject = None, parentHWND: typing.SupportsInt = 0, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutFromStringUtf8Ex(xml: str, prefixName: str = '', parent: XObject = None, parentHWND: typing.SupportsInt = 0, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutZip(zipFileName: str, fileName: str, password: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutZipEx(zipFileName: str, fileName: str, password: str = '', prefixName: str = '', parent: XObject = None, parentHWND: typing.SupportsInt = 0, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutZipMem(data: bytes, fileName: str, password: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutZipMemEx(data: bytes, fileName: str, password: str = '', prefixName: str = '', parent: XObject = None, parentHWND: typing.SupportsInt = 0, attachHWND: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadLayoutZipResEx(id: typing.SupportsInt, fileName: str, password: str = '', prefixName: str = '', parent: XObject = None, parentHWND: typing.SupportsInt = 0, attachHWND: typing.SupportsInt = 0, hModule: typing.SupportsInt = 0) -> XObject:
        ...
    @staticmethod
    def loadResource(filename: str) -> bool:
        ...
    @staticmethod
    def loadResourceString(xml: str, filename: str) -> bool:
        ...
    @staticmethod
    def loadResourceZip(zipFileName: str, filename: str, password: str) -> bool:
        ...
    @staticmethod
    def loadResourceZipMem(data: bytes, filename: str, password: str) -> bool:
        ...
    @staticmethod
    def loadStyle(filename: str) -> bool:
        ...
    @staticmethod
    def loadStyleString(xml: str, filename: str) -> bool:
        ...
    @staticmethod
    def loadStyleZip(zipFileName: str, filename: str, password: str) -> bool:
        ...
    @staticmethod
    def loadStyleZipMem(data: bytes, filename: str, password: str) -> bool:
        ...
class XDraw(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XDraw:
        ...
    @staticmethod
    def create(window: XObject) -> XDraw:
        ...
    @staticmethod
    def createFromGdi(window: XObject, hdc: typing.SupportsInt) -> XDraw:
        ...
    def clearClip(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def dottedline(self, x1: typing.SupportsInt, y1: typing.SupportsInt, x2: typing.SupportsInt, y2: typing.SupportsInt) -> None:
        ...
    def dottedlineF(self, x1: typing.SupportsFloat, y1: typing.SupportsFloat, x2: typing.SupportsFloat, y2: typing.SupportsFloat) -> None:
        ...
    def drawArc(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, startAngle: typing.SupportsFloat, sweepAngle: typing.SupportsFloat) -> None:
        ...
    def drawArcF(self, x: typing.SupportsFloat, y: typing.SupportsFloat, width: typing.SupportsFloat, height: typing.SupportsFloat, startAngle: typing.SupportsFloat, sweepAngle: typing.SupportsFloat) -> None:
        ...
    def drawCurve(self, pointList: collections.abc.Sequence[XPoint], tension: typing.SupportsFloat) -> None:
        ...
    def drawCurveF(self, pointList: collections.abc.Sequence[XPointF], tension: typing.SupportsFloat) -> None:
        ...
    def drawEllipse(self, rect: XRect) -> None:
        ...
    def drawEllipseF(self, rect: XRectF) -> None:
        ...
    def drawLine(self, x1: typing.SupportsInt, y1: typing.SupportsInt, x2: typing.SupportsInt, y2: typing.SupportsInt) -> None:
        ...
    def drawLineF(self, x1: typing.SupportsFloat, y1: typing.SupportsFloat, x2: typing.SupportsFloat, y2: typing.SupportsFloat) -> None:
        ...
    def drawPolygon(self, pointList: collections.abc.Sequence[XPoint]) -> None:
        ...
    def drawPolygonF(self, pointList: collections.abc.Sequence[XPointF]) -> None:
        ...
    def drawRect(self, rect: XRect) -> None:
        ...
    def drawRectF(self, rect: XRectF) -> None:
        ...
    def drawRoundRect(self, rect: XRect, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def drawRoundRectEx(self, rect: XRect, leftTop: typing.SupportsInt, rightTop: typing.SupportsInt, rightBottom: typing.SupportsInt, leftBottom: typing.SupportsInt) -> None:
        ...
    def drawRoundRectExF(self, rect: XRectF, leftTop: typing.SupportsFloat, rightTop: typing.SupportsFloat, rightBottom: typing.SupportsFloat, leftBottom: typing.SupportsFloat) -> None:
        ...
    def drawRoundRectF(self, rect: XRectF, width: typing.SupportsFloat, height: typing.SupportsFloat) -> None:
        ...
    def drawSvg(self, svg: XSvg, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def drawSvgEx(self, svg: XSvg, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def drawSvgSize(self, svg: XSvg, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def drawSvgSrc(self, svg: XSvg) -> None:
        ...
    def drawText(self, text: str, rect: XRect) -> None:
        ...
    def drawTextF(self, text: str, rect: XRectF) -> None:
        ...
    def drawTextUnderline(self, text: str, rect: XRect, lineColor: typing.SupportsInt) -> None:
        ...
    def drawTextUnderlineF(self, text: str, rect: XRectF, lineColor: typing.SupportsInt) -> None:
        ...
    def enableSmoothingMode(self, enable: bool) -> None:
        ...
    def enableWndTransparent(self, enable: bool) -> None:
        ...
    def fillPolygon(self, pointList: collections.abc.Sequence[XPoint]) -> None:
        ...
    def fillPolygonF(self, pointList: collections.abc.Sequence[XPointF]) -> None:
        ...
    def fillRect(self, rect: XRect) -> None:
        ...
    def fillRectColor(self, rect: XRect, color: typing.SupportsInt) -> None:
        ...
    def fillRectColorF(self, rect: XRectF, color: typing.SupportsInt) -> None:
        ...
    def fillRectF(self, rect: XRectF) -> None:
        ...
    def fillRoundRect(self, rect: XRect, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def fillRoundRectEx(self, rect: XRect, leftTop: typing.SupportsInt, rightTop: typing.SupportsInt, rightBottom: typing.SupportsInt, leftBottom: typing.SupportsInt) -> None:
        ...
    def fillRoundRectExF(self, rect: XRectF, leftTop: typing.SupportsFloat, rightTop: typing.SupportsFloat, rightBottom: typing.SupportsFloat, leftBottom: typing.SupportsFloat) -> None:
        ...
    def fillRoundRectF(self, rect: XRectF, width: typing.SupportsFloat, height: typing.SupportsFloat) -> None:
        ...
    def focusRect(self, rect: XRect) -> None:
        ...
    def focusRectF(self, rect: XRectF) -> None:
        ...
    def gdiAlphaBlend(self, xOriginDest: typing.SupportsInt, yOriginDest: typing.SupportsInt, widthDest: typing.SupportsInt, heightDest: typing.SupportsInt, hdcSrc: typing.SupportsInt, xOriginSrc: typing.SupportsInt, yOriginSrc: typing.SupportsInt, widthSrc: typing.SupportsInt, heightSrc: typing.SupportsInt, alpha: typing.SupportsInt) -> bool:
        ...
    def gdiBitBlt(self, xDest: typing.SupportsInt, yDest: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, hdcSrc: typing.SupportsInt, xSrc: typing.SupportsInt, ySrc: typing.SupportsInt, rop: typing.SupportsInt) -> bool:
        ...
    def gdiBitBlt2(self, xDest: typing.SupportsInt, yDest: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, drawSrc: XDraw, xSrc: typing.SupportsInt, ySrc: typing.SupportsInt, rop: typing.SupportsInt) -> bool:
        ...
    def gdiCreatePen(self, penStyle: typing.SupportsInt, width: typing.SupportsInt, color: typing.SupportsInt) -> int:
        ...
    def gdiCreatePolygonRgn(self, pointList: collections.abc.Sequence[XPoint], polyFillMode: typing.SupportsInt) -> int:
        ...
    def gdiCreateRectRgn(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> int:
        ...
    def gdiCreateRoundRectRgn(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt, widthEllipse: typing.SupportsInt, heightEllipse: typing.SupportsInt) -> int:
        ...
    def gdiCreateSolidBrush(self, color: typing.SupportsInt) -> int:
        ...
    def gdiDrawIconEx(self, xLeft: typing.SupportsInt, yTop: typing.SupportsInt, hIcon: typing.SupportsInt, cxWidth: typing.SupportsInt, cyWidth: typing.SupportsInt, stepIfAniCur: typing.SupportsInt, hbrFlickerFreeDraw: typing.SupportsInt, diFlags: typing.SupportsInt) -> bool:
        ...
    def gdiEllipse(self, rect: XRect) -> bool:
        ...
    def gdiFillRgn(self, hRgn: typing.SupportsInt, hBrush: typing.SupportsInt) -> bool:
        ...
    def gdiFrameRgn(self, hRgn: typing.SupportsInt, hBrush: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt) -> bool:
        ...
    def gdiLineTo(self, xEnd: typing.SupportsInt, yEnd: typing.SupportsInt) -> bool:
        ...
    def gdiMoveToEx(self, x: typing.SupportsInt, y: typing.SupportsInt) -> XPoint:
        ...
    def gdiPolyline(self, pointList: collections.abc.Sequence[XPoint]) -> int:
        ...
    def gdiRectangle(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> bool:
        ...
    def gdiRestoreGDIOBJ(self) -> None:
        ...
    def gdiSelectClipRgn(self, hRgn: typing.SupportsInt) -> int:
        ...
    def gdiSetBkMode(self, mode: bool) -> int:
        ...
    def gdiSetPixel(self, x: typing.SupportsInt, y: typing.SupportsInt, color: typing.SupportsInt) -> int:
        ...
    def getD2dRenderTarget(self) -> int:
        ...
    def getFont(self) -> XFont:
        ...
    def getHDC(self) -> int:
        ...
    def getOffset(self) -> XPoint:
        ...
    def gradientFill2(self, rect: XRect, color1: typing.SupportsInt, color2: typing.SupportsInt, mode: typing.SupportsInt) -> None:
        ...
    def gradientFill2F(self, rect: XRectF, color1: typing.SupportsInt, color2: typing.SupportsInt, mode: typing.SupportsInt) -> None:
        ...
    def gradientFill4(self, rect: XRect, color1: typing.SupportsInt, color2: typing.SupportsInt, color3: typing.SupportsInt, color4: typing.SupportsInt, mode: typing.SupportsInt) -> None:
        ...
    def gradientFill4F(self, rect: XRectF, color1: typing.SupportsInt, color2: typing.SupportsInt, color3: typing.SupportsInt, color4: typing.SupportsInt, mode: typing.SupportsInt) -> None:
        ...
    def image(self, image: XImage, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def imageAdaptive(self, image: XImage, rect: XRect, onlyBorder: bool = False) -> None:
        ...
    def imageAdaptiveF(self, image: XImage, rect: XRectF, onlyBorder: bool = False) -> None:
        ...
    def imageEx(self, image: XImage, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def imageExF(self, image: XImage, x: typing.SupportsFloat, y: typing.SupportsFloat, width: typing.SupportsFloat, height: typing.SupportsFloat) -> None:
        ...
    def imageF(self, imageF: XImage, x: typing.SupportsFloat, y: typing.SupportsFloat) -> None:
        ...
    def imageMask(self, image: XImage, imageMask: XImage, rect: XRect, x2: typing.SupportsInt, y2: typing.SupportsInt) -> None:
        ...
    def imageMaskEllipse(self, image: XImage, rect: XRect, rectMask: XRect) -> None:
        ...
    def imageMaskRect(self, image: XImage, rect: XRect, rectMask: XRect, rectRoundAngle: XRect) -> None:
        ...
    def imageSuper(self, image: XImage, rect: XRect, clip: bool = False) -> None:
        ...
    def imageSuperEx(self, image: XImage, rectDest: XRect, rectSrc: XRect) -> None:
        ...
    def imageSuperExF(self, image: XImage, rectDest: XRectF, rectSrc: XRectF) -> None:
        ...
    def imageSuperF(self, image: XImage, rect: XRectF, clip: bool = False) -> None:
        ...
    def imageSuperMask(self, image: XImage, imageMask: XImage, rect: XRect, rectMask: XRect, clip: bool) -> None:
        ...
    def imageTile(self, image: XImage, rect: XRect, flag: typing.SupportsInt = 0) -> None:
        ...
    def imageTileF(self, image: XImage, rect: XRectF, flag: typing.SupportsInt = 0) -> None:
        ...
    def isValid(self) -> bool:
        ...
    def setBrushColor(self, color: typing.SupportsInt) -> None:
        ...
    def setClipRect(self, rect: XRect) -> None:
        ...
    def setD2dTextRenderingMode(self, mode: XC_DWRITE_RENDERING_MODE) -> None:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setLineWidth(self, width: typing.SupportsInt) -> None:
        ...
    def setLineWidthF(self, width: typing.SupportsFloat) -> None:
        ...
    def setOffset(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setTextAlign(self, flag: typing.SupportsInt) -> None:
        ...
    def setTextRenderingHint(self, nType: typing.SupportsInt) -> None:
        ...
    def setTextVertical(self, vertical: bool) -> None:
        ...
    def textOut(self, xStart: typing.SupportsInt, yStart: typing.SupportsInt, text: str) -> None:
        ...
    def textOutEx(self, xStart: typing.SupportsInt, yStart: typing.SupportsInt, text: str) -> None:
        ...
    def textOutExF(self, xStart: typing.SupportsFloat, yStart: typing.SupportsFloat, text: str) -> None:
        ...
    def textOutF(self, xStart: typing.SupportsFloat, yStart: typing.SupportsFloat, text: str) -> None:
        ...
class XEase:
    @staticmethod
    def back(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def bounce(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def circ(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def cubic(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def elastic(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def ex(pos: typing.SupportsFloat, flag: typing.SupportsInt) -> float:
        ...
    @staticmethod
    def expo(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def linear(pos: typing.SupportsFloat) -> float:
        ...
    @staticmethod
    def quad(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def quart(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def quint(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
    @staticmethod
    def sine(pos: typing.SupportsFloat, flag: ease_type_) -> float:
        ...
class XEdit(XScrollView):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XEdit:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addByStyle(self, style: typing.SupportsInt) -> None:
        ...
    def addChatBegin(self, avatar: XImage, bubble: XImage, flag: typing.SupportsInt) -> None:
        ...
    def addChatEnd(self) -> None:
        ...
    def addData(self, data: edit_data_copy_, styleTableList: collections.abc.Sequence[typing.SupportsInt]) -> None:
        ...
    def addObject(self, obj: XObject) -> int:
        ...
    def addStyle(self, obj: XObject, color: typing.SupportsInt, enableColor: bool) -> int:
        ...
    def addStyleEx(self, fontName: str, fontSize: typing.SupportsInt, fontStyle: typing.SupportsInt, color: typing.SupportsInt, enableColor: bool) -> int:
        ...
    def addText(self, text: str) -> None:
        ...
    def addTextEx(self, text: str, style: typing.SupportsInt) -> None:
        ...
    def addTextUser(self, text: str) -> None:
        ...
    def autoScroll(self) -> bool:
        ...
    def autoScrollEx(self, row: typing.SupportsInt, column: typing.SupportsInt) -> bool:
        ...
    def cancelSelect(self) -> bool:
        ...
    def clipboardCopy(self) -> bool:
        ...
    def clipboardCut(self) -> bool:
        ...
    def clipboardPaste(self) -> bool:
        ...
    def delete(self, startRow: typing.SupportsInt, startCol: typing.SupportsInt, endRow: typing.SupportsInt, endCol: typing.SupportsInt) -> bool:
        ...
    def deleteRow(self, row: typing.SupportsInt) -> bool:
        ...
    def deleteSelect(self) -> bool:
        ...
    def enableAutoCancelSel(self, enable: bool) -> None:
        ...
    def enableAutoSelAll(self, enable: bool) -> None:
        ...
    def enableAutoWrap(self, enable: bool) -> None:
        ...
    def enableMultiLine(self, enable: bool) -> None:
        ...
    def enablePassword(self, enable: bool) -> None:
        ...
    def enableReadOnly(self, enable: bool) -> None:
        ...
    def freeData(self, data: edit_data_copy_) -> None:
        ...
    def getChatFlags(self) -> int:
        ...
    def getCurCol(self) -> int:
        ...
    def getCurPos(self) -> int:
        ...
    def getCurPosEx(self) -> position_:
        ...
    def getCurRow(self) -> int:
        ...
    def getData(self) -> edit_data_copy_:
        ...
    def getLength(self) -> int:
        ...
    def getLengthRow(self, row: typing.SupportsInt) -> int:
        ...
    def getPoint(self, row: typing.SupportsInt, column: typing.SupportsInt) -> XPoint:
        ...
    def getRowCount(self) -> int:
        ...
    def getSelectRange(self) -> list[position_]:
        ...
    def getSelectText(self, maxSize: typing.SupportsInt = -1) -> str:
        ...
    def getSelectTextLength(self) -> int:
        ...
    def getStyleInfo(self, style: typing.SupportsInt) -> edit_style_info_:
        ...
    def getText(self, maxSize: typing.SupportsInt = -1) -> str:
        ...
    def getTextRow(self, row: typing.SupportsInt, maxSize: typing.SupportsInt = -1) -> str:
        ...
    def getTextTemp(self) -> str:
        ...
    def getVisibleRowRange(self) -> list[int]:
        ...
    def insertChatBegin(self, avatarImage: XImage, bubbleImage: XImage, flag: typing.SupportsInt) -> None:
        ...
    def insertObject(self, obj: XObject, row: typing.SupportsInt, column: typing.SupportsInt) -> None:
        ...
    def insertText(self, row: typing.SupportsInt, column: typing.SupportsInt, text: str) -> None:
        ...
    def insertTextEx(self, row: typing.SupportsInt, column: typing.SupportsInt, text: str, style: typing.SupportsInt) -> None:
        ...
    def isAutoWrap(self) -> bool:
        ...
    def isEmpty(self) -> bool:
        ...
    def isInSelect(self, row: typing.SupportsInt, column: typing.SupportsInt) -> bool:
        ...
    def isMultiLine(self) -> bool:
        ...
    def isPassword(self) -> bool:
        ...
    def isReadOnly(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def modifyStyle(self, style: typing.SupportsInt, font: XFont, color: typing.SupportsInt, enableColor: bool) -> bool:
        ...
    def moveEnd(self) -> None:
        ...
    def posToRowCol(self, pos: typing.SupportsInt) -> position_:
        ...
    def redo(self) -> bool:
        ...
    def releaseStyle(self, style: typing.SupportsInt) -> bool:
        ...
    def rowColToPos(self, row: typing.SupportsInt, column: typing.SupportsInt) -> int:
        ...
    def selectAll(self) -> bool:
        ...
    def setBackFont(self, font: XFont) -> None:
        ...
    def setCaretColor(self, color: typing.SupportsInt) -> None:
        ...
    def setCaretWidth(self, width: typing.SupportsInt) -> None:
        ...
    def setCharSpaceSize(self, size: typing.SupportsInt, sizeZh: typing.SupportsInt) -> None:
        ...
    def setChatIndentation(self, indentation: typing.SupportsInt) -> None:
        ...
    def setChatMaxWidth(self, width: typing.SupportsInt) -> None:
        ...
    def setCurPos(self, pos: typing.SupportsInt) -> bool:
        ...
    def setCurPosEx(self, row: typing.SupportsInt, column: typing.SupportsInt) -> None:
        ...
    def setCurStyle(self, style: typing.SupportsInt) -> None:
        ...
    def setDefaultText(self, text: str) -> None:
        ...
    def setDefaultTextColor(self, color: typing.SupportsInt) -> None:
        ...
    def setPasswordCharacter(self, ch: str) -> None:
        ...
    def setRowHeight(self, row: typing.SupportsInt) -> None:
        ...
    def setRowHeightEx(self, row: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setRowSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setSelect(self, startRow: typing.SupportsInt, startCol: typing.SupportsInt, endRow: typing.SupportsInt, endCol: typing.SupportsInt) -> bool:
        ...
    def setSelectBkColor(self, color: typing.SupportsInt) -> None:
        ...
    def setSelectTextStyle(self, style: typing.SupportsInt) -> None:
        ...
    def setSpaceSize(self, size: typing.SupportsInt) -> None:
        ...
    def setTabSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setText(self, text: str) -> None:
        ...
    def setTextAlign(self, align: typing.SupportsInt) -> None:
        ...
    def setTextInt(self, value: typing.SupportsInt) -> None:
        ...
    def undo(self) -> bool:
        ...
class XElement(XWidget):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XElement:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addBkBorder(self, state: typing.SupportsInt, hColor: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def addBkFill(self, state: typing.SupportsInt, hColor: typing.SupportsInt) -> None:
        ...
    def addBkImage(self, state: typing.SupportsInt, image: XImage) -> None:
        ...
    def addChild(self, child: XWidget) -> None:
        ...
    def adjustLayout(self, adjustNo: typing.SupportsInt = 0) -> None:
        ...
    def adjustLayoutEx(self, flags: typing.SupportsInt, adjustNo: typing.SupportsInt = 0) -> None:
        ...
    def clearBkInfo(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def drawEle(self, draw: XDraw) -> None:
        ...
    def drawFocus(self, draw: XDraw, rect: XRect) -> None:
        ...
    def enable(self, enable: bool) -> None:
        ...
    def enableBkTransparent(self, enable: bool) -> None:
        ...
    def enableCanvas(self, enable: bool) -> None:
        ...
    def enableDrawBorder(self, enable: bool) -> None:
        ...
    def enableDrawFocus(self, enable: bool) -> None:
        ...
    def enableEvent_XE_MOUSEWHEEL(self, enable: bool) -> None:
        ...
    def enableEvent_XE_PAINT_END(self, enable: bool) -> None:
        ...
    def enableFocus(self, enable: bool) -> None:
        ...
    def enableKeyTab(self, enable: bool) -> None:
        ...
    def enableMouseThrough(self, enable: bool) -> None:
        ...
    def enableSwitchFocus(self, enable: bool) -> None:
        ...
    def enableTopmost(self, enable: bool) -> bool:
        ...
    def enableTransparentChannel(self, enable: bool) -> None:
        ...
    def getAlpha(self) -> int:
        ...
    def getBkInfoCount(self) -> int:
        ...
    def getBkManager(self) -> XBkManager:
        ...
    def getBkManagerEx(self) -> XBkManager:
        ...
    def getBorderSize(self) -> XRect:
        ...
    def getChildByID(self, nId: typing.SupportsInt) -> XObject:
        ...
    def getChildByIndex(self, index: typing.SupportsInt) -> XObject:
        ...
    def getChildCount(self) -> int:
        ...
    def getClientRect(self) -> XRect:
        ...
    def getContentSize(self, horizon: bool, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XSize:
        ...
    def getCursor(self) -> int:
        ...
    def getFocusBorderColor(self) -> int:
        ...
    def getFont(self) -> XFont:
        ...
    def getFontEx(self) -> XFont:
        ...
    def getHeight(self) -> int:
        ...
    def getPadding(self) -> XRect:
        ...
    def getPositon(self) -> XPoint:
        ...
    def getRect(self) -> XRect:
        ...
    def getRectLogic(self) -> XRect:
        ...
    def getSize(self) -> XSize:
        ...
    def getStateFlags(self) -> int:
        ...
    def getTextColor(self) -> int:
        ...
    def getTextColorEx(self) -> int:
        ...
    def getToolTip(self) -> str:
        ...
    def getUserData(self) -> typing.Any:
        ...
    def getWidth(self) -> int:
        ...
    def getWndClientRect(self) -> XRect:
        ...
    def getWndClientRectDPI(self) -> XRect:
        ...
    def getZOrder(self) -> int:
        ...
    def hitChildEle(self, point: XPoint) -> XObject:
        ...
    def insertChild(self, child: XWidget, index: typing.SupportsInt) -> None:
        ...
    def isBkTransparent(self) -> bool:
        ...
    def isChildEle(self, child: XWidget) -> bool:
        ...
    def isDrawFocus(self) -> bool:
        ...
    def isEnable(self) -> bool:
        ...
    def isEnableCanvas(self) -> bool:
        ...
    def isEnableEvent_XE_PAINT_END(self) -> bool:
        ...
    def isEnableFocus(self) -> bool:
        ...
    def isEnable_XE_MOUSEWHEEL(self) -> bool:
        ...
    def isFocus(self) -> bool:
        ...
    def isFocusEx(self) -> bool:
        ...
    def isKeyTab(self) -> bool:
        ...
    def isMouseThrough(self) -> bool:
        ...
    def isSwitchFocus(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def killXCTimer(self, eventId: typing.SupportsInt) -> bool:
        ...
    def pointClientToScreen(self, position_flag: position_flag_ = position_flag_.position_flag_.position_flag_leftBottom, xOffset: typing.SupportsInt = 0, yOffset: typing.SupportsInt = 0) -> XPoint:
        ...
    def pointClientToWndClient(self, point: XPoint) -> XPoint:
        ...
    def pointClientToWndClientDPI(self, point: XPoint) -> XPoint:
        ...
    def pointWndClientToEleClient(self, point: XPoint) -> XPoint:
        ...
    def popupToolTip(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def postEvent(self, eventType: typing.SupportsInt, wParam: typing.SupportsInt, lParam: typing.SupportsInt) -> int:
        ...
    def rectClientToWndClient(self, rect: XRect) -> XRect:
        ...
    def rectClientToWndClientDPI(self, rect: XRect) -> XRect:
        ...
    def rectWndClientToEleClient(self, rect: XRect) -> XRect:
        ...
    def redraw(self, immediate: bool = False) -> None:
        ...
    def redrawRect(self, rect: XRect, immediate: bool = False) -> None:
        ...
    def regEvent(self, eventType: typing.SupportsInt, callback: collections.abc.Callable[[XEvent, typing.Any], bool], userdata: typing.Any = None) -> None:
        ...
    def remove(self) -> None:
        ...
    def sendEvent(self, eventType: typing.SupportsInt, wParam: typing.SupportsInt, lParam: typing.SupportsInt) -> int:
        ...
    def setAlpha(self, alpha: typing.SupportsInt) -> None:
        ...
    def setBkInfo(self, text: str) -> int:
        ...
    def setBkManager(self, bkm: XBkManager) -> None:
        ...
    def setBorderSize(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setCapture(self, enable: bool) -> None:
        ...
    def setCursor(self, hCursor: typing.SupportsInt) -> None:
        ...
    def setDragBorder(self, flags: typing.SupportsInt) -> None:
        ...
    def setDragBorderBindEle(self, flags: typing.SupportsInt, element: XWidget, space: typing.SupportsInt) -> None:
        ...
    def setFocusBorderColor(self, hColor: typing.SupportsInt) -> None:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setHeight(self, size: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setMaxSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setMaxSize(self, horizon: bool, vertical: bool) -> None:
        ...
    def setMinSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setPadding(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setPosition(self, x: typing.SupportsInt, y: typing.SupportsInt, redraw: bool = False, flags: typing.SupportsInt = adjustLayout_.adjustLayout_.adjustLayout_all, adjust_no: typing.SupportsInt = 0) -> int:
        ...
    def setPositionLogic(self, x: typing.SupportsInt, y: typing.SupportsInt, redraw: bool = False, flags: typing.SupportsInt = adjustLayout_.adjustLayout_.adjustLayout_all, adjust_no: typing.SupportsInt = 0) -> int:
        ...
    def setRect(self, rect: XRect, redraw: bool = False, flags: typing.SupportsInt = adjustLayout_.adjustLayout_.adjustLayout_all, adjust_no: typing.SupportsInt = 0) -> int:
        ...
    def setRectEx(self, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt, redraw: bool = False, flags: typing.SupportsInt = adjustLayout_.adjustLayout_.adjustLayout_all, adjust_no: typing.SupportsInt = 0) -> int:
        ...
    def setRectLogic(self, rect: XRect, redraw: bool = False, flags: typing.SupportsInt = adjustLayout_.adjustLayout_.adjustLayout_all, adjust_no: typing.SupportsInt = 0) -> int:
        ...
    def setSize(self, width: typing.SupportsInt, height: typing.SupportsInt, redraw: bool = False, flags: typing.SupportsInt = adjustLayout_.adjustLayout_.adjustLayout_all, adjust_no: typing.SupportsInt = 0) -> int:
        ...
    def setTextColor(self, hColor: typing.SupportsInt) -> None:
        ...
    def setToolTip(self, text: str) -> None:
        ...
    def setToolTipEx(self, text: str, textAlign: typing.SupportsInt) -> None:
        ...
    def setUserData(self, userdata: typing.Any) -> None:
        ...
    def setWidth(self, size: typing.SupportsInt) -> None:
        ...
    def setXCTimer(self, eventId: typing.SupportsInt, elapse: typing.SupportsInt) -> bool:
        ...
    def setZOrder(self, index: typing.SupportsInt) -> bool:
        ...
    def setZOrderEx(self, destEle: XWidget, index: zorder_) -> None:
        ...
class XEvent:
    @property
    def eventType(self) -> int:
        ...
    @property
    def lParam(self) -> int:
        ...
    @property
    def mouse(self) -> XPoint:
        ...
    @property
    def sender(self) -> XObject:
        ...
    @property
    def wParam(self) -> int:
        ...
class XFont(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromFile(fontFile: str, size: typing.SupportsInt, style: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromGdiFont(pGdiFont: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromMem(data: bytes, size: typing.SupportsInt, style: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromName(name: str, size: typing.SupportsInt, style: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromRes(resId: typing.SupportsInt, typeName: str, size: typing.SupportsInt, style: typing.SupportsInt, hModule: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromZip(zipFileName: str, fileName: str, password: str, fontSize: typing.SupportsInt, style: typing.SupportsInt) -> XFont:
        ...
    @staticmethod
    def createFromZipMem(data: bytes, fileName: str, password: str, fontSize: typing.SupportsInt, style: typing.SupportsInt) -> XFont:
        ...
    def __init__(self, size: typing.SupportsInt) -> None:
        ...
    def addRef(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def enableAutoDestroy(self, enable: bool) -> None:
        ...
    def getFontInfo(self) -> XFontInfo:
        ...
    def getGdiFont(self) -> int:
        ...
    def getRefCount(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def release(self) -> None:
        ...
class XFontInfo:
    name: str
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, name: str, size: typing.SupportsInt, style: typing.SupportsInt) -> None:
        ...
    @property
    def size(self) -> int:
        ...
    @size.setter
    def size(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def style(self) -> int:
        ...
    @style.setter
    def style(self, arg0: typing.SupportsInt) -> None:
        ...
class XFrameWindow(XWindow):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XFrameWindow:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, title: str) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, title: str, hwndParent: typing.SupportsInt, xcStyle: typing.SupportsInt = 2031) -> None:
        ...
    @typing.overload
    def __init__(self, exStyle: typing.SupportsInt, style: typing.SupportsInt, className: str, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, title: str, hwndParent: typing.SupportsInt, xcStyle: typing.SupportsInt = 2031) -> None:
        ...
    def addPane(self, panelDest: XElement, paneNew: XElement, align: pane_align_) -> bool:
        ...
    def attach(self, hwnd: typing.SupportsInt, style: typing.SupportsInt) -> bool:
        ...
    def getDragFloatWndTopFlag(self) -> frameWnd_cell_type_:
        ...
    def getLayoutAreaRect(self) -> XRect:
        ...
    def getPaneSplitBarWidth(self) -> int:
        ...
    def getViewRect(self) -> XRect:
        ...
    def isValid(self) -> bool:
        ...
    def loadLayoutFile(self, panelList: collections.abc.Sequence[XElement], filename: str) -> bool:
        ...
    def mergePane(self, panelDest: XElement, paneNew: XElement) -> bool:
        ...
    def saveLayoutToFile(self, filename: str) -> bool:
        ...
    def setPaneSplitBarColor(self, color: typing.SupportsInt) -> None:
        ...
    def setPaneSplitBarWidth(self, width: typing.SupportsInt) -> None:
        ...
    def setTabBarHeight(self, height: typing.SupportsInt) -> None:
        ...
    def setView(self, ele: XElement) -> None:
        ...
class XImage(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadFile(filename: str) -> XImage:
        ...
    @staticmethod
    def loadFileAdaptive(fileName: str, leftSize: typing.SupportsInt, topSize: typing.SupportsInt, rightSize: typing.SupportsInt, bottomSize: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadFileRect(fileName: str, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadFromExtractIcon(fileName: str) -> XImage:
        ...
    @staticmethod
    def loadFromHBITMAP(hBitmap: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadFromHICON(hIcon: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadFromImage(gdiImageHandle: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadMemory(data: bytes) -> XImage:
        ...
    @staticmethod
    def loadMemoryAdaptive(data: bytes, leftSize: typing.SupportsInt, topSize: typing.SupportsInt, rightSize: typing.SupportsInt, bottomSize: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadMemoryRect(data: bytes, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadRes(resId: typing.SupportsInt, typeName: str, hModule: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadSrc(imageSrc: XImageSrc) -> XImage:
        ...
    @staticmethod
    def loadSvg(svg: XSvg) -> XImage:
        ...
    @staticmethod
    def loadSvgFile(fileName: str) -> XImage:
        ...
    @staticmethod
    def loadSvgString(data: str) -> XImage:
        ...
    @staticmethod
    def loadZip(zipFileName: str, fileName: str, password: str) -> XImage:
        ...
    @staticmethod
    def loadZipAdaptive(zipFileName: str, fileName: str, password: str, x1: typing.SupportsInt, x2: typing.SupportsInt, y1: typing.SupportsInt, y2: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadZipMem(data: bytes, fileName: str, password: str) -> XImage:
        ...
    @staticmethod
    def loadZipRect(zipFileName: str, fileName: str, password: str, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XImage:
        ...
    @staticmethod
    def loadZipRes(id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> XImage:
        ...
    def addRef(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def enableAutoDestroy(self, enable: bool) -> None:
        ...
    def enableCenter(self, enable: bool) -> None:
        ...
    def enableTranColor(self, enable: bool) -> None:
        ...
    def getHeight(self) -> int:
        ...
    def getImageSrc(self) -> XImageSrc:
        ...
    def getRefCount(self) -> int:
        ...
    def getSvg(self) -> XSvg:
        ...
    def getWidth(self) -> int:
        ...
    def isCenter(self) -> bool:
        ...
    def isStretch(self) -> bool:
        ...
    def isTile(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def release(self) -> None:
        ...
    def setDrawType(self, drawType: image_draw_type_) -> bool:
        ...
    def setDrawTypeAdaptive(self, leftSize: typing.SupportsInt, topSize: typing.SupportsInt, rightSize: typing.SupportsInt, bottomSize: typing.SupportsInt) -> bool:
        ...
    def setRotateAngle(self, angle: typing.SupportsFloat) -> float:
        ...
    def setScaleSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setSplitEqual(self, count: typing.SupportsInt, index: typing.SupportsInt) -> None:
        ...
    def setTranColor(self, color: typing.SupportsInt) -> None:
        ...
    def setTranColorEx(self, color: typing.SupportsInt, alpha: typing.SupportsInt) -> None:
        ...
class XImageSrc(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadFile(filename: str) -> XImageSrc:
        ...
    @staticmethod
    def loadFileRect(fileName: str, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadFromExtractIcon(fileName: str) -> XImageSrc:
        ...
    @staticmethod
    def loadFromHBITMAP(hBitmap: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadFromHICON(hIcon: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadFromImage(gdiImageHandle: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadMemory(data: bytes) -> XImageSrc:
        ...
    @staticmethod
    def loadMemoryRect(data: bytes, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadRes(resId: typing.SupportsInt, typeName: str, hModule: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadZip(zipFileName: str, fileName: str, password: str) -> XImageSrc:
        ...
    @staticmethod
    def loadZipMem(data: bytes, fileName: str, password: str) -> XImageSrc:
        ...
    @staticmethod
    def loadZipRect(zipFileName: str, fileName: str, password: str, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt) -> XImageSrc:
        ...
    @staticmethod
    def loadZipRes(id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> XImageSrc:
        ...
    def addRef(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def enableAutoDestroy(self, enable: bool) -> None:
        ...
    def getFile(self) -> str:
        ...
    def getHeight(self) -> int:
        ...
    def getRefCount(self) -> int:
        ...
    def getWidth(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def release(self) -> None:
        ...
class XItemHeightInfo:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    @property
    def height(self) -> int:
        ...
    @height.setter
    def height(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def selHeight(self) -> int:
        ...
    @selHeight.setter
    def selHeight(self, arg0: typing.SupportsInt) -> None:
        ...
class XLayoutBox(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XLayoutBox:
        ...
    def enableAutoWrap(self, enable: bool) -> None:
        ...
    def enableHorizon(self, enable: bool) -> None:
        ...
    def enableOverflowHide(self, enable: bool) -> None:
        ...
    def isValid(self) -> bool:
        ...
    def setAlignBaseline(self, align: layout_align_axis_) -> None:
        ...
    def setAlignH(self, align: layout_align_) -> None:
        ...
    def setAlignV(self, align: layout_align_) -> None:
        ...
    def setSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setSpaceRow(self, space: typing.SupportsInt) -> None:
        ...
class XLayoutEle(XElement, XLayoutBox):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XLayoutEle:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, parent: XObjectUI = None) -> None:
        ...
    def enableLayout(self, enable: bool) -> None:
        ...
    def getHeightIn(self) -> int:
        ...
    def getWidthIn(self) -> int:
        ...
    def isEnableLayout(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def showLayoutFrame(self, enable: bool) -> None:
        ...
class XLayoutFrame(XScrollView, XLayoutBox):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XLayoutFrame:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, parent: XObjectUI = None) -> None:
        ...
    def enableLayout(self, enable: bool) -> None:
        ...
    def getHeightIn(self) -> int:
        ...
    def getWidthIn(self) -> int:
        ...
    def isEnableLayout(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def showLayoutFrame(self, enable: bool) -> None:
        ...
class XLayoutSize:
    sizeType: layout_size_
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, sizeType: layout_size_, size: typing.SupportsInt) -> None:
        ...
    @property
    def size(self) -> int:
        ...
    @size.setter
    def size(self, arg0: typing.SupportsInt) -> None:
        ...
class XList(XScrollView):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XList:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI, flags: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addColumn(self, width: typing.SupportsInt) -> int:
        ...
    def addColumnImage(self, width: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def addColumnText(self, width: typing.SupportsInt, name: str, text: str) -> int:
        ...
    def addItemImage(self, image: XImage) -> int:
        ...
    def addItemImageEx(self, name: str, image: XImage) -> int:
        ...
    def addItemText(self, text: str) -> int:
        ...
    def addItemTextEx(self, name: str, text: str) -> int:
        ...
    def addRowImage(self, image: XImage) -> int:
        ...
    def addRowImageEx(self, name: str, image: XImage) -> int:
        ...
    def addRowText(self, text: str) -> int:
        ...
    def addRowTextEx(self, name: str, text: str) -> int:
        ...
    def addSelectItem(self, row: typing.SupportsInt) -> bool:
        ...
    def addSelectRow(self, row: typing.SupportsInt) -> int:
        ...
    def bindAdapter(self, adapter: XAdapter) -> None:
        ...
    def bindAdapterHeader(self, adapter: XAdapter) -> None:
        ...
    def cancelSelectAll(self) -> None:
        ...
    def cancelSelectItem(self, row: typing.SupportsInt) -> bool:
        ...
    def cancelSelectRow(self, row: typing.SupportsInt) -> int:
        ...
    def createAdapter(self, colExtendCount: typing.SupportsInt) -> XObject:
        ...
    def createAdapterHeader(self) -> XObject:
        ...
    def deleteColumn(self, row: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def deleteColumnAll(self) -> None:
        ...
    @typing.overload
    def deleteColumnAll(self) -> None:
        ...
    def deleteItem(self, row: typing.SupportsInt) -> bool:
        ...
    def deleteItemAll(self) -> None:
        ...
    def deleteItemEx(self, row: typing.SupportsInt, count: typing.SupportsInt) -> bool:
        ...
    def deleteRow(self, row: typing.SupportsInt) -> int:
        ...
    def deleteRowAll(self) -> None:
        ...
    def deleteRowEx(self, row: typing.SupportsInt, count: typing.SupportsInt) -> int:
        ...
    def enableDragChangeColumnWidth(self, enable: bool) -> None:
        ...
    def enableFixedRowHeight(self, enable: bool) -> None:
        ...
    def enableItemBkFullRow(self, enable: bool) -> None:
        ...
    def enableMultiSel(self, enable: bool) -> None:
        ...
    def enableRowBkFull(self, full: bool) -> None:
        ...
    def enableTemplateReuse(self, enable: bool) -> None:
        ...
    def enableVScrollBarTop(self, enable: bool) -> None:
        ...
    @typing.overload
    def enableVirtualTable(self, enable: bool) -> None:
        ...
    @typing.overload
    def enableVirtualTable(self, enable: bool) -> None:
        ...
    def getAdapter(self) -> XObject:
        ...
    def getAdapterHeader(self) -> XObject:
        ...
    def getColumnCount(self) -> int:
        ...
    def getColumnWidth(self, column: typing.SupportsInt) -> int:
        ...
    def getCountColumn_AD(self) -> int:
        ...
    def getCount_AD(self) -> int:
        ...
    def getHeader(self) -> XObject:
        ...
    def getHeaderColumnIndexFromHXCGUI(self, hXCGUI: typing.SupportsInt) -> int:
        ...
    def getHeaderHeight(self) -> int:
        ...
    def getHeaderTemplateObject(self, column: typing.SupportsInt, templateId: typing.SupportsInt) -> XTemplate:
        ...
    def getItemData(self, row: typing.SupportsInt, column: typing.SupportsInt) -> None:
        ...
    def getItemFloat(self, row: typing.SupportsInt, column: typing.SupportsInt) -> float:
        ...
    def getItemFloatEx(self, row: typing.SupportsInt, name: str) -> float:
        ...
    def getItemHeight(self, row: typing.SupportsInt) -> XItemHeightInfo:
        ...
    def getItemHeightDefault(self) -> XItemHeightInfo:
        ...
    def getItemImage(self, row: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def getItemImageEx(self, row: typing.SupportsInt, name: str) -> XImage:
        ...
    @typing.overload
    def getItemIndexFromUIObject(self, ele: XWidget) -> int:
        ...
    @typing.overload
    def getItemIndexFromUIObject(self, ele: XWidget) -> int:
        ...
    def getItemInt(self, row: typing.SupportsInt, column: typing.SupportsInt) -> int:
        ...
    def getItemIntEx(self, row: typing.SupportsInt, name: str) -> int:
        ...
    def getItemTemplate(self) -> XTemplate:
        ...
    def getItemTemplateHeader(self) -> XTemplate:
        ...
    def getItemText(self, row: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def getItemTextEx(self, row: typing.SupportsInt, name: str) -> str:
        ...
    def getRowHeight(self, row: typing.SupportsInt) -> tuple:
        ...
    def getRowHeightDefault(self) -> tuple:
        ...
    def getRowIndexFromHXCGUI(self, hXCGUI: typing.SupportsInt) -> int:
        ...
    def getSelectAll(self) -> list[int]:
        ...
    def getSelectItem(self) -> int:
        ...
    def getSelectItemCount(self) -> int:
        ...
    def getSelectRow(self) -> int:
        ...
    def getSelectRowCount(self) -> int:
        ...
    def getTemplateObject(self, row: typing.SupportsInt, column: typing.SupportsInt, templateId: typing.SupportsInt) -> XTemplate:
        ...
    def getVisibleRowRange(self) -> XRange:
        ...
    def hitTest(self, point: XPoint) -> position_:
        ...
    def hitTestOffset(self, point: XPoint) -> position_:
        ...
    def insertColumn(self, width: typing.SupportsInt, row: typing.SupportsInt) -> int:
        ...
    def insertItemImage(self, row: typing.SupportsInt, image: XImage) -> int:
        ...
    def insertItemImageEx(self, row: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def insertItemText(self, row: typing.SupportsInt, text: str) -> int:
        ...
    def insertItemTextEx(self, row: typing.SupportsInt, name: str, text: str) -> int:
        ...
    def insertRowImage(self, row: typing.SupportsInt, image: XImage) -> int:
        ...
    def insertRowImageEx(self, row: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def insertRowText(self, row: typing.SupportsInt, value: str) -> int:
        ...
    def insertRowTextEx(self, row: typing.SupportsInt, name: str, value: str) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def refreshData(self) -> None:
        ...
    def refreshDataHeader(self) -> None:
        ...
    def refreshItem(self, row: typing.SupportsInt) -> None:
        ...
    def refreshRow(self, row: typing.SupportsInt) -> None:
        ...
    def setColumnMinWidth(self, row: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setColumnWidth(self, row: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setColumnWidthFixed(self, column: typing.SupportsInt, fixed: bool) -> None:
        ...
    def setDragRectColor(self, color: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setDrawItemBkFlags(self, flags: typing.SupportsInt) -> None:
        ...
    def setDrawRowBkFlags(self, style: typing.SupportsInt) -> None:
        ...
    def setHeaderHeight(self, height: typing.SupportsInt) -> None:
        ...
    def setItemData(self, row: typing.SupportsInt, column: typing.SupportsInt, userdata: typing.Any) -> None:
        ...
    def setItemFloat(self, row: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsFloat) -> bool:
        ...
    def setItemFloatEx(self, row: typing.SupportsInt, name: str, value: typing.SupportsFloat) -> bool:
        ...
    def setItemHeight(self, row: typing.SupportsInt, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setItemHeightDefault(self, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setItemImage(self, row: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def setItemImageEx(self, row: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def setItemInt(self, row: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsInt) -> bool:
        ...
    def setItemIntEx(self, row: typing.SupportsInt, name: str, value: typing.SupportsInt) -> bool:
        ...
    def setItemTemplate(self, template: XTemplate) -> bool:
        ...
    def setItemTemplateFromMem(self, xmlData: bytes) -> bool:
        ...
    def setItemTemplateXML(self, xmlFile: str) -> bool:
        ...
    def setItemTemplateXMLFromMem(self, xmlData: str) -> int:
        ...
    def setItemTemplateXMLFromZipRes(self, id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    def setItemText(self, row: typing.SupportsInt, column: typing.SupportsInt, text: str) -> bool:
        ...
    def setItemTextEx(self, row: typing.SupportsInt, name: str, text: str) -> bool:
        ...
    def setLockColumnLeft(self, column: typing.SupportsInt) -> None:
        ...
    def setLockColumnRight(self, column: typing.SupportsInt) -> None:
        ...
    def setLockRowBottom(self, enable: bool) -> None:
        ...
    def setLockRowBottomOverlap(self, enable: bool) -> None:
        ...
    def setRowHeight(self, row: typing.SupportsInt, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setRowHeightDefault(self, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setSelectAll(self) -> None:
        ...
    def setSelectItem(self, row: typing.SupportsInt) -> bool:
        ...
    def setSelectRow(self, row: typing.SupportsInt) -> int:
        ...
    def setSort(self, column: typing.SupportsInt, columnAdapter: typing.SupportsInt, enable: bool) -> None:
        ...
    def setSplitLineColor(self, color: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setVirtualRowCount(self, rowCount: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setVirtualRowCount(self, rowCount: typing.SupportsInt) -> None:
        ...
    def visibleItem(self, row: typing.SupportsInt) -> None:
        ...
    def visibleRow(self, row: typing.SupportsInt) -> None:
        ...
class XListBox(XScrollView):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XListBox:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI, flags: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addItemImage(self, image: XImage) -> int:
        ...
    def addItemImageEx(self, name: str, image: XImage) -> int:
        ...
    def addItemText(self, text: str) -> int:
        ...
    def addItemTextEx(self, name: str, text: str) -> int:
        ...
    def addSelectItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def bindAdapter(self, adapter: XAdapter) -> None:
        ...
    def cancelSelectAll(self) -> bool:
        ...
    def cancelSelectItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def createAdapter(self) -> XObject:
        ...
    def deleteColumnAll(self) -> None:
        ...
    def deleteItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def deleteItemAll(self) -> None:
        ...
    def deleteItemEx(self, itemId: typing.SupportsInt, count: typing.SupportsInt) -> bool:
        ...
    def enableFixedRowHeight(self, enable: bool) -> None:
        ...
    def enableMultiSel(self, enable: bool) -> None:
        ...
    def enableTemplateReuse(self, enable: bool) -> None:
        ...
    @typing.overload
    def enableVirtualTable(self, enable: bool) -> None:
        ...
    @typing.overload
    def enableVirtualTable(self, enable: bool) -> None:
        ...
    def getAdapter(self) -> XObject:
        ...
    def getCountColumn_AD(self) -> int:
        ...
    def getCount_AD(self) -> int:
        ...
    def getItemData(self, itemId: typing.SupportsInt) -> None:
        ...
    def getItemFloat(self, itemId: typing.SupportsInt, column: typing.SupportsInt) -> float:
        ...
    def getItemFloatEx(self, itemId: typing.SupportsInt, name: str) -> float:
        ...
    def getItemHeightDefault(self) -> XItemHeightInfo:
        ...
    def getItemImage(self, itemId: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def getItemImageEx(self, itemId: typing.SupportsInt, name: str) -> XImage:
        ...
    def getItemIndexFromUIObject(self, ele: XWidget) -> int:
        ...
    def getItemInfo(self, itemId: typing.SupportsInt) -> listBox_item_info_:
        ...
    def getItemInt(self, itemId: typing.SupportsInt, column: typing.SupportsInt) -> int:
        ...
    def getItemIntEx(self, itemId: typing.SupportsInt, name: str) -> int:
        ...
    def getItemMouseStay(self) -> int:
        ...
    def getItemTemplate(self) -> XTemplate:
        ...
    def getItemText(self, itemId: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def getItemTextEx(self, itemId: typing.SupportsInt, name: str) -> str:
        ...
    def getRowSpace(self) -> int:
        ...
    def getSelectAll(self) -> list[int]:
        ...
    def getSelectCount(self) -> int:
        ...
    def getSelectItem(self) -> int:
        ...
    def getTemplateObject(self, itemId: typing.SupportsInt, templateId: typing.SupportsInt) -> XObject:
        ...
    def getVisibleRowRange(self) -> XRange:
        ...
    def hitTest(self, point: XPoint) -> int:
        ...
    def hitTestOffset(self, point: XPoint) -> int:
        ...
    def insertItemImage(self, itemId: typing.SupportsInt, image: XImage) -> int:
        ...
    def insertItemImageEx(self, itemId: typing.SupportsInt, name: str, image: XImage) -> int:
        ...
    def insertItemText(self, itemId: typing.SupportsInt, text: str) -> int:
        ...
    def insertItemTextEx(self, itemId: typing.SupportsInt, name: str, text: str) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def refreshData(self) -> None:
        ...
    def refreshItem(self, itemId: typing.SupportsInt) -> None:
        ...
    def selectAll(self) -> bool:
        ...
    def setDragRectColor(self, color: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setDrawItemBkFlags(self, flags: typing.SupportsInt) -> None:
        ...
    def setItemData(self, itemId: typing.SupportsInt, userdata: typing.Any) -> None:
        ...
    def setItemFloat(self, itemId: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsFloat) -> bool:
        ...
    def setItemFloatEx(self, itemId: typing.SupportsInt, name: str, value: typing.SupportsFloat) -> bool:
        ...
    def setItemHeightDefault(self, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setItemImage(self, itemId: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def setItemImageEx(self, itemId: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def setItemInfo(self, itemId: typing.SupportsInt, itemInfo: listBox_item_info_) -> None:
        ...
    def setItemInt(self, itemId: typing.SupportsInt, column: typing.SupportsInt, value: typing.SupportsInt) -> bool:
        ...
    def setItemIntEx(self, itemId: typing.SupportsInt, name: str, value: typing.SupportsInt) -> bool:
        ...
    def setItemTemplate(self, template: XTemplate) -> bool:
        ...
    def setItemTemplateFromMem(self, xmlData: bytes) -> bool:
        ...
    def setItemTemplateXML(self, xmlFile: str) -> bool:
        ...
    def setItemTemplateXMLFromMem(self, xmlData: str) -> int:
        ...
    def setItemTemplateXMLFromZipRes(self, id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    def setItemText(self, itemId: typing.SupportsInt, column: typing.SupportsInt, text: str) -> bool:
        ...
    def setItemTextEx(self, itemId: typing.SupportsInt, name: str, text: str) -> bool:
        ...
    def setRowSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setSelectItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def setSplitLineColor(self, color: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setVirtualRowCount(self, rowCount: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setVirtualRowCount(self, rowCount: typing.SupportsInt) -> None:
        ...
    def sort(self, columnAdapter: typing.SupportsInt, ascending: bool) -> None:
        ...
    def visibleItem(self, itemId: typing.SupportsInt) -> None:
        ...
class XListView(XScrollView):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XListView:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI, flags: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addSelectItem(self, group: typing.SupportsInt, item: typing.SupportsInt) -> bool:
        ...
    def bindAdapter(self, adapter: XAdapter) -> None:
        ...
    def cancelSelectAll(self) -> None:
        ...
    def createAdapter(self) -> XObject:
        ...
    def deleteAll(self) -> None:
        ...
    def deleteAllGroup(self) -> None:
        ...
    def deleteAllItem(self) -> None:
        ...
    def deleteColumnGroup(self, column: typing.SupportsInt) -> None:
        ...
    def deleteColumnItem(self, column: typing.SupportsInt) -> None:
        ...
    def enableMultiSel(self, enable: bool) -> None:
        ...
    def enableTemplateReuse(self, enable: bool) -> None:
        ...
    @typing.overload
    def enableVirtualTable(self, enable: bool) -> None:
        ...
    @typing.overload
    def enableVirtualTable(self, enable: bool) -> None:
        ...
    def expandGroup(self, group: typing.SupportsInt, expand: bool) -> bool:
        ...
    def getAdapter(self) -> XObject:
        ...
    def getGroupHeight(self) -> int:
        ...
    def getGroupUserData(self, group: typing.SupportsInt) -> None:
        ...
    def getItemIdFromUIObject(self, ele: XWidget) -> listView_item_id_:
        ...
    def getItemSize(self) -> XSize:
        ...
    def getItemTemplate(self) -> XTemplate:
        ...
    def getItemTemplateGroup(self) -> XTemplate:
        ...
    def getItemUserData(self, group: typing.SupportsInt, item: typing.SupportsInt) -> None:
        ...
    def getSelectAll(self) -> list[listView_item_id_]:
        ...
    def getSelectItem(self) -> listView_item_id_:
        ...
    def getSelectItemCount(self) -> int:
        ...
    def getTemplateObject(self, groupId: typing.SupportsInt, itemId: typing.SupportsInt, templateId: typing.SupportsInt) -> XObject:
        ...
    def getTemplateObjectGroup(self, groupId: typing.SupportsInt, itemId: typing.SupportsInt) -> XObject:
        ...
    def getVisibleItemRange(self) -> XListViewItemRangeInfo:
        ...
    def groupAddColumn(self, name: str) -> int:
        ...
    def groupAddItemImage(self, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupAddItemImageEx(self, name: str, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupAddItemText(self, text: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupAddItemTextEx(self, name: str, text: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def groupDeleteAllChildItem(self, group: typing.SupportsInt) -> None:
        ...
    def groupDeleteItem(self, group: typing.SupportsInt) -> bool:
        ...
    def groupGetCount(self) -> int:
        ...
    def groupGetImage(self, group: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def groupGetImageEx(self, group: typing.SupportsInt, name: str) -> XImage:
        ...
    def groupGetText(self, group: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def groupGetTextEx(self, group: typing.SupportsInt, name: str) -> str:
        ...
    def groupSetImage(self, group: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def groupSetImageEx(self, group: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def groupSetText(self, group: typing.SupportsInt, column: typing.SupportsInt, text: str) -> bool:
        ...
    def groupSetTextEx(self, group: typing.SupportsInt, name: str, text: str) -> bool:
        ...
    def hitTest(self, point: XPoint) -> listView_item_id_:
        ...
    def hitTestOffset(self, point: XPoint) -> listView_item_id_:
        ...
    def isValid(self) -> bool:
        ...
    def itemAddColumn(self, name: str) -> int:
        ...
    def itemAddItemImage(self, group: typing.SupportsInt, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemAddItemImageEx(self, group: typing.SupportsInt, name: str, image: XImage, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemAddItemText(self, group: typing.SupportsInt, text: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemAddItemTextEx(self, group: typing.SupportsInt, name: str, text: str, pos: typing.SupportsInt = -1) -> int:
        ...
    def itemDeleteItem(self, group: typing.SupportsInt, item: typing.SupportsInt) -> bool:
        ...
    def itemGetCount(self, group: typing.SupportsInt) -> int:
        ...
    def itemGetImage(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def itemGetImageEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str) -> XImage:
        ...
    def itemGetText(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def itemGetTextEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str) -> str:
        ...
    def itemSetImage(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def itemSetImageEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def itemSetText(self, group: typing.SupportsInt, item: typing.SupportsInt, column: typing.SupportsInt, text: str) -> bool:
        ...
    def itemSetTextEx(self, group: typing.SupportsInt, item: typing.SupportsInt, name: str, text: str) -> bool:
        ...
    def refreshData(self) -> None:
        ...
    def refreshItem(self, group: typing.SupportsInt, item: typing.SupportsInt) -> None:
        ...
    def setColumnSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setDragRectColor(self, color: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setDrawItemBkFlags(self, flags: typing.SupportsInt) -> None:
        ...
    def setGroupHeight(self, height: typing.SupportsInt) -> None:
        ...
    def setGroupUserData(self, group: typing.SupportsInt, userdata: typing.Any) -> None:
        ...
    def setItemSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setItemTemplate(self, template: XTemplate) -> bool:
        ...
    def setItemTemplateFromMem(self, xmlData: bytes) -> bool:
        ...
    def setItemTemplateXML(self, xmlFile: str) -> bool:
        ...
    def setItemTemplateXMLFromMem(self, xmlData: str) -> int:
        ...
    def setItemTemplateXMLFromZipRes(self, id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    def setItemUserData(self, group: typing.SupportsInt, item: typing.SupportsInt, userdata: typing.Any) -> None:
        ...
    def setRowSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setSelectItem(self, group: typing.SupportsInt, item: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def setVirtualItemCount(self, group: typing.SupportsInt, count: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def setVirtualItemCount(self, group: typing.SupportsInt, count: typing.SupportsInt) -> int:
        ...
    def visibleItem(self, group: typing.SupportsInt, item: typing.SupportsInt) -> None:
        ...
class XListViewItemRangeInfo:
    @property
    def endGroup(self) -> int:
        ...
    @endGroup.setter
    def endGroup(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def endItem(self) -> int:
        ...
    @endItem.setter
    def endItem(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def group1(self) -> int:
        ...
    @group1.setter
    def group1(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def group2(self) -> int:
        ...
    @group2.setter
    def group2(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def startGroup(self) -> int:
        ...
    @startGroup.setter
    def startGroup(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def startItem(self) -> int:
        ...
    @startItem.setter
    def startItem(self, arg0: typing.SupportsInt) -> None:
        ...
class XMenu(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XMenu:
        ...
    def __init__(self) -> None:
        ...
    def addItem(self, nId: typing.SupportsInt, text: str, parentId: typing.SupportsInt = 0, flags: typing.SupportsInt = 0) -> None:
        ...
    def addItemIcon(self, nId: typing.SupportsInt, text: str, parentId: typing.SupportsInt, image: XImage, flags: typing.SupportsInt = 0) -> None:
        ...
    def closeMenu(self) -> None:
        ...
    def destroyMenu(self) -> None:
        ...
    def enableDrawBackground(self, enable: bool) -> None:
        ...
    def getEndChildItem(self, nId: typing.SupportsInt) -> int:
        ...
    def getFirstChildItem(self, nId: typing.SupportsInt) -> int:
        ...
    def getItemHeight(self) -> int:
        ...
    def getItemText(self, nId: typing.SupportsInt) -> str:
        ...
    def getItemTextLength(self, nId: typing.SupportsInt) -> int:
        ...
    def getLeftSpaceText(self) -> int:
        ...
    def getLeftWidth(self) -> int:
        ...
    def getMenuBar(self) -> typing.Any:
        ...
    def getNextSiblingItem(self, nId: typing.SupportsInt) -> int:
        ...
    def getParentItem(self, nId: typing.SupportsInt) -> int:
        ...
    def getPrevSiblingItem(self, nId: typing.SupportsInt) -> int:
        ...
    def insertItem(self, nId: typing.SupportsInt, text: str, flags: typing.SupportsInt, insertId: typing.SupportsInt) -> None:
        ...
    def insertItemIcon(self, nId: typing.SupportsInt, text: str, image: XImage, flags: typing.SupportsInt, insertId: typing.SupportsInt) -> None:
        ...
    def isItemCheck(self, nId: typing.SupportsInt) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def popup(self, parentHWND: typing.SupportsInt, x: typing.SupportsInt, y: typing.SupportsInt, parentEle: XElement = None, position: menu_popup_position_ = menu_popup_position_.menu_popup_position_.menu_popup_position_left_top) -> bool:
        ...
    def setAutoDestroy(self, enable: bool) -> None:
        ...
    def setBkImage(self, image: XImage) -> None:
        ...
    def setBorderColor(self, color: typing.SupportsInt) -> None:
        ...
    def setBorderSize(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setItemCheck(self, nId: typing.SupportsInt, check: bool) -> bool:
        ...
    def setItemFlags(self, nId: typing.SupportsInt, flags: typing.SupportsInt) -> bool:
        ...
    def setItemHeight(self, height: typing.SupportsInt) -> None:
        ...
    def setItemIcon(self, nId: typing.SupportsInt, image: XImage) -> None:
        ...
    def setItemText(self, nId: typing.SupportsInt, text: str) -> bool:
        ...
    def setItemWidth(self, nId: typing.SupportsInt, width: typing.SupportsInt) -> bool:
        ...
class XMenuBar(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XMenuBar:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def addButton(self, text: str) -> int:
        ...
    def deleteButton(self, index: typing.SupportsInt) -> bool:
        ...
    def enableAutoWidth(self, enable: bool) -> None:
        ...
    def getButton(self, index: typing.SupportsInt) -> XButton:
        ...
    def getMenu(self, index: typing.SupportsInt) -> typing.Any:
        ...
    def getSelect(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setButtonHeight(self, height: typing.SupportsInt) -> None:
        ...
class XModelWindow(XWindow):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XModelWindow:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, title: str) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, title: str, hwndParent: typing.SupportsInt, xcStyle: typing.SupportsInt = 1223) -> None:
        ...
    @typing.overload
    def __init__(self, exStyle: typing.SupportsInt, style: typing.SupportsInt, className: str, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, title: str, hwndParent: typing.SupportsInt, xcStyle: typing.SupportsInt = 1223) -> None:
        ...
    def attach(self, hwnd: typing.SupportsInt, style: typing.SupportsInt) -> bool:
        ...
    def doModal(self) -> int:
        ...
    def enableAutoClose(self, enable: bool) -> None:
        ...
    def enableEscClose(self, enable: bool) -> None:
        ...
    def endModal(self, result: typing.SupportsInt) -> None:
        ...
    def isValid(self) -> bool:
        ...
class XMonthCal(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XMonthCal:
        ...
    def GetSelDate(self) -> XDateInfo:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def getButton(self, btnType: monthCal_button_type_) -> XButton:
        ...
    def getToday(self) -> XDateInfo:
        ...
    def isValid(self) -> bool:
        ...
    def setTextColor(self, flag: typing.SupportsInt, color: typing.SupportsInt) -> None:
        ...
    def setToday(self, year: typing.SupportsInt, month: typing.SupportsInt, day: typing.SupportsInt) -> None:
        ...
class XMsgWindow(XModelWindow):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XMsgWindow:
        ...
    @typing.overload
    def __init__(self, title: str, text: str, flags: typing.SupportsInt = 8193, hwndParent: typing.SupportsInt = 0, xcStyle: typing.SupportsInt = 1223) -> None:
        ...
    @typing.overload
    def __init__(self, exStyle: typing.SupportsInt, style: typing.SupportsInt, className: str, title: str, text: str, flags: typing.SupportsInt, hwndParent: typing.SupportsInt, xcStyle: typing.SupportsInt = 1223) -> None:
        ...
    def isValid(self) -> bool:
        ...
class XObject:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XObject:
        ...
    def __eq__(self, arg0: XObject) -> bool:
        ...
    def getHandle(self) -> int:
        ...
    def getProperty(self, name: str) -> str:
        ...
    def getType(self) -> XC_OBJECT_TYPE:
        ...
    def getTypeBase(self) -> XC_OBJECT_TYPE:
        ...
    def getTypeEx(self) -> XC_OBJECT_TYPE_EX:
        ...
    def releaseAnimation(self, end: bool = False) -> None:
        ...
    def setProperty(self, name: str, value: str) -> bool:
        ...
    def setTypeEx(self, nType: XC_OBJECT_TYPE_EX) -> None:
        ...
class XObjectUI(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XObjectUI:
        ...
    def enableCss(self, enable: bool) -> None:
        ...
    def findObjectByName(self, name: str) -> XObject:
        ...
    def findObjectByUID(self, nID: typing.SupportsInt) -> XObject:
        ...
    def findObjectByUIDName(self, name: str) -> XObject:
        ...
    def getCssName(self) -> str:
        ...
    def getStyle(self) -> XC_OBJECT_STYLE:
        ...
    def isValid(self: XSvg) -> bool:
        ...
    def loadLayout(self, fileName: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> bool:
        ...
    def loadLayoutFromString(self, xml: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> bool:
        ...
    def loadLayoutZip(self, zipFileName: str, fileName: str, password: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> bool:
        ...
    def loadLayoutZipMem(self, data: bytes, fileName: str, password: str, parent: XObject = None, attachHWND: typing.SupportsInt = 0) -> bool:
        ...
    def setCssName(self, name: str) -> None:
        ...
    def setStyle(self, style: XC_OBJECT_STYLE) -> None:
        ...
class XPane(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XPane:
        ...
    def __init__(self, name: str, width: typing.SupportsInt, height: typing.SupportsInt, parent: XFrameWindow = None) -> None:
        ...
    def dockPane(self) -> None:
        ...
    def drawPane(self, draw: XDraw) -> None:
        ...
    def floatPane(self) -> None:
        ...
    def getCaptionHeight(self) -> int:
        ...
    def getState(self) -> pane_state_:
        ...
    def getTitle(self) -> str:
        ...
    def getViewRect(self) -> XRect:
        ...
    def hidePane(self, groupDelay: bool = False) -> None:
        ...
    def isGroupActivate(self) -> bool:
        ...
    def isShowPane(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def lockPane(self) -> None:
        ...
    def setCaptionHeight(self, height: typing.SupportsInt) -> None:
        ...
    def setSelect(self) -> bool:
        ...
    def setSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setTitle(self, title: str) -> None:
        ...
    def setView(self, ele: XElement) -> None:
        ...
    def showPane(self, groupActivate: bool) -> None:
        ...
class XPoint:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> XPoint:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    @property
    def x(self) -> int:
        ...
    @x.setter
    def x(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def y(self) -> int:
        ...
    @y.setter
    def y(self, arg0: typing.SupportsInt) -> None:
        ...
class XPointF:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> XPointF:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsFloat, y: typing.SupportsFloat) -> None:
        ...
    @property
    def x(self) -> float:
        ...
    @x.setter
    def x(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def y(self) -> float:
        ...
    @y.setter
    def y(self, arg0: typing.SupportsFloat) -> None:
        ...
class XProgressBar(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XProgressBar:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def enableHorizon(self, enable: bool) -> None:
        ...
    def enableShowText(self, enable: bool) -> None:
        ...
    def enableStretch(self, enable: bool) -> None:
        ...
    def getPos(self) -> int:
        ...
    def getRange(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setColorLoad(self, color: typing.SupportsInt) -> None:
        ...
    def setImageLoad(self, image: XImage) -> None:
        ...
    def setPos(self, pos: typing.SupportsInt) -> None:
        ...
    def setRange(self, range: typing.SupportsInt) -> None:
        ...
class XRange:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, start: typing.SupportsInt, end: typing.SupportsInt) -> None:
        ...
    @property
    def end(self) -> int:
        ...
    @end.setter
    def end(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def start(self) -> int:
        ...
    @start.setter
    def start(self, arg0: typing.SupportsInt) -> None:
        ...
class XRect:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> XRect:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    @property
    def bottom(self) -> int:
        ...
    @bottom.setter
    def bottom(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def left(self) -> int:
        ...
    @left.setter
    def left(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def right(self) -> int:
        ...
    @right.setter
    def right(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def top(self) -> int:
        ...
    @top.setter
    def top(self, arg0: typing.SupportsInt) -> None:
        ...
class XRectF:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> XRectF:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, left: typing.SupportsFloat, top: typing.SupportsFloat, right: typing.SupportsFloat, bottom: typing.SupportsFloat) -> None:
        ...
    @property
    def bottom(self) -> float:
        ...
    @bottom.setter
    def bottom(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def left(self) -> float:
        ...
    @left.setter
    def left(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def right(self) -> float:
        ...
    @right.setter
    def right(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def top(self) -> float:
        ...
    @top.setter
    def top(self, arg0: typing.SupportsFloat) -> None:
        ...
class XResource:
    @staticmethod
    def enableDelayLoad(enable: bool) -> None:
        ...
    @staticmethod
    def getBkManager(name: str) -> XBkManager:
        ...
    @staticmethod
    def getColor(name: str) -> int:
        ...
    @staticmethod
    def getFont(name: str) -> XFont:
        ...
    @staticmethod
    def getIDValue(name: str) -> int:
        ...
    @staticmethod
    def getImage(name: str) -> XImage:
        ...
    @staticmethod
    def getImageEx(filename: str, name: str) -> XImage:
        ...
    @staticmethod
    def setLoadFileCallback(callback: collections.abc.Callable[[str], bool]) -> None:
        ...
class XRotateInfo:
    offset: bool
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, angle: typing.SupportsFloat, x: typing.SupportsFloat, y: typing.SupportsFloat, offset: bool) -> None:
        ...
    @property
    def angle(self) -> float:
        ...
    @angle.setter
    def angle(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def x(self) -> float:
        ...
    @x.setter
    def x(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def y(self) -> float:
        ...
    @y.setter
    def y(self, arg0: typing.SupportsFloat) -> None:
        ...
class XScrollBar(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XScrollBar:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def enableHorizon(self, enable: bool) -> bool:
        ...
    def getButtonDown(self) -> XButton:
        ...
    def getButtonSlider(self) -> XButton:
        ...
    def getButtonUp(self) -> XButton:
        ...
    def getRange(self) -> int:
        ...
    def getSliderMaxLength(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def scrollBottom(self) -> bool:
        ...
    def scrollDown(self) -> bool:
        ...
    def scrollPos(self, pos: typing.SupportsInt) -> bool:
        ...
    def scrollTop(self) -> bool:
        ...
    @typing.overload
    def scrollUp(self) -> bool:
        ...
    @typing.overload
    def scrollUp(self) -> bool:
        ...
    def setRange(self, range: typing.SupportsInt) -> None:
        ...
    def setSliderLength(self, length: typing.SupportsInt) -> None:
        ...
    def setSliderMinLength(self, length: typing.SupportsInt) -> None:
        ...
    def setSliderPadding(self, padding: typing.SupportsInt) -> None:
        ...
    def showButton(self, enable: bool) -> None:
        ...
class XScrollView(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XScrollView:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def enableAutoShowScrollBar(self, enable: bool) -> None:
        ...
    def getLineSize(self) -> XSize:
        ...
    def getScrollBarH(self) -> XObject:
        ...
    def getScrollBarV(self) -> XObject:
        ...
    def getTotalSize(self) -> XSize:
        ...
    def getViewHeight(self) -> int:
        ...
    def getViewPosH(self) -> int:
        ...
    def getViewPosV(self) -> int:
        ...
    def getViewRect(self) -> XRect:
        ...
    def getViewWidth(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def scrollBottom(self) -> bool:
        ...
    def scrollBottomLine(self) -> bool:
        ...
    def scrollLeft(self) -> bool:
        ...
    def scrollLeftLine(self) -> bool:
        ...
    def scrollPosH(self, pos: typing.SupportsInt) -> bool:
        ...
    def scrollPosV(self, pos: typing.SupportsInt) -> bool:
        ...
    def scrollPosXH(self, pos: typing.SupportsInt) -> bool:
        ...
    def scrollPosYV(self, pos: typing.SupportsInt) -> bool:
        ...
    def scrollRight(self) -> bool:
        ...
    def scrollRightLine(self) -> bool:
        ...
    def scrollTop(self) -> bool:
        ...
    def scrollTopLine(self) -> bool:
        ...
    def setLineSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> bool:
        ...
    def setScrollBarSize(self, size: typing.SupportsInt) -> None:
        ...
    def setTotalSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> bool:
        ...
    def showSBarH(self, enable: bool) -> None:
        ...
    def showSBarV(self, enable: bool) -> None:
        ...
class XShadowInfo:
    @property
    def angeleSize(self) -> int:
        ...
    @property
    def color(self) -> int:
        ...
    @property
    def depth(self) -> int:
        ...
    @property
    def rightAngle(self) -> bool:
        ...
    @property
    def size(self) -> int:
        ...
class XShape(XWidget):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShape:
        ...
    def adjustLayout(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def getAlpha(self) -> int:
        ...
    def getContentSize(self) -> XSize:
        ...
    def getPosition(self) -> XPoint:
        ...
    def getRect(self) -> XRect:
        ...
    def getRectLogic(self) -> XRect:
        ...
    def getSize(self) -> XSize:
        ...
    def getWidth(self) -> int:
        ...
    def getWndClientRect(self) -> XRect:
        ...
    def getZOrder(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def redraw(self) -> None:
        ...
    def removeShape(self) -> None:
        ...
    def setAlpha(self, alpha: typing.SupportsInt) -> None:
        ...
    def setPosition(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setRectLogic(self, rect: XRect, redraw: bool) -> bool:
        ...
    def setSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def showLayout(self, enable: bool) -> None:
        ...
class XShapeEllipse(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeEllipse:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def enableBorder(self, enable: bool) -> None:
        ...
    def enableFill(self, enable: bool) -> None:
        ...
    def isValid(self) -> bool:
        ...
    def setBorderColor(self, color: typing.SupportsInt) -> None:
        ...
    def setFillColor(self, color: typing.SupportsInt) -> None:
        ...
class XShapeGif(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeGif:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def getImage(self) -> XImage:
        ...
    def isValid(self) -> bool:
        ...
    def setImage(self, image: XImage) -> None:
        ...
class XShapeGroupBox(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeGroupBox:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    def enableRoundAngle(self, enable: bool) -> None:
        ...
    def getRoundAngle(self) -> XSize:
        ...
    def getTextOffset(self) -> XPoint:
        ...
    def isValid(self) -> bool:
        ...
    def setBorderColor(self, color: typing.SupportsInt) -> None:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setRoundAngle(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setText(self, text: str) -> None:
        ...
    def setTextColor(self, color: typing.SupportsInt) -> None:
        ...
    def setTextOffset(self, offsetX: typing.SupportsInt, offsetY: typing.SupportsInt) -> None:
        ...
class XShapeLine(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeLine:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def isValid(self) -> bool:
        ...
    def setColor(self, color: typing.SupportsInt) -> None:
        ...
    def setPosition(self, x1: typing.SupportsInt, y1: typing.SupportsInt, x2: typing.SupportsInt, y2: typing.SupportsInt) -> None:
        ...
class XShapePicture(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapePicture:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def getImage(self) -> XImage:
        ...
    def isValid(self) -> bool:
        ...
    def setImage(self, image: XImage) -> None:
        ...
class XShapeRect(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeRect:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def enableBorder(self, enable: bool) -> None:
        ...
    def enableFill(self, enable: bool) -> None:
        ...
    def enableRoundAngle(self, enable: bool) -> None:
        ...
    def getRoundAngle(self) -> XSize:
        ...
    def isValid(self) -> bool:
        ...
    def setBorderColor(self, color: typing.SupportsInt) -> None:
        ...
    def setFillColor(self, color: typing.SupportsInt) -> None:
        ...
    def setRoundAngle(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
class XShapeTable(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeTable:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def comboColumn(self, row: typing.SupportsInt, column: typing.SupportsInt, count: typing.SupportsInt) -> None:
        ...
    def comboRow(self, row: typing.SupportsInt, column: typing.SupportsInt, count: typing.SupportsInt) -> None:
        ...
    def getItemRect(self, row: typing.SupportsInt, column: typing.SupportsInt) -> XRect:
        ...
    def isValid(self) -> bool:
        ...
    def reset(self, row: typing.SupportsInt, column: typing.SupportsInt) -> None:
        ...
    def setBorderColor(self, color: typing.SupportsInt) -> None:
        ...
    def setColumnWidth(self, column: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setItemBkColor(self, row: typing.SupportsInt, column: typing.SupportsInt, color: typing.SupportsInt, enable: bool) -> None:
        ...
    def setItemFlag(self, row: typing.SupportsInt, column: typing.SupportsInt, flag: typing.SupportsInt) -> None:
        ...
    def setItemFont(self, row: typing.SupportsInt, column: typing.SupportsInt, font: XFont) -> None:
        ...
    def setItemLine(self, row1: typing.SupportsInt, column1: typing.SupportsInt, row2: typing.SupportsInt, column2: typing.SupportsInt, flag: typing.SupportsInt, color: typing.SupportsInt) -> None:
        ...
    def setItemPadding(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setItemText(self, row: typing.SupportsInt, column: typing.SupportsInt, text: str) -> None:
        ...
    def setItemTextAlign(self, row: typing.SupportsInt, column: typing.SupportsInt, align: typing.SupportsInt) -> None:
        ...
    def setItemTextColor(self, row: typing.SupportsInt, column: typing.SupportsInt, color: typing.SupportsInt, enable: bool) -> None:
        ...
    def setItemTextEx(self, row: typing.SupportsInt, column: typing.SupportsInt, text: str, textColor: typing.SupportsInt, bkColor: typing.SupportsInt, textColorEnable: bool = True, bkColorEnable: bool = True, font: XFont = None) -> None:
        ...
    def setRowHeight(self, row: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setTextColor(self, color: typing.SupportsInt) -> None:
        ...
class XShapeText(XShape):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XShapeText:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    def getFont(self) -> XFont:
        ...
    def getText(self) -> str:
        ...
    def getTextColor(self) -> int:
        ...
    def getTextLength(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setOffset(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setText(self, text: str) -> None:
        ...
    def setTextAlign(self, align: typing.SupportsInt) -> None:
        ...
    def setTextColor(self, color: typing.SupportsInt) -> None:
        ...
class XSize:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> XSize:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    @property
    def height(self) -> int:
        ...
    @height.setter
    def height(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def width(self) -> int:
        ...
    @width.setter
    def width(self, arg0: typing.SupportsInt) -> None:
        ...
class XSliderBar(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XSliderBar:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def enableHorizon(self, enable: bool) -> None:
        ...
    def getButton(self) -> XButton:
        ...
    def getPos(self) -> int:
        ...
    def getRange(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setButtonHeight(self, length: typing.SupportsInt) -> None:
        ...
    def setButtonWidth(self, width: typing.SupportsInt) -> None:
        ...
    def setImageLoad(self, image: XImage) -> None:
        ...
    def setPos(self, pos: typing.SupportsInt) -> None:
        ...
    def setRange(self, range: typing.SupportsInt) -> None:
        ...
class XStrokeInfo:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, color: typing.SupportsInt, strokeWidth: typing.SupportsFloat) -> None:
        ...
    @property
    def name(self) -> int:
        ...
    @name.setter
    def name(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def strokeWidth(self) -> float:
        ...
    @strokeWidth.setter
    def strokeWidth(self, arg0: typing.SupportsFloat) -> None:
        ...
class XSvg(XObject):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XSvg:
        ...
    @staticmethod
    def loadFile(filename: str) -> XSvg:
        ...
    @staticmethod
    def loadRes(resId: typing.SupportsInt, filename: str, hModule: typing.SupportsInt) -> XSvg:
        ...
    @staticmethod
    def loadString(text: str) -> XSvg:
        ...
    @staticmethod
    def loadZip(zipFileName: str, fileName: str, password: str) -> XSvg:
        ...
    @staticmethod
    def loadZipMem(data: bytes, fileName: str, password: str) -> XSvg:
        ...
    @staticmethod
    def loadZipRes(id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> XSvg:
        ...
    def addRef(self) -> None:
        ...
    def destroy(self) -> None:
        ...
    def enableAutoDestroy(self, enable: bool) -> None:
        ...
    def getAlpha(self) -> int:
        ...
    def getHeight(self) -> int:
        ...
    def getPosition(self) -> XPoint:
        ...
    def getRefCount(self) -> int:
        ...
    def getRotate(self) -> XRotateInfo:
        ...
    def getRotateAngle(self) -> float:
        ...
    def getSize(self) -> XSize:
        ...
    def getUserFillColor(self) -> int:
        ...
    def getUserStrokeColor(self) -> XStrokeInfo:
        ...
    def getViewBox(self) -> XRect:
        ...
    def getWidth(self) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def release(self) -> None:
        ...
    def setAlpha(self, alpha: typing.SupportsInt) -> None:
        ...
    def setPosition(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setRotate(self, angle: typing.SupportsFloat, x: typing.SupportsFloat, y: typing.SupportsFloat, offset: bool) -> None:
        ...
    def setRotateAngle(self, angle: typing.SupportsFloat) -> None:
        ...
    def setSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setUserFillColor(self, color: typing.SupportsInt, enable: bool) -> None:
        ...
    def setUserStrokeColor(self, color: typing.SupportsInt, strokeWidth: typing.SupportsFloat, enable: bool) -> None:
        ...
    def show(self, enable: bool) -> None:
        ...
class XTabBar(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XTabBar:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def addLabel(self, name: str) -> int:
        ...
    @typing.overload
    def addLabel(self, name: str) -> int:
        ...
    @typing.overload
    def addLabel(self, name: str) -> int:
        ...
    @typing.overload
    def addLabel(self, name: str) -> int:
        ...
    def deleteLabel(self, index: typing.SupportsInt) -> bool:
        ...
    def deleteLabelAll(self) -> None:
        ...
    def enableClose(self, enable: bool) -> None:
        ...
    def enableDropMenu(self, enable: bool) -> None:
        ...
    def enableTile(self, enable: bool) -> None:
        ...
    def getButtonDropMenu(self) -> XObject:
        ...
    def getButtonLeft(self) -> XObject:
        ...
    def getButtonRight(self) -> XObject:
        ...
    def getIndexByEle(self, ele: XElement) -> int:
        ...
    def getLabel(self, index: typing.SupportsInt) -> XObject:
        ...
    def getLabelClose(self, index: typing.SupportsInt) -> XObject:
        ...
    def getLabelCount(self) -> int:
        ...
    def getLabelSpacing(self) -> int:
        ...
    def getSelect(self) -> int:
        ...
    @typing.overload
    def insertLabel(self, index: typing.SupportsInt, name: str) -> int:
        ...
    @typing.overload
    def insertLabel(self, index: typing.SupportsInt, name: str) -> int:
        ...
    @typing.overload
    def insertLabel(self, index: typing.SupportsInt, name: str) -> int:
        ...
    @typing.overload
    def insertLabel(self, index: typing.SupportsInt, name: str) -> int:
        ...
    def isValid(self) -> bool:
        ...
    @typing.overload
    def moveLabel(self, src: typing.SupportsInt, dest: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def moveLabel(self, src: typing.SupportsInt, dest: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def moveLabel(self, src: typing.SupportsInt, dest: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def moveLabel(self, src: typing.SupportsInt, dest: typing.SupportsInt) -> bool:
        ...
    @typing.overload
    def moveLabel(self, src: typing.SupportsInt, dest: typing.SupportsInt) -> bool:
        ...
    def setCloseSize(self, size: XSize) -> None:
        ...
    def setDown(self) -> None:
        ...
    def setLabelSpacing(self, spacing: typing.SupportsInt) -> None:
        ...
    def setLabelWidth(self, index: typing.SupportsInt, width: typing.SupportsInt) -> None:
        ...
    def setSelect(self, index: typing.SupportsInt) -> None:
        ...
    def setTurnButtonSize(self, size: XSize) -> None:
        ...
    def setUp(self) -> None:
        ...
    def showLabel(self, index: typing.SupportsInt, enable: bool) -> bool:
        ...
class XTemplate:
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XTemplate:
        ...
    @staticmethod
    def clone(template: XTemplate) -> XTemplate:
        ...
    @staticmethod
    def load(tempType: listItemTemp_type_, filename: str) -> XTemplate:
        ...
    @staticmethod
    def loadEx(tempType: listItemTemp_type_, filename: str) -> list[XTemplate]:
        ...
    @staticmethod
    def loadFromMem(tempType: listItemTemp_type_, xmlData: str) -> XTemplate:
        ...
    @staticmethod
    def loadFromMemEx(tempType: listItemTemp_type_, xmlData: str, prefixName: str = '') -> XTemplate:
        ...
    @staticmethod
    def loadMem(tempType: listItemTemp_type_, xmlData: bytes) -> XTemplate:
        ...
    @staticmethod
    def loadMemEx(tempType: listItemTemp_type_, xmlData: bytes) -> list[XTemplate]:
        ...
    @staticmethod
    def loadZip(tempType: listItemTemp_type_, zipFileName: str, fileName: str, password: str) -> XTemplate:
        ...
    @staticmethod
    def loadZipEx(tempType: listItemTemp_type_, zipFileName: str, fileName: str, password: str) -> list[XTemplate]:
        ...
    @staticmethod
    def loadZipMem(tempType: listItemTemp_type_, data: bytes, fileName: str, password: str) -> XTemplate:
        ...
    @staticmethod
    def loadZipMemEx(tempType: listItemTemp_type_, data: bytes, fileName: str, password: str) -> list[XTemplate]:
        ...
    @staticmethod
    def loadZipRes(tempType: listItemTemp_type_, id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> XTemplate:
        ...
    @staticmethod
    def loadZipResEx(tempType: listItemTemp_type_, id: typing.SupportsInt, fileName: str, password: str = '', prefixName: str = '', hModule: typing.SupportsInt = 0) -> XTemplate:
        ...
    def __init__(self, tempType: listItemTemp_type_) -> None:
        ...
    def addNodeRoot(self, node: XTemplateNode) -> bool:
        ...
    def deleteNode(self, index: typing.SupportsInt) -> bool:
        ...
    def destroy(self) -> bool:
        ...
    def getCount(self) -> int:
        ...
    def getHandle(self) -> int:
        ...
    def getNode(self, index: typing.SupportsInt) -> XTemplateNode:
        ...
    def getType(self) -> listItemTemp_type_:
        ...
    def insertNode(self, index: typing.SupportsInt, node: XTemplateNode) -> bool:
        ...
    def moveColumn(self, srcColumn: typing.SupportsInt, destColumn: typing.SupportsInt) -> bool:
        ...
class XTemplateNode:
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XTemplateNode:
        ...
    @staticmethod
    def cloneNode(node: XTemplateNode) -> XTemplateNode:
        ...
    def __init__(self, objectType: XC_OBJECT_TYPE) -> None:
        ...
    def addNode(self, childNode: XTemplateNode) -> bool:
        ...
    def getHandle(self) -> int:
        ...
    def getNode(self, itemId: typing.SupportsInt) -> XTemplateNode:
        ...
    def setNodeAttribute(self, name: str, value: str) -> bool:
        ...
    def setNodeAttributeEx(self, itemId: typing.SupportsInt, name: str, value: str) -> bool:
        ...
class XTextLink(XButton):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XTextLink:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, text: str, parent: XObjectUI = None) -> None:
        ...
    def enableUnderlineLeave(self, enable: bool) -> None:
        ...
    def enableUnderlineStay(self, enable: bool) -> None:
        ...
    def isValid(self) -> bool:
        ...
    def setTextColorStay(self, color: typing.SupportsInt) -> None:
        ...
    def setUnderlineColorLeave(self, color: typing.SupportsInt) -> None:
        ...
    def setUnderlineColorStay(self, color: typing.SupportsInt) -> None:
        ...
class XTimeInfo:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, hour: typing.SupportsInt, minute: typing.SupportsInt, second: typing.SupportsInt) -> None:
        ...
    @property
    def hour(self) -> int:
        ...
    @hour.setter
    def hour(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def minute(self) -> int:
        ...
    @minute.setter
    def minute(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def second(self) -> int:
        ...
    @second.setter
    def second(self, arg0: typing.SupportsInt) -> None:
        ...
class XToolBar(XElement):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XToolBar:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def deleteAllEle(self) -> None:
        ...
    def deleteEle(self, index: typing.SupportsInt) -> None:
        ...
    def enableButtonMenu(self, enable: bool) -> None:
        ...
    def getButtonLeft(self) -> XObject:
        ...
    def getButtonMenu(self) -> XObject:
        ...
    def getButtonRight(self) -> XObject:
        ...
    def getEle(self, index: typing.SupportsInt) -> XObject:
        ...
    def insertEle(self, ele: XElement, index: typing.SupportsInt) -> None:
        ...
    def insertSeparator(self, index: typing.SupportsInt = -1, color: typing.SupportsInt = 4286611584) -> int:
        ...
    def isValid(self) -> bool:
        ...
    def setSpace(self, size: typing.SupportsInt) -> None:
        ...
class XTrayIcon:
    @staticmethod
    def reset() -> None:
        ...
    @staticmethod
    def setCallbackMessage(userMessage: typing.SupportsInt) -> None:
        ...
    @staticmethod
    def setPopupBalloon(title: str, text: str, balloonIcon: XImage = None, flags: typing.SupportsInt = 0) -> None:
        ...
    @staticmethod
    def setTips(tips: str) -> None:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, window: XWindow, id: typing.SupportsInt) -> None:
        ...
    def add(self) -> bool:
        ...
    def modify(self) -> bool:
        ...
    def remove(self) -> bool:
        ...
    def setFocus(self) -> bool:
        ...
    def setIcon(self, hIcon: typing.SupportsInt) -> bool:
        ...
class XTree(XScrollView):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XTree:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI, flags: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, parent: XObjectUI = None) -> None:
        ...
    def bindAdapter(self, adapter: XAdapter) -> None:
        ...
    def createAdapter(self) -> XObject:
        ...
    def deleteColumnAll(self) -> None:
        ...
    def deleteItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def deleteItemAll(self) -> None:
        ...
    def enableConnectLine(self, enable: bool, solid: bool) -> None:
        ...
    def enableDragItem(self, enable: bool) -> None:
        ...
    def enableExpand(self, enable: bool) -> None:
        ...
    def enableTemplateReuse(self, enable: bool) -> None:
        ...
    def expandAllChildItem(self, itemId: typing.SupportsInt, expand: bool) -> bool:
        ...
    def expandItem(self, itemId: typing.SupportsInt, expand: bool) -> bool:
        ...
    def getAdapter(self) -> XObject:
        ...
    def getCount(self) -> int:
        ...
    def getCountColumn(self) -> int:
        ...
    def getEndChildItem(self, itemId: typing.SupportsInt) -> int:
        ...
    def getFirstChildItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def getIndentation(self) -> int:
        ...
    def getItemData(self, itemId: typing.SupportsInt) -> None:
        ...
    def getItemHeight(self, itemId: typing.SupportsInt) -> XItemHeightInfo:
        ...
    def getItemHeightDefault(self) -> XItemHeightInfo:
        ...
    def getItemIdFromUIObject(self, ele: XWidget) -> int:
        ...
    def getItemImage(self, itemId: typing.SupportsInt, column: typing.SupportsInt) -> XImage:
        ...
    def getItemImageEx(self, itemId: typing.SupportsInt, name: str) -> XImage:
        ...
    def getItemTemplate(self) -> XTemplate:
        ...
    def getItemText(self, itemId: typing.SupportsInt, column: typing.SupportsInt) -> str:
        ...
    def getItemTextEx(self, itemId: typing.SupportsInt, name: str) -> str:
        ...
    def getNextSiblingItem(self, itemId: typing.SupportsInt) -> int:
        ...
    def getParentItem(self, itemId: typing.SupportsInt) -> int:
        ...
    def getPrevSiblingItem(self, itemId: typing.SupportsInt) -> int:
        ...
    def getRowSpace(self) -> int:
        ...
    def getSelectItem(self) -> int:
        ...
    def getTemplateObject(self, itemId: typing.SupportsInt, templateId: typing.SupportsInt) -> XObject:
        ...
    def hitTest(self, point: XPoint) -> int:
        ...
    def hitTestOffset(self, point: XPoint) -> int:
        ...
    def insertItemImage(self, image: XImage, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def insertItemImageEx(self, name: str, image: XImage, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def insertItemText(self, text: str, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def insertItemTextEx(self, name: str, text: str, parentId: typing.SupportsInt = 0, insertId: typing.SupportsInt = -3) -> int:
        ...
    def isExpand(self, itemId: typing.SupportsInt) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def moveItem(self, srcItemId: typing.SupportsInt, destItemId: typing.SupportsInt, flag: typing.SupportsInt) -> bool:
        ...
    def refreshData(self) -> None:
        ...
    def refreshItem(self, itemId: typing.SupportsInt) -> None:
        ...
    def setConnectLineColor(self, color: typing.SupportsInt) -> None:
        ...
    def setConnectLineLength(self, length: typing.SupportsInt) -> None:
        ...
    def setDragInsertPositionColor(self, color: typing.SupportsInt) -> None:
        ...
    def setDrawItemBkFlags(self, flags: typing.SupportsInt) -> None:
        ...
    def setExpandButtonSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setIndentation(self, width: typing.SupportsInt) -> None:
        ...
    def setItemData(self, itemId: typing.SupportsInt, userdata: typing.Any) -> None:
        ...
    def setItemHeight(self, itemId: typing.SupportsInt, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setItemHeightDefault(self, height: typing.SupportsInt, selHeight: typing.SupportsInt) -> None:
        ...
    def setItemImage(self, itemId: typing.SupportsInt, column: typing.SupportsInt, image: XImage) -> bool:
        ...
    def setItemImageEx(self, itemId: typing.SupportsInt, name: str, image: XImage) -> bool:
        ...
    def setItemTemplate(self, template: XTemplate) -> bool:
        ...
    def setItemTemplateSel(self, template: XTemplate) -> bool:
        ...
    def setItemTemplateSelXMLFromMem(self, xmlData: bytes) -> bool:
        ...
    def setItemTemplateXML(self, xmlFile: str) -> bool:
        ...
    @typing.overload
    def setItemTemplateXMLFromMem(self, xmlData: str) -> int:
        ...
    @typing.overload
    def setItemTemplateXMLFromMem(self, xmlData: bytes) -> bool:
        ...
    def setItemTemplateXMLFromZipRes(self, id: typing.SupportsInt, fileName: str, password: str = '', hModule: typing.SupportsInt = 0) -> int:
        ...
    def setItemTemplateXMLSel(self, xmlFile: str) -> bool:
        ...
    def setItemText(self, itemId: typing.SupportsInt, column: typing.SupportsInt, text: str) -> bool:
        ...
    def setItemTextEx(self, itemId: typing.SupportsInt, name: str, text: str) -> bool:
        ...
    def setRowSpace(self, space: typing.SupportsInt) -> None:
        ...
    def setSelectItem(self, itemId: typing.SupportsInt) -> bool:
        ...
    def setSplitLineColor(self, color: typing.SupportsInt) -> None:
        ...
class XWidget(XObjectUI):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XWidget:
        ...
    def enableLayoutControl(self, enable: bool) -> None:
        ...
    def getHWND(self) -> int:
        ...
    def getID(self) -> int:
        ...
    def getName(self) -> str:
        ...
    def getParent(self) -> XObject:
        ...
    def getParentEle(self) -> XObject:
        ...
    def getUID(self) -> int:
        ...
    def getWindow(self) -> XObject:
        ...
    def isLayoutControl(self) -> bool:
        ...
    def isShow(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def layoutEnableFloat(self, float: bool) -> None:
        ...
    def layoutEnableSwap(self, swap: bool) -> None:
        ...
    def layoutEnableWrap(self, wrap: bool) -> None:
        ...
    def layoutGetHeight(self) -> XLayoutSize:
        ...
    def layoutGetMargin(self) -> XRect:
        ...
    def layoutGetWidth(self) -> XLayoutSize:
        ...
    def layoutSetAlign(self, align: layout_align_axis_) -> None:
        ...
    def layoutSetHeight(self, sizeType: layout_size_, size: typing.SupportsInt = 0) -> None:
        ...
    def layoutSetMargin(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def layoutSetMinSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def layoutSetPosition(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def layoutSetWidth(self, sizeType: layout_size_, size: typing.SupportsInt = 0) -> None:
        ...
    def setID(self, id: typing.SupportsInt) -> None:
        ...
    def setName(self, name: str) -> None:
        ...
    def setUID(self, uid: typing.SupportsInt) -> None:
        ...
    def show(self, show: bool) -> None:
        ...
class XWindow(XObjectUI, XLayoutBox):
    @staticmethod
    def cast(handle: typing.SupportsInt) -> XWindow:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, width: typing.SupportsInt, height: typing.SupportsInt, title: str) -> None:
        ...
    @typing.overload
    def __init__(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, title: str, hWndParent: typing.SupportsInt = 0, style: typing.SupportsInt = 2031) -> None:
        ...
    @typing.overload
    def __init__(self, exStyle: typing.SupportsInt, style: typing.SupportsInt, className: str, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, title: str, hwndParent: typing.SupportsInt, xcStyle: typing.SupportsInt) -> None:
        ...
    def addBkFill(self, state: typing.SupportsInt, color: typing.SupportsInt) -> None:
        ...
    def addBkImage(self, state: typing.SupportsInt, image: XImage) -> None:
        ...
    def addChild(self, child: XObjectUI) -> bool:
        ...
    def adjustLayout(self) -> None:
        ...
    def adjustLayoutEx(self, flags: adjustLayout_) -> None:
        ...
    def attach(self, hwnd: typing.SupportsInt, style: typing.SupportsInt = 2031) -> bool:
        ...
    def center(self) -> None:
        ...
    def centerEx(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def clearBkInfo(self) -> None:
        ...
    def clientToScreen(self, point: XPoint) -> XPoint:
        ...
    def closeWindow(self) -> None:
        ...
    def createCaret(self, ele: XElement, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def destroyCaret(self) -> None:
        ...
    def destroyWindow(self) -> None:
        ...
    def drawWindow(self, draw: XDraw) -> None:
        ...
    def enableAutoFocus(self, enable: bool) -> None:
        ...
    def enableDragBorder(self, enable: bool) -> None:
        ...
    def enableDragCaption(self, enable: bool) -> None:
        ...
    def enableDragFiles(self, enable: bool) -> None:
        ...
    def enableDragWindow(self, enable: bool) -> None:
        ...
    def enableDrawBk(self, enable: bool) -> None:
        ...
    def enableLayout(self, enable: bool) -> None:
        ...
    def enableLayoutOverlayBorder(self, enable: bool) -> None:
        ...
    def enableLimitWindowSize(self, enable: bool) -> None:
        ...
    def enableMaxWindow(self, enable: bool) -> None:
        ...
    def findChildByID(self, nId: typing.SupportsInt) -> XObject:
        ...
    def findChildByIDName(self, name: str) -> XObject:
        ...
    def getBkInfoCount(self) -> int:
        ...
    def getBkManager(self) -> XObject:
        ...
    def getBkManagerEx(self) -> XObject:
        ...
    def getBodyRect(self) -> XRect:
        ...
    def getBorderSize(self) -> XRect:
        ...
    def getButton(self, flag: typing.SupportsInt) -> XButton:
        ...
    def getCaptureEle(self) -> XObject:
        ...
    def getCare(self) -> XObject:
        ...
    def getCareInfo(self) -> XCareInfo:
        ...
    def getChildByID(self, nId: typing.SupportsInt) -> XObject:
        ...
    def getChildByIndex(self, index: typing.SupportsInt) -> XObject:
        ...
    def getChildCount(self) -> int:
        ...
    def getClientRect(self) -> XRect:
        ...
    def getCursorPos(self) -> XPoint:
        ...
    def getDPI(self) -> int:
        ...
    def getDragBorderSize(self) -> XRect:
        ...
    def getDrawRect(self) -> XRect:
        ...
    def getFoucsEle(self) -> XObject:
        ...
    def getHWND(self) -> int:
        ...
    def getID(self) -> int:
        ...
    def getIcon(self) -> XImage:
        ...
    def getLayoutRect(self) -> XRect:
        ...
    def getName(self) -> str:
        ...
    def getRect(self) -> XRect:
        ...
    def getShadowInfo(self) -> XShadowInfo:
        ...
    def getStayEle(self) -> XObject:
        ...
    def getTextColor(self) -> int:
        ...
    def getTextColorEx(self) -> int:
        ...
    def getTitle(self) -> str:
        ...
    def getTitleColor(self) -> int:
        ...
    def getTransparentType(self) -> window_transparent_:
        ...
    def hitChildEle(self, point: XPoint) -> XObject:
        ...
    def insertChild(self, child: XObjectUI, index: typing.SupportsInt) -> bool:
        ...
    def isDragBorder(self) -> bool:
        ...
    def isDragCaption(self) -> bool:
        ...
    def isEnableLayout(self) -> bool:
        ...
    def isMaxWindow(self) -> bool:
        ...
    def isValid(self) -> bool:
        ...
    def killTimer(self, eventId: typing.SupportsInt) -> bool:
        ...
    def killXCTimer(self, eventId: typing.SupportsInt) -> bool:
        ...
    def maxWindow(self, maximize: bool) -> None:
        ...
    def notifyMsgSetBorderSize(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def notifyMsgSetCaptionHeight(self, height: typing.SupportsInt) -> None:
        ...
    def notifyMsgSetDuration(self, duration: typing.SupportsInt) -> None:
        ...
    def notifyMsgSetParentMargin(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def notifyMsgSetSpace(self, space: typing.SupportsInt) -> None:
        ...
    def notifyMsgSetWidth(self, width: typing.SupportsInt) -> None:
        ...
    def notifyMsgWindowPopup(self, position: position_flag_, title: str, text: str, icon: XImage, skin: notifyMsg_skin_) -> None:
        ...
    def notifyMsgWindowPopupEx(self, position: position_flag_, title: str, text: str, icon: XImage, skin: notifyMsg_skin_, btnClose: bool, autoClose: bool, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def pointToDPI(self, point: XPoint) -> XPoint:
        ...
    def postMessage(self, msg: typing.SupportsInt, wParam: typing.SupportsInt, lParam: typing.SupportsInt) -> bool:
        ...
    def rectToDPI(self, rect: XRect) -> XRect:
        ...
    def redraw(self, immediate: bool = False) -> None:
        ...
    def redrawRect(self, rect: XRect, immediate: bool = False) -> None:
        ...
    def regEvent(self, eventType: typing.SupportsInt, callback: collections.abc.Callable[[XEvent, typing.Any], bool], userdata: typing.Any = None) -> None:
        ...
    def screenToClient(self, point: XPoint) -> XPoint:
        ...
    def sendMessage(self, msg: typing.SupportsInt, wParam: typing.SupportsInt, lParam: typing.SupportsInt) -> bool:
        ...
    def setBkInfo(self, text: str) -> int:
        ...
    def setBkMagager(self, bkm: XBkManager) -> None:
        ...
    def setBorderSize(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setCaptionMargin(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setCaptureEle(self, ele: XElement) -> None:
        ...
    def setCaretColor(self, color: typing.SupportsInt) -> None:
        ...
    def setCaretPos(self, x: typing.SupportsInt, y: typing.SupportsInt, width: typing.SupportsInt, height: typing.SupportsInt, update: bool) -> None:
        ...
    @typing.overload
    def setCursor(self, hCursor: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setCursor(self) -> int:
        ...
    def setCursorSys(self, hCursor: typing.SupportsInt) -> int:
        ...
    def setDPI(self, dpi: typing.SupportsInt) -> None:
        ...
    def setDragBorderSize(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setFont(self, font: XFont) -> None:
        ...
    def setFoucsEle(self, ele: XObjectUI) -> None:
        ...
    def setID(self, nId: typing.SupportsInt) -> None:
        ...
    def setIcon(self, image: XImage) -> None:
        ...
    def setMinimumSize(self, width: typing.SupportsInt, height: typing.SupportsInt) -> None:
        ...
    def setName(self, name: str) -> None:
        ...
    def setPadding(self, left: typing.SupportsInt, top: typing.SupportsInt, right: typing.SupportsInt, bottom: typing.SupportsInt) -> None:
        ...
    def setPosition(self, x: typing.SupportsInt, y: typing.SupportsInt) -> None:
        ...
    def setRect(self, rect: XRect) -> XRect:
        ...
    def setShadowInfo(self, size: typing.SupportsInt, depth: typing.SupportsInt, angeleSize: typing.SupportsInt, rightAngle: bool, color: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setTextColor(self, color: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def setTextColor(self, color: typing.SupportsInt) -> None:
        ...
    def setTimer(self, eventId: typing.SupportsInt, elapse: typing.SupportsInt) -> int:
        ...
    def setTitle(self, title: str) -> None:
        ...
    def setTitleColor(self, color: typing.SupportsInt) -> None:
        ...
    def setTop(self, bTop: typing.SupportsInt = True) -> None:
        ...
    def setTransparentAlpha(self, alpha: typing.SupportsInt) -> None:
        ...
    def setTransparentColor(self, color: typing.SupportsInt) -> None:
        ...
    def setTransparentType(self, nType: window_transparent_) -> None:
        ...
    def setWindowPos(self, hWndInsertAfter: typing.SupportsInt, x: typing.SupportsInt, y: typing.SupportsInt, cx: typing.SupportsInt, cy: typing.SupportsInt, flags: typing.SupportsInt) -> None:
        ...
    def setXCTimer(self, eventId: typing.SupportsInt, elapse: typing.SupportsInt) -> bool:
        ...
    def show(self, show: bool) -> None:
        ...
    def showCaret(self, show: bool) -> None:
        ...
    def showLayoutFrame(self, enable: bool) -> None:
        ...
    def showWindow(self, showType: typing.SupportsInt = 5) -> bool:
        ...
class adapter_date_type_:
    """
    Members:
    
      adapter_date_type_error
    
      adapter_date_type_int
    
      adapter_date_type_float
    
      adapter_date_type_string
    
      adapter_date_type_image
    """
    __members__: typing.ClassVar[dict[str, adapter_date_type_]]  # value = {'adapter_date_type_error': <adapter_date_type_.adapter_date_type_error: -1>, 'adapter_date_type_int': <adapter_date_type_.adapter_date_type_int: 0>, 'adapter_date_type_float': <adapter_date_type_.adapter_date_type_float: 1>, 'adapter_date_type_string': <adapter_date_type_.adapter_date_type_string: 2>, 'adapter_date_type_image': <adapter_date_type_.adapter_date_type_image: 3>}
    adapter_date_type_error: typing.ClassVar[adapter_date_type_]  # value = <adapter_date_type_.adapter_date_type_error: -1>
    adapter_date_type_float: typing.ClassVar[adapter_date_type_]  # value = <adapter_date_type_.adapter_date_type_float: 1>
    adapter_date_type_image: typing.ClassVar[adapter_date_type_]  # value = <adapter_date_type_.adapter_date_type_image: 3>
    adapter_date_type_int: typing.ClassVar[adapter_date_type_]  # value = <adapter_date_type_.adapter_date_type_int: 0>
    adapter_date_type_string: typing.ClassVar[adapter_date_type_]  # value = <adapter_date_type_.adapter_date_type_string: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class adjustLayout_:
    """
    Members:
    
      adjustLayout_no
    
      adjustLayout_all
    
      adjustLayout_self
    """
    __members__: typing.ClassVar[dict[str, adjustLayout_]]  # value = {'adjustLayout_no': <adjustLayout_.adjustLayout_no: 0>, 'adjustLayout_all': <adjustLayout_.adjustLayout_all: 1>, 'adjustLayout_self': <adjustLayout_.adjustLayout_self: 2>}
    adjustLayout_all: typing.ClassVar[adjustLayout_]  # value = <adjustLayout_.adjustLayout_all: 1>
    adjustLayout_no: typing.ClassVar[adjustLayout_]  # value = <adjustLayout_.adjustLayout_no: 0>
    adjustLayout_self: typing.ClassVar[adjustLayout_]  # value = <adjustLayout_.adjustLayout_self: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class animation_move_:
    """
    Members:
    
      animation_move_x
    
      animation_move_y
    """
    __members__: typing.ClassVar[dict[str, animation_move_]]  # value = {'animation_move_x': <animation_move_.animation_move_x: 1>, 'animation_move_y': <animation_move_.animation_move_y: 2>}
    animation_move_x: typing.ClassVar[animation_move_]  # value = <animation_move_.animation_move_x: 1>
    animation_move_y: typing.ClassVar[animation_move_]  # value = <animation_move_.animation_move_y: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class bkObject_align_flag_:
    """
    Members:
    
      bkObject_align_flag_no
    
      bkObject_align_flag_left
    
      bkObject_align_flag_top
    
      bkObject_align_flag_right
    
      bkObject_align_flag_bottom
    
      bkObject_align_flag_center
    
      bkObject_align_flag_center_v
    """
    __members__: typing.ClassVar[dict[str, bkObject_align_flag_]]  # value = {'bkObject_align_flag_no': <bkObject_align_flag_.bkObject_align_flag_no: 0>, 'bkObject_align_flag_left': <bkObject_align_flag_.bkObject_align_flag_left: 1>, 'bkObject_align_flag_top': <bkObject_align_flag_.bkObject_align_flag_top: 2>, 'bkObject_align_flag_right': <bkObject_align_flag_.bkObject_align_flag_right: 4>, 'bkObject_align_flag_bottom': <bkObject_align_flag_.bkObject_align_flag_bottom: 8>, 'bkObject_align_flag_center': <bkObject_align_flag_.bkObject_align_flag_center: 16>, 'bkObject_align_flag_center_v': <bkObject_align_flag_.bkObject_align_flag_center_v: 32>}
    bkObject_align_flag_bottom: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_bottom: 8>
    bkObject_align_flag_center: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_center: 16>
    bkObject_align_flag_center_v: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_center_v: 32>
    bkObject_align_flag_left: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_left: 1>
    bkObject_align_flag_no: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_no: 0>
    bkObject_align_flag_right: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_right: 4>
    bkObject_align_flag_top: typing.ClassVar[bkObject_align_flag_]  # value = <bkObject_align_flag_.bkObject_align_flag_top: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class borderSize_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> borderSize_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def bottomSize(self) -> int:
        ...
    @bottomSize.setter
    def bottomSize(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def leftSize(self) -> int:
        ...
    @leftSize.setter
    def leftSize(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def rightSize(self) -> int:
        ...
    @rightSize.setter
    def rightSize(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def topSize(self) -> int:
        ...
    @topSize.setter
    def topSize(self, arg0: typing.SupportsInt) -> None:
        ...
class button_icon_align_:
    """
    Members:
    
      button_icon_align_left
    
      button_icon_align_top
    
      button_icon_align_right
    
      button_icon_align_bottom
    """
    __members__: typing.ClassVar[dict[str, button_icon_align_]]  # value = {'button_icon_align_left': <button_icon_align_.button_icon_align_left: 0>, 'button_icon_align_top': <button_icon_align_.button_icon_align_top: 1>, 'button_icon_align_right': <button_icon_align_.button_icon_align_right: 2>, 'button_icon_align_bottom': <button_icon_align_.button_icon_align_bottom: 3>}
    button_icon_align_bottom: typing.ClassVar[button_icon_align_]  # value = <button_icon_align_.button_icon_align_bottom: 3>
    button_icon_align_left: typing.ClassVar[button_icon_align_]  # value = <button_icon_align_.button_icon_align_left: 0>
    button_icon_align_right: typing.ClassVar[button_icon_align_]  # value = <button_icon_align_.button_icon_align_right: 2>
    button_icon_align_top: typing.ClassVar[button_icon_align_]  # value = <button_icon_align_.button_icon_align_top: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class button_state_:
    """
    Members:
    
      button_state_leave
    
      button_state_stay
    
      button_state_down
    
      button_state_check
    
      button_state_disable
    """
    __members__: typing.ClassVar[dict[str, button_state_]]  # value = {'button_state_leave': <button_state_.button_state_leave: 0>, 'button_state_stay': <button_state_.button_state_stay: 1>, 'button_state_down': <button_state_.button_state_down: 2>, 'button_state_check': <button_state_.button_state_check: 3>, 'button_state_disable': <button_state_.button_state_disable: 4>}
    button_state_check: typing.ClassVar[button_state_]  # value = <button_state_.button_state_check: 3>
    button_state_disable: typing.ClassVar[button_state_]  # value = <button_state_.button_state_disable: 4>
    button_state_down: typing.ClassVar[button_state_]  # value = <button_state_.button_state_down: 2>
    button_state_leave: typing.ClassVar[button_state_]  # value = <button_state_.button_state_leave: 0>
    button_state_stay: typing.ClassVar[button_state_]  # value = <button_state_.button_state_stay: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class button_state_flag_:
    """
    Members:
    
      button_state_flag_leave
    
      button_state_flag_stay
    
      button_state_flag_down
    
      button_state_flag_check
    
      button_state_flag_check_no
    
      button_state_flag_WindowRestore
    
      button_state_flag_WindowMaximize
    """
    __members__: typing.ClassVar[dict[str, button_state_flag_]]  # value = {'button_state_flag_leave': <button_state_flag_.button_state_flag_leave: 16>, 'button_state_flag_stay': <button_state_flag_.button_state_flag_stay: 32>, 'button_state_flag_down': <button_state_flag_.button_state_flag_down: 64>, 'button_state_flag_check': <button_state_flag_.button_state_flag_check: 128>, 'button_state_flag_check_no': <button_state_flag_.button_state_flag_check_no: 256>, 'button_state_flag_WindowRestore': <button_state_flag_.button_state_flag_WindowRestore: 512>, 'button_state_flag_WindowMaximize': <button_state_flag_.button_state_flag_WindowMaximize: 1024>}
    button_state_flag_WindowMaximize: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_WindowMaximize: 1024>
    button_state_flag_WindowRestore: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_WindowRestore: 512>
    button_state_flag_check: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_check: 128>
    button_state_flag_check_no: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_check_no: 256>
    button_state_flag_down: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_down: 64>
    button_state_flag_leave: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_leave: 16>
    button_state_flag_stay: typing.ClassVar[button_state_flag_]  # value = <button_state_flag_.button_state_flag_stay: 32>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class chat_flag_:
    """
    Members:
    
      chat_flag_left
    
      chat_flag_right
    
      chat_flag_center
    
      chat_flag_next_row_bubble
    """
    __members__: typing.ClassVar[dict[str, chat_flag_]]  # value = {'chat_flag_left': <chat_flag_.chat_flag_left: 1>, 'chat_flag_right': <chat_flag_.chat_flag_right: 2>, 'chat_flag_center': <chat_flag_.chat_flag_center: 4>, 'chat_flag_next_row_bubble': <chat_flag_.chat_flag_next_row_bubble: 8>}
    chat_flag_center: typing.ClassVar[chat_flag_]  # value = <chat_flag_.chat_flag_center: 4>
    chat_flag_left: typing.ClassVar[chat_flag_]  # value = <chat_flag_.chat_flag_left: 1>
    chat_flag_next_row_bubble: typing.ClassVar[chat_flag_]  # value = <chat_flag_.chat_flag_next_row_bubble: 8>
    chat_flag_right: typing.ClassVar[chat_flag_]  # value = <chat_flag_.chat_flag_right: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class comboBox_state_:
    """
    Members:
    
      comboBox_state_leave
    
      comboBox_state_stay
    
      comboBox_state_down
    """
    __members__: typing.ClassVar[dict[str, comboBox_state_]]  # value = {'comboBox_state_leave': <comboBox_state_.comboBox_state_leave: 0>, 'comboBox_state_stay': <comboBox_state_.comboBox_state_stay: 1>, 'comboBox_state_down': <comboBox_state_.comboBox_state_down: 2>}
    comboBox_state_down: typing.ClassVar[comboBox_state_]  # value = <comboBox_state_.comboBox_state_down: 2>
    comboBox_state_leave: typing.ClassVar[comboBox_state_]  # value = <comboBox_state_.comboBox_state_leave: 0>
    comboBox_state_stay: typing.ClassVar[comboBox_state_]  # value = <comboBox_state_.comboBox_state_stay: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class comboBox_state_flag_:
    """
    Members:
    
      comboBox_state_flag_leave
    
      comboBox_state_flag_stay
    
      comboBox_state_flag_down
    """
    __members__: typing.ClassVar[dict[str, comboBox_state_flag_]]  # value = {'comboBox_state_flag_leave': <comboBox_state_flag_.comboBox_state_flag_leave: 16>, 'comboBox_state_flag_stay': <comboBox_state_flag_.comboBox_state_flag_stay: 32>, 'comboBox_state_flag_down': <comboBox_state_flag_.comboBox_state_flag_down: 64>}
    comboBox_state_flag_down: typing.ClassVar[comboBox_state_flag_]  # value = <comboBox_state_flag_.comboBox_state_flag_down: 64>
    comboBox_state_flag_leave: typing.ClassVar[comboBox_state_flag_]  # value = <comboBox_state_flag_.comboBox_state_flag_leave: 16>
    comboBox_state_flag_stay: typing.ClassVar[comboBox_state_flag_]  # value = <comboBox_state_flag_.comboBox_state_flag_stay: 32>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class common_state3_:
    """
    Members:
    
      common_state3_leave
    
      common_state3_stay
    
      common_state3_down
    """
    __members__: typing.ClassVar[dict[str, common_state3_]]  # value = {'common_state3_leave': <common_state3_.common_state3_leave: 0>, 'common_state3_stay': <common_state3_.common_state3_stay: 1>, 'common_state3_down': <common_state3_.common_state3_down: 2>}
    common_state3_down: typing.ClassVar[common_state3_]  # value = <common_state3_.common_state3_down: 2>
    common_state3_leave: typing.ClassVar[common_state3_]  # value = <common_state3_.common_state3_leave: 0>
    common_state3_stay: typing.ClassVar[common_state3_]  # value = <common_state3_.common_state3_stay: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ease_flag_:
    """
    Members:
    
      ease_flag_linear
    
      ease_flag_quad
    
      ease_flag_cubic
    
      ease_flag_quart
    
      ease_flag_quint
    
      ease_flag_sine
    
      ease_flag_expo
    
      ease_flag_circ
    
      ease_flag_elastic
    
      ease_flag_back
    
      ease_flag_bounce
    
      ease_flag_in
    
      ease_flag_out
    
      ease_flag_inOut
    """
    __members__: typing.ClassVar[dict[str, ease_flag_]]  # value = {'ease_flag_linear': <ease_flag_.ease_flag_linear: 0>, 'ease_flag_quad': <ease_flag_.ease_flag_quad: 1>, 'ease_flag_cubic': <ease_flag_.ease_flag_cubic: 2>, 'ease_flag_quart': <ease_flag_.ease_flag_quart: 3>, 'ease_flag_quint': <ease_flag_.ease_flag_quint: 4>, 'ease_flag_sine': <ease_flag_.ease_flag_sine: 5>, 'ease_flag_expo': <ease_flag_.ease_flag_expo: 6>, 'ease_flag_circ': <ease_flag_.ease_flag_circ: 7>, 'ease_flag_elastic': <ease_flag_.ease_flag_elastic: 8>, 'ease_flag_back': <ease_flag_.ease_flag_back: 9>, 'ease_flag_bounce': <ease_flag_.ease_flag_bounce: 10>, 'ease_flag_in': <ease_flag_.ease_flag_in: 65536>, 'ease_flag_out': <ease_flag_.ease_flag_out: 131072>, 'ease_flag_inOut': <ease_flag_.ease_flag_inOut: 196608>}
    ease_flag_back: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_back: 9>
    ease_flag_bounce: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_bounce: 10>
    ease_flag_circ: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_circ: 7>
    ease_flag_cubic: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_cubic: 2>
    ease_flag_elastic: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_elastic: 8>
    ease_flag_expo: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_expo: 6>
    ease_flag_in: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_in: 65536>
    ease_flag_inOut: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_inOut: 196608>
    ease_flag_linear: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_linear: 0>
    ease_flag_out: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_out: 131072>
    ease_flag_quad: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_quad: 1>
    ease_flag_quart: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_quart: 3>
    ease_flag_quint: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_quint: 4>
    ease_flag_sine: typing.ClassVar[ease_flag_]  # value = <ease_flag_.ease_flag_sine: 5>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ease_type_:
    """
    Members:
    
      easeIn
    
      easeOut
    
      easeInOut
    """
    __members__: typing.ClassVar[dict[str, ease_type_]]  # value = {'easeIn': <ease_type_.easeIn: 0>, 'easeOut': <ease_type_.easeOut: 1>, 'easeInOut': <ease_type_.easeInOut: 2>}
    easeIn: typing.ClassVar[ease_type_]  # value = <ease_type_.easeIn: 0>
    easeInOut: typing.ClassVar[ease_type_]  # value = <ease_type_.easeInOut: 2>
    easeOut: typing.ClassVar[ease_type_]  # value = <ease_type_.easeOut: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class edit_data_copy_:
    pStyle: edit_data_copy_style_
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> edit_data_copy_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def nCount(self) -> int:
        ...
    @nCount.setter
    def nCount(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nStyleCount(self) -> int:
        ...
    @nStyleCount.setter
    def nStyleCount(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def pData(self) -> int:
        ...
    @pData.setter
    def pData(self, arg0: typing.SupportsInt) -> None:
        ...
class edit_data_copy_style_:
    bColor: bool
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> edit_data_copy_style_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def color(self) -> int:
        ...
    @color.setter
    def color(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def hFont_image_obj(self) -> int:
        ...
    @hFont_image_obj.setter
    def hFont_image_obj(self, arg1: typing.SupportsInt) -> None:
        ...
class edit_style_info_:
    bColor: bool
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> edit_style_info_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def color(self) -> int:
        ...
    @color.setter
    def color(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def hFont_image_obj(self) -> int:
        ...
    @hFont_image_obj.setter
    def hFont_image_obj(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def nRef(self) -> int:
        ...
    @nRef.setter
    def nRef(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def type(self) -> int:
        ...
    @type.setter
    def type(self, arg0: typing.SupportsInt) -> None:
        ...
class edit_style_type_:
    """
    Members:
    
      edit_style_type_font_color
    
      edit_style_type_image
    
      edit_style_type_obj
    """
    __members__: typing.ClassVar[dict[str, edit_style_type_]]  # value = {'edit_style_type_font_color': <edit_style_type_.edit_style_type_font_color: 1>, 'edit_style_type_image': <edit_style_type_.edit_style_type_image: 2>, 'edit_style_type_obj': <edit_style_type_.edit_style_type_obj: 3>}
    edit_style_type_font_color: typing.ClassVar[edit_style_type_]  # value = <edit_style_type_.edit_style_type_font_color: 1>
    edit_style_type_image: typing.ClassVar[edit_style_type_]  # value = <edit_style_type_.edit_style_type_image: 2>
    edit_style_type_obj: typing.ClassVar[edit_style_type_]  # value = <edit_style_type_.edit_style_type_obj: 3>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class edit_textAlign_flag_:
    """
    Members:
    
      edit_textAlign_flag_left
    
      edit_textAlign_flag_right
    
      edit_textAlign_flag_center
    
      edit_textAlign_flag_top
    
      edit_textAlign_flag_bottom
    
      edit_textAlign_flag_center_v
    """
    __members__: typing.ClassVar[dict[str, edit_textAlign_flag_]]  # value = {'edit_textAlign_flag_left': <edit_textAlign_flag_.edit_textAlign_flag_left: 0>, 'edit_textAlign_flag_right': <edit_textAlign_flag_.edit_textAlign_flag_right: 1>, 'edit_textAlign_flag_center': <edit_textAlign_flag_.edit_textAlign_flag_center: 2>, 'edit_textAlign_flag_top': <edit_textAlign_flag_.edit_textAlign_flag_left: 0>, 'edit_textAlign_flag_bottom': <edit_textAlign_flag_.edit_textAlign_flag_bottom: 4>, 'edit_textAlign_flag_center_v': <edit_textAlign_flag_.edit_textAlign_flag_center_v: 8>}
    edit_textAlign_flag_bottom: typing.ClassVar[edit_textAlign_flag_]  # value = <edit_textAlign_flag_.edit_textAlign_flag_bottom: 4>
    edit_textAlign_flag_center: typing.ClassVar[edit_textAlign_flag_]  # value = <edit_textAlign_flag_.edit_textAlign_flag_center: 2>
    edit_textAlign_flag_center_v: typing.ClassVar[edit_textAlign_flag_]  # value = <edit_textAlign_flag_.edit_textAlign_flag_center_v: 8>
    edit_textAlign_flag_left: typing.ClassVar[edit_textAlign_flag_]  # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
    edit_textAlign_flag_right: typing.ClassVar[edit_textAlign_flag_]  # value = <edit_textAlign_flag_.edit_textAlign_flag_right: 1>
    edit_textAlign_flag_top: typing.ClassVar[edit_textAlign_flag_]  # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class edit_type_:
    """
    Members:
    
      edit_type_none
    
      edit_type_editor
    
      edit_type_richedit
    
      edit_type_chat
    
      edit_type_codeTable
    """
    __members__: typing.ClassVar[dict[str, edit_type_]]  # value = {'edit_type_none': <edit_type_.edit_type_none: 0>, 'edit_type_editor': <edit_type_.edit_type_editor: 1>, 'edit_type_richedit': <edit_type_.edit_type_richedit: 2>, 'edit_type_chat': <edit_type_.edit_type_chat: 3>, 'edit_type_codeTable': <edit_type_.edit_type_codeTable: 4>}
    edit_type_chat: typing.ClassVar[edit_type_]  # value = <edit_type_.edit_type_chat: 3>
    edit_type_codeTable: typing.ClassVar[edit_type_]  # value = <edit_type_.edit_type_codeTable: 4>
    edit_type_editor: typing.ClassVar[edit_type_]  # value = <edit_type_.edit_type_editor: 1>
    edit_type_none: typing.ClassVar[edit_type_]  # value = <edit_type_.edit_type_none: 0>
    edit_type_richedit: typing.ClassVar[edit_type_]  # value = <edit_type_.edit_type_richedit: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class editor_color_:
    bAlignLineArrow: bool
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> editor_color_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def StylePunctuation(self) -> int:
        ...
    @StylePunctuation.setter
    def StylePunctuation(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrAlignLine(self) -> int:
        ...
    @clrAlignLine.setter
    def clrAlignLine(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrAlignLineSel(self) -> int:
        ...
    @clrAlignLineSel.setter
    def clrAlignLineSel(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrCurRowFull(self) -> int:
        ...
    @clrCurRowFull.setter
    def clrCurRowFull(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrFunSplitLine(self) -> int:
        ...
    @clrFunSplitLine.setter
    def clrFunSplitLine(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin1(self) -> int:
        ...
    @clrMargin1.setter
    def clrMargin1(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin2(self) -> int:
        ...
    @clrMargin2.setter
    def clrMargin2(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin_breakpoint(self) -> int:
        ...
    @clrMargin_breakpoint.setter
    def clrMargin_breakpoint(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin_breakpointBorder(self) -> int:
        ...
    @clrMargin_breakpointBorder.setter
    def clrMargin_breakpointBorder(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin_curRow(self) -> int:
        ...
    @clrMargin_curRow.setter
    def clrMargin_curRow(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin_error(self) -> int:
        ...
    @clrMargin_error.setter
    def clrMargin_error(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin_runRowArrow(self) -> int:
        ...
    @clrMargin_runRowArrow.setter
    def clrMargin_runRowArrow(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMargin_text(self) -> int:
        ...
    @clrMargin_text.setter
    def clrMargin_text(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def clrMatchSel(self) -> int:
        ...
    @clrMatchSel.setter
    def clrMatchSel(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleClass(self) -> int:
        ...
    @styleClass.setter
    def styleClass(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleComment(self) -> int:
        ...
    @styleComment.setter
    def styleComment(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleDataType(self) -> int:
        ...
    @styleDataType.setter
    def styleDataType(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleEnum(self) -> int:
        ...
    @styleEnum.setter
    def styleEnum(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleFunction(self) -> int:
        ...
    @styleFunction.setter
    def styleFunction(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleMacro(self) -> int:
        ...
    @styleMacro.setter
    def styleMacro(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleNumber(self) -> int:
        ...
    @styleNumber.setter
    def styleNumber(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleString(self) -> int:
        ...
    @styleString.setter
    def styleString(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleSys(self) -> int:
        ...
    @styleSys.setter
    def styleSys(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def styleVar(self) -> int:
        ...
    @styleVar.setter
    def styleVar(self, arg0: typing.SupportsInt) -> None:
        ...
class element_position_:
    """
    Members:
    
      element_position_no
    
      element_position_left
    
      element_position_top
    
      element_position_right
    
      element_position_bottom
    """
    __members__: typing.ClassVar[dict[str, element_position_]]  # value = {'element_position_no': <element_position_.element_position_no: 0>, 'element_position_left': <element_position_.element_position_left: 1>, 'element_position_top': <element_position_.element_position_top: 2>, 'element_position_right': <element_position_.element_position_right: 4>, 'element_position_bottom': <element_position_.element_position_bottom: 8>}
    element_position_bottom: typing.ClassVar[element_position_]  # value = <element_position_.element_position_bottom: 8>
    element_position_left: typing.ClassVar[element_position_]  # value = <element_position_.element_position_left: 1>
    element_position_no: typing.ClassVar[element_position_]  # value = <element_position_.element_position_no: 0>
    element_position_right: typing.ClassVar[element_position_]  # value = <element_position_.element_position_right: 4>
    element_position_top: typing.ClassVar[element_position_]  # value = <element_position_.element_position_top: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class element_state_flag_:
    """
    Members:
    
      element_state_flag_nothing
    
      element_state_flag_enable
    
      element_state_flag_disable
    
      element_state_flag_focus
    
      element_state_flag_focus_no
    
      element_state_flag_focusEx
    
      element_state_flag_focusEx_no
    
      layout_state_flag_layout_body
    
      element_state_flag_leave
    
      element_state_flag_stay
    
      element_state_flag_down
    """
    __members__: typing.ClassVar[dict[str, element_state_flag_]]  # value = {'element_state_flag_nothing': <element_state_flag_.element_state_flag_nothing: 0>, 'element_state_flag_enable': <element_state_flag_.element_state_flag_enable: 1>, 'element_state_flag_disable': <element_state_flag_.element_state_flag_disable: 2>, 'element_state_flag_focus': <element_state_flag_.element_state_flag_focus: 4>, 'element_state_flag_focus_no': <element_state_flag_.element_state_flag_focus_no: 8>, 'element_state_flag_focusEx': <element_state_flag_.element_state_flag_focusEx: 1073741824>, 'element_state_flag_focusEx_no': <element_state_flag_.element_state_flag_focusEx_no: -2147483648>, 'layout_state_flag_layout_body': <element_state_flag_.layout_state_flag_layout_body: 536870912>, 'element_state_flag_leave': <element_state_flag_.element_state_flag_leave: 16>, 'element_state_flag_stay': <element_state_flag_.element_state_flag_stay: 32>, 'element_state_flag_down': <element_state_flag_.element_state_flag_down: 64>}
    element_state_flag_disable: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_disable: 2>
    element_state_flag_down: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_down: 64>
    element_state_flag_enable: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_enable: 1>
    element_state_flag_focus: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_focus: 4>
    element_state_flag_focusEx: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_focusEx: 1073741824>
    element_state_flag_focusEx_no: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_focusEx_no: -2147483648>
    element_state_flag_focus_no: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_focus_no: 8>
    element_state_flag_leave: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_leave: 16>
    element_state_flag_nothing: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_nothing: 0>
    element_state_flag_stay: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.element_state_flag_stay: 32>
    layout_state_flag_layout_body: typing.ClassVar[element_state_flag_]  # value = <element_state_flag_.layout_state_flag_layout_body: 536870912>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class fontStyle_:
    """
    Members:
    
      fontStyle_regular
    
      fontStyle_bold
    
      fontStyle_italic
    
      fontStyle_boldItalic
    
      fontStyle_underline
    
      fontStyle_strikeout
    """
    __members__: typing.ClassVar[dict[str, fontStyle_]]  # value = {'fontStyle_regular': <fontStyle_.fontStyle_regular: 0>, 'fontStyle_bold': <fontStyle_.fontStyle_bold: 1>, 'fontStyle_italic': <fontStyle_.fontStyle_italic: 2>, 'fontStyle_boldItalic': <fontStyle_.fontStyle_boldItalic: 3>, 'fontStyle_underline': <fontStyle_.fontStyle_underline: 4>, 'fontStyle_strikeout': <fontStyle_.fontStyle_strikeout: 8>}
    fontStyle_bold: typing.ClassVar[fontStyle_]  # value = <fontStyle_.fontStyle_bold: 1>
    fontStyle_boldItalic: typing.ClassVar[fontStyle_]  # value = <fontStyle_.fontStyle_boldItalic: 3>
    fontStyle_italic: typing.ClassVar[fontStyle_]  # value = <fontStyle_.fontStyle_italic: 2>
    fontStyle_regular: typing.ClassVar[fontStyle_]  # value = <fontStyle_.fontStyle_regular: 0>
    fontStyle_strikeout: typing.ClassVar[fontStyle_]  # value = <fontStyle_.fontStyle_strikeout: 8>
    fontStyle_underline: typing.ClassVar[fontStyle_]  # value = <fontStyle_.fontStyle_underline: 4>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class font_info_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> font_info_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def nSize(self) -> int:
        ...
    @nSize.setter
    def nSize(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nStyle(self) -> int:
        ...
    @nStyle.setter
    def nStyle(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def name(self) -> str:
        ...
class frameWnd_cell_type_:
    """
    Members:
    
      frameWnd_cell_type_no
    
      frameWnd_cell_type_pane
    
      frameWnd_cell_type_group
    
      frameWnd_cell_type_bodyView
    
      frameWnd_cell_type_top_bottom
    
      frameWnd_cell_type_left_right
    """
    __members__: typing.ClassVar[dict[str, frameWnd_cell_type_]]  # value = {'frameWnd_cell_type_no': <frameWnd_cell_type_.frameWnd_cell_type_no: 0>, 'frameWnd_cell_type_pane': <frameWnd_cell_type_.frameWnd_cell_type_pane: 1>, 'frameWnd_cell_type_group': <frameWnd_cell_type_.frameWnd_cell_type_group: 2>, 'frameWnd_cell_type_bodyView': <frameWnd_cell_type_.frameWnd_cell_type_bodyView: 3>, 'frameWnd_cell_type_top_bottom': <frameWnd_cell_type_.frameWnd_cell_type_top_bottom: 4>, 'frameWnd_cell_type_left_right': <frameWnd_cell_type_.frameWnd_cell_type_left_right: 5>}
    frameWnd_cell_type_bodyView: typing.ClassVar[frameWnd_cell_type_]  # value = <frameWnd_cell_type_.frameWnd_cell_type_bodyView: 3>
    frameWnd_cell_type_group: typing.ClassVar[frameWnd_cell_type_]  # value = <frameWnd_cell_type_.frameWnd_cell_type_group: 2>
    frameWnd_cell_type_left_right: typing.ClassVar[frameWnd_cell_type_]  # value = <frameWnd_cell_type_.frameWnd_cell_type_left_right: 5>
    frameWnd_cell_type_no: typing.ClassVar[frameWnd_cell_type_]  # value = <frameWnd_cell_type_.frameWnd_cell_type_no: 0>
    frameWnd_cell_type_pane: typing.ClassVar[frameWnd_cell_type_]  # value = <frameWnd_cell_type_.frameWnd_cell_type_pane: 1>
    frameWnd_cell_type_top_bottom: typing.ClassVar[frameWnd_cell_type_]  # value = <frameWnd_cell_type_.frameWnd_cell_type_top_bottom: 4>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class image_draw_type_:
    """
    Members:
    
      image_draw_type_default
    
      image_draw_type_stretch
    
      image_draw_type_adaptive
    
      image_draw_type_tile
    
      image_draw_type_fixed_ratio
    
      image_draw_type_adaptive_border
    """
    __members__: typing.ClassVar[dict[str, image_draw_type_]]  # value = {'image_draw_type_default': <image_draw_type_.image_draw_type_default: 0>, 'image_draw_type_stretch': <image_draw_type_.image_draw_type_stretch: 1>, 'image_draw_type_adaptive': <image_draw_type_.image_draw_type_adaptive: 2>, 'image_draw_type_tile': <image_draw_type_.image_draw_type_tile: 3>, 'image_draw_type_fixed_ratio': <image_draw_type_.image_draw_type_fixed_ratio: 4>, 'image_draw_type_adaptive_border': <image_draw_type_.image_draw_type_adaptive_border: 5>}
    image_draw_type_adaptive: typing.ClassVar[image_draw_type_]  # value = <image_draw_type_.image_draw_type_adaptive: 2>
    image_draw_type_adaptive_border: typing.ClassVar[image_draw_type_]  # value = <image_draw_type_.image_draw_type_adaptive_border: 5>
    image_draw_type_default: typing.ClassVar[image_draw_type_]  # value = <image_draw_type_.image_draw_type_default: 0>
    image_draw_type_fixed_ratio: typing.ClassVar[image_draw_type_]  # value = <image_draw_type_.image_draw_type_fixed_ratio: 4>
    image_draw_type_stretch: typing.ClassVar[image_draw_type_]  # value = <image_draw_type_.image_draw_type_stretch: 1>
    image_draw_type_tile: typing.ClassVar[image_draw_type_]  # value = <image_draw_type_.image_draw_type_tile: 3>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class layout_align_:
    """
    Members:
    
      layout_align_left
    
      layout_align_top
    
      layout_align_right
    
      layout_align_bottom
    
      layout_align_center
    
      layout_align_equidistant
    """
    __members__: typing.ClassVar[dict[str, layout_align_]]  # value = {'layout_align_left': <layout_align_.layout_align_left: 0>, 'layout_align_top': <layout_align_.layout_align_top: 1>, 'layout_align_right': <layout_align_.layout_align_right: 2>, 'layout_align_bottom': <layout_align_.layout_align_bottom: 3>, 'layout_align_center': <layout_align_.layout_align_center: 4>, 'layout_align_equidistant': <layout_align_.layout_align_equidistant: 5>}
    layout_align_bottom: typing.ClassVar[layout_align_]  # value = <layout_align_.layout_align_bottom: 3>
    layout_align_center: typing.ClassVar[layout_align_]  # value = <layout_align_.layout_align_center: 4>
    layout_align_equidistant: typing.ClassVar[layout_align_]  # value = <layout_align_.layout_align_equidistant: 5>
    layout_align_left: typing.ClassVar[layout_align_]  # value = <layout_align_.layout_align_left: 0>
    layout_align_right: typing.ClassVar[layout_align_]  # value = <layout_align_.layout_align_right: 2>
    layout_align_top: typing.ClassVar[layout_align_]  # value = <layout_align_.layout_align_top: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class layout_align_axis_:
    """
    Members:
    
      layout_align_axis_auto
    
      layout_align_axis_start
    
      layout_align_axis_center
    
      layout_align_axis_end
    """
    __members__: typing.ClassVar[dict[str, layout_align_axis_]]  # value = {'layout_align_axis_auto': <layout_align_axis_.layout_align_axis_auto: 0>, 'layout_align_axis_start': <layout_align_axis_.layout_align_axis_start: 1>, 'layout_align_axis_center': <layout_align_axis_.layout_align_axis_center: 2>, 'layout_align_axis_end': <layout_align_axis_.layout_align_axis_end: 3>}
    layout_align_axis_auto: typing.ClassVar[layout_align_axis_]  # value = <layout_align_axis_.layout_align_axis_auto: 0>
    layout_align_axis_center: typing.ClassVar[layout_align_axis_]  # value = <layout_align_axis_.layout_align_axis_center: 2>
    layout_align_axis_end: typing.ClassVar[layout_align_axis_]  # value = <layout_align_axis_.layout_align_axis_end: 3>
    layout_align_axis_start: typing.ClassVar[layout_align_axis_]  # value = <layout_align_axis_.layout_align_axis_start: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class layout_size_:
    """
    Members:
    
      layout_size_fixed
    
      layout_size_fill
    
      layout_size_auto
    
      layout_size_weight
    
      layout_size_percent
    
      layout_size_disable
    """
    __members__: typing.ClassVar[dict[str, layout_size_]]  # value = {'layout_size_fixed': <layout_size_.layout_size_fixed: 0>, 'layout_size_fill': <layout_size_.layout_size_fill: 1>, 'layout_size_auto': <layout_size_.layout_size_auto: 2>, 'layout_size_weight': <layout_size_.layout_size_weight: 3>, 'layout_size_percent': <layout_size_.layout_size_percent: 4>, 'layout_size_disable': <layout_size_.layout_size_disable: 5>}
    layout_size_auto: typing.ClassVar[layout_size_]  # value = <layout_size_.layout_size_auto: 2>
    layout_size_disable: typing.ClassVar[layout_size_]  # value = <layout_size_.layout_size_disable: 5>
    layout_size_fill: typing.ClassVar[layout_size_]  # value = <layout_size_.layout_size_fill: 1>
    layout_size_fixed: typing.ClassVar[layout_size_]  # value = <layout_size_.layout_size_fixed: 0>
    layout_size_percent: typing.ClassVar[layout_size_]  # value = <layout_size_.layout_size_percent: 4>
    layout_size_weight: typing.ClassVar[layout_size_]  # value = <layout_size_.layout_size_weight: 3>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class layout_state_flag_:
    """
    Members:
    
      layout_state_flag_nothing
    
      layout_state_flag_full
    
      layout_state_flag_body
    """
    __members__: typing.ClassVar[dict[str, layout_state_flag_]]  # value = {'layout_state_flag_nothing': <layout_state_flag_.layout_state_flag_nothing: 0>, 'layout_state_flag_full': <layout_state_flag_.layout_state_flag_full: 1>, 'layout_state_flag_body': <layout_state_flag_.layout_state_flag_body: 2>}
    layout_state_flag_body: typing.ClassVar[layout_state_flag_]  # value = <layout_state_flag_.layout_state_flag_body: 2>
    layout_state_flag_full: typing.ClassVar[layout_state_flag_]  # value = <layout_state_flag_.layout_state_flag_full: 1>
    layout_state_flag_nothing: typing.ClassVar[layout_state_flag_]  # value = <layout_state_flag_.layout_state_flag_nothing: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class listBox_item_:
    nState: list_item_state_
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> listBox_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hLayout(self) -> int:
        ...
    @hLayout.setter
    def hLayout(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hTemp(self) -> int:
        ...
    @hTemp.setter
    def hTemp(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def index(self) -> int:
        ...
    @index.setter
    def index(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nHeight(self) -> int:
        ...
    @nHeight.setter
    def nHeight(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nSelHeight(self) -> int:
        ...
    @nSelHeight.setter
    def nSelHeight(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class listBox_item_info_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> listBox_item_info_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def nHeight(self) -> int:
        ...
    @nHeight.setter
    def nHeight(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nSelHeight(self) -> int:
        ...
    @nSelHeight.setter
    def nSelHeight(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class listBox_state_flag_:
    """
    Members:
    
      listBox_state_flag_item_leave
    
      listBox_state_flag_item_stay
    
      listBox_state_flag_item_select
    
      listBox_state_flag_item_select_no
    """
    __members__: typing.ClassVar[dict[str, listBox_state_flag_]]  # value = {'listBox_state_flag_item_leave': <listBox_state_flag_.listBox_state_flag_item_leave: 128>, 'listBox_state_flag_item_stay': <listBox_state_flag_.listBox_state_flag_item_stay: 256>, 'listBox_state_flag_item_select': <listBox_state_flag_.listBox_state_flag_item_select: 512>, 'listBox_state_flag_item_select_no': <listBox_state_flag_.listBox_state_flag_item_select_no: 1024>}
    listBox_state_flag_item_leave: typing.ClassVar[listBox_state_flag_]  # value = <listBox_state_flag_.listBox_state_flag_item_leave: 128>
    listBox_state_flag_item_select: typing.ClassVar[listBox_state_flag_]  # value = <listBox_state_flag_.listBox_state_flag_item_select: 512>
    listBox_state_flag_item_select_no: typing.ClassVar[listBox_state_flag_]  # value = <listBox_state_flag_.listBox_state_flag_item_select_no: 1024>
    listBox_state_flag_item_stay: typing.ClassVar[listBox_state_flag_]  # value = <listBox_state_flag_.listBox_state_flag_item_stay: 256>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class listHeader_state_flag_:
    """
    Members:
    
      listHeader_state_flag_item_leave
    
      listHeader_state_flag_item_stay
    
      listHeader_state_flag_item_down
    """
    __members__: typing.ClassVar[dict[str, listHeader_state_flag_]]  # value = {'listHeader_state_flag_item_leave': <listHeader_state_flag_.listHeader_state_flag_item_leave: 128>, 'listHeader_state_flag_item_stay': <listHeader_state_flag_.listHeader_state_flag_item_stay: 256>, 'listHeader_state_flag_item_down': <listHeader_state_flag_.listHeader_state_flag_item_down: 512>}
    listHeader_state_flag_item_down: typing.ClassVar[listHeader_state_flag_]  # value = <listHeader_state_flag_.listHeader_state_flag_item_down: 512>
    listHeader_state_flag_item_leave: typing.ClassVar[listHeader_state_flag_]  # value = <listHeader_state_flag_.listHeader_state_flag_item_leave: 128>
    listHeader_state_flag_item_stay: typing.ClassVar[listHeader_state_flag_]  # value = <listHeader_state_flag_.listHeader_state_flag_item_stay: 256>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class listItemTemp_type_:
    """
    Members:
    
      listItemTemp_type_tree
    
      listItemTemp_type_listBox
    
      listItemTemp_type_list_head
    
      listItemTemp_type_list_item
    
      listItemTemp_type_listView_group
    
      listItemTemp_type_listView_item
    
      listItemTemp_type_list
    
      listItemTemp_type_listView
    """
    __members__: typing.ClassVar[dict[str, listItemTemp_type_]]  # value = {'listItemTemp_type_tree': <listItemTemp_type_.listItemTemp_type_tree: 1>, 'listItemTemp_type_listBox': <listItemTemp_type_.listItemTemp_type_listBox: 2>, 'listItemTemp_type_list_head': <listItemTemp_type_.listItemTemp_type_list_head: 4>, 'listItemTemp_type_list_item': <listItemTemp_type_.listItemTemp_type_list_item: 8>, 'listItemTemp_type_listView_group': <listItemTemp_type_.listItemTemp_type_listView_group: 16>, 'listItemTemp_type_listView_item': <listItemTemp_type_.listItemTemp_type_listView_item: 32>, 'listItemTemp_type_list': <listItemTemp_type_.listItemTemp_type_list: 12>, 'listItemTemp_type_listView': <listItemTemp_type_.listItemTemp_type_listView: 48>}
    listItemTemp_type_list: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_list: 12>
    listItemTemp_type_listBox: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_listBox: 2>
    listItemTemp_type_listView: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_listView: 48>
    listItemTemp_type_listView_group: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_listView_group: 16>
    listItemTemp_type_listView_item: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_listView_item: 32>
    listItemTemp_type_list_head: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_list_head: 4>
    listItemTemp_type_list_item: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_list_item: 8>
    listItemTemp_type_tree: typing.ClassVar[listItemTemp_type_]  # value = <listItemTemp_type_.listItemTemp_type_tree: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class listView_item_:
    nState: list_item_state_
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> listView_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hLayout(self) -> int:
        ...
    @hLayout.setter
    def hLayout(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hTemp(self) -> int:
        ...
    @hTemp.setter
    def hTemp(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def iGroup(self) -> int:
        ...
    @iGroup.setter
    def iGroup(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def iItem(self) -> int:
        ...
    @iItem.setter
    def iItem(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class listView_item_id_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> listView_item_id_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def iGroup(self) -> int:
        ...
    @iGroup.setter
    def iGroup(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def iItem(self) -> int:
        ...
    @iItem.setter
    def iItem(self, arg0: typing.SupportsInt) -> None:
        ...
class listView_state_flag_:
    """
    Members:
    
      listView_state_flag_item_leave
    
      listView_state_flag_item_stay
    
      listView_state_flag_item_select
    
      listView_state_flag_item_select_no
    
      listView_state_flag_group_leave
    
      listView_state_flag_group_stay
    
      listView_state_flag_group_select
    
      listView_state_flag_group_select_no
    """
    __members__: typing.ClassVar[dict[str, listView_state_flag_]]  # value = {'listView_state_flag_item_leave': <listView_state_flag_.listView_state_flag_item_leave: 128>, 'listView_state_flag_item_stay': <listView_state_flag_.listView_state_flag_item_stay: 256>, 'listView_state_flag_item_select': <listView_state_flag_.listView_state_flag_item_select: 512>, 'listView_state_flag_item_select_no': <listView_state_flag_.listView_state_flag_item_select_no: 1024>, 'listView_state_flag_group_leave': <listView_state_flag_.listView_state_flag_group_leave: 2048>, 'listView_state_flag_group_stay': <listView_state_flag_.listView_state_flag_group_stay: 4096>, 'listView_state_flag_group_select': <listView_state_flag_.listView_state_flag_group_select: 8192>, 'listView_state_flag_group_select_no': <listView_state_flag_.listView_state_flag_group_select_no: 16384>}
    listView_state_flag_group_leave: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_group_leave: 2048>
    listView_state_flag_group_select: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_group_select: 8192>
    listView_state_flag_group_select_no: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_group_select_no: 16384>
    listView_state_flag_group_stay: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_group_stay: 4096>
    listView_state_flag_item_leave: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_item_leave: 128>
    listView_state_flag_item_select: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_item_select: 512>
    listView_state_flag_item_select_no: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_item_select_no: 1024>
    listView_state_flag_item_stay: typing.ClassVar[listView_state_flag_]  # value = <listView_state_flag_.listView_state_flag_item_stay: 256>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class list_drawItemBk_flag_:
    """
    Members:
    
      list_drawItemBk_flag_nothing
    
      list_drawItemBk_flag_leave
    
      list_drawItemBk_flag_stay
    
      list_drawItemBk_flag_select
    
      list_drawItemBk_flag_group_leave
    
      list_drawItemBk_flag_group_stay
    
      list_drawItemBk_flag_line
    
      list_drawItemBk_flag_lineV
    """
    __members__: typing.ClassVar[dict[str, list_drawItemBk_flag_]]  # value = {'list_drawItemBk_flag_nothing': <list_drawItemBk_flag_.list_drawItemBk_flag_nothing: 0>, 'list_drawItemBk_flag_leave': <list_drawItemBk_flag_.list_drawItemBk_flag_leave: 1>, 'list_drawItemBk_flag_stay': <list_drawItemBk_flag_.list_drawItemBk_flag_stay: 2>, 'list_drawItemBk_flag_select': <list_drawItemBk_flag_.list_drawItemBk_flag_select: 4>, 'list_drawItemBk_flag_group_leave': <list_drawItemBk_flag_.list_drawItemBk_flag_group_leave: 8>, 'list_drawItemBk_flag_group_stay': <list_drawItemBk_flag_.list_drawItemBk_flag_group_stay: 16>, 'list_drawItemBk_flag_line': <list_drawItemBk_flag_.list_drawItemBk_flag_line: 32>, 'list_drawItemBk_flag_lineV': <list_drawItemBk_flag_.list_drawItemBk_flag_lineV: 64>}
    list_drawItemBk_flag_group_leave: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_leave: 8>
    list_drawItemBk_flag_group_stay: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_stay: 16>
    list_drawItemBk_flag_leave: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_leave: 1>
    list_drawItemBk_flag_line: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_line: 32>
    list_drawItemBk_flag_lineV: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_lineV: 64>
    list_drawItemBk_flag_nothing: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_nothing: 0>
    list_drawItemBk_flag_select: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_select: 4>
    list_drawItemBk_flag_stay: typing.ClassVar[list_drawItemBk_flag_]  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_stay: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class list_header_item_:
    bSort: bool
    nState: common_state3_
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> list_header_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hLayout(self) -> int:
        ...
    @hLayout.setter
    def hLayout(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hTemp(self) -> int:
        ...
    @hTemp.setter
    def hTemp(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def iColumnAdapter(self) -> int:
        ...
    @iColumnAdapter.setter
    def iColumnAdapter(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def index(self) -> int:
        ...
    @index.setter
    def index(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nSortType(self) -> int:
        ...
    @nSortType.setter
    def nSortType(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class list_item_:
    nState: list_item_state_
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> list_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hLayout(self) -> int:
        ...
    @hLayout.setter
    def hLayout(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hTemp(self) -> int:
        ...
    @hTemp.setter
    def hTemp(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def iSubItem(self) -> int:
        ...
    @iSubItem.setter
    def iSubItem(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def index(self) -> int:
        ...
    @index.setter
    def index(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class list_item_state_:
    """
    Members:
    
      list_item_state_leave
    
      list_item_state_stay
    
      list_item_state_select
    
      list_item_state_cache
    """
    __members__: typing.ClassVar[dict[str, list_item_state_]]  # value = {'list_item_state_leave': <list_item_state_.list_item_state_leave: 0>, 'list_item_state_stay': <list_item_state_.list_item_state_stay: 1>, 'list_item_state_select': <list_item_state_.list_item_state_select: 2>, 'list_item_state_cache': <list_item_state_.list_item_state_cache: 3>}
    list_item_state_cache: typing.ClassVar[list_item_state_]  # value = <list_item_state_.list_item_state_cache: 3>
    list_item_state_leave: typing.ClassVar[list_item_state_]  # value = <list_item_state_.list_item_state_leave: 0>
    list_item_state_select: typing.ClassVar[list_item_state_]  # value = <list_item_state_.list_item_state_select: 2>
    list_item_state_stay: typing.ClassVar[list_item_state_]  # value = <list_item_state_.list_item_state_stay: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class list_state_flag_:
    """
    Members:
    
      list_state_flag_item_leave
    
      list_state_flag_item_stay
    
      list_state_flag_item_select
    
      list_state_flag_item_select_no
    """
    __members__: typing.ClassVar[dict[str, list_state_flag_]]  # value = {'list_state_flag_item_leave': <list_state_flag_.list_state_flag_item_leave: 128>, 'list_state_flag_item_stay': <list_state_flag_.list_state_flag_item_stay: 256>, 'list_state_flag_item_select': <list_state_flag_.list_state_flag_item_select: 512>, 'list_state_flag_item_select_no': <list_state_flag_.list_state_flag_item_select_no: 1024>}
    list_state_flag_item_leave: typing.ClassVar[list_state_flag_]  # value = <list_state_flag_.list_state_flag_item_leave: 128>
    list_state_flag_item_select: typing.ClassVar[list_state_flag_]  # value = <list_state_flag_.list_state_flag_item_select: 512>
    list_state_flag_item_select_no: typing.ClassVar[list_state_flag_]  # value = <list_state_flag_.list_state_flag_item_select_no: 1024>
    list_state_flag_item_stay: typing.ClassVar[list_state_flag_]  # value = <list_state_flag_.list_state_flag_item_stay: 256>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class menu_drawBackground_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> menu_drawBackground_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hMenu(self) -> int:
        ...
    @hMenu.setter
    def hMenu(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hWindow(self) -> int:
        ...
    @hWindow.setter
    def hWindow(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def nParentID(self) -> int:
        ...
    @nParentID.setter
    def nParentID(self, arg0: typing.SupportsInt) -> None:
        ...
class menu_drawItem_:
    pText: str
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> menu_drawItem_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hIcon(self) -> int:
        ...
    @hIcon.setter
    def hIcon(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hMenu(self) -> int:
        ...
    @hMenu.setter
    def hMenu(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hWindow(self) -> int:
        ...
    @hWindow.setter
    def hWindow(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def nID(self) -> int:
        ...
    @nID.setter
    def nID(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nShortcutKeyWidth(self) -> int:
        ...
    @nShortcutKeyWidth.setter
    def nShortcutKeyWidth(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nState(self) -> int:
        ...
    @nState.setter
    def nState(self, arg0: typing.SupportsInt) -> None:
        ...
class menu_item_flag_:
    """
    Members:
    
      menu_item_flag_normal
    
      menu_item_flag_select
    
      menu_item_flag_stay
    
      menu_item_flag_check
    
      menu_item_flag_popup
    
      menu_item_flag_separator
    
      menu_item_flag_disable
    """
    __members__: typing.ClassVar[dict[str, menu_item_flag_]]  # value = {'menu_item_flag_normal': <menu_item_flag_.menu_item_flag_normal: 0>, 'menu_item_flag_select': <menu_item_flag_.menu_item_flag_select: 1>, 'menu_item_flag_stay': <menu_item_flag_.menu_item_flag_select: 1>, 'menu_item_flag_check': <menu_item_flag_.menu_item_flag_check: 2>, 'menu_item_flag_popup': <menu_item_flag_.menu_item_flag_popup: 4>, 'menu_item_flag_separator': <menu_item_flag_.menu_item_flag_separator: 8>, 'menu_item_flag_disable': <menu_item_flag_.menu_item_flag_disable: 16>}
    menu_item_flag_check: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_check: 2>
    menu_item_flag_disable: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_disable: 16>
    menu_item_flag_normal: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_normal: 0>
    menu_item_flag_popup: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_popup: 4>
    menu_item_flag_select: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_select: 1>
    menu_item_flag_separator: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_separator: 8>
    menu_item_flag_stay: typing.ClassVar[menu_item_flag_]  # value = <menu_item_flag_.menu_item_flag_select: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class menu_popupWnd_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> menu_popupWnd_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hWindow(self) -> int:
        ...
    @hWindow.setter
    def hWindow(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def nParentID(self) -> int:
        ...
    @nParentID.setter
    def nParentID(self, arg0: typing.SupportsInt) -> None:
        ...
class menu_popup_position_:
    """
    Members:
    
      menu_popup_position_left_top
    
      menu_popup_position_left_bottom
    
      menu_popup_position_right_top
    
      menu_popup_position_right_bottom
    
      menu_popup_position_center_left
    
      menu_popup_position_center_top
    
      menu_popup_position_center_right
    
      menu_popup_position_center_bottom
    """
    __members__: typing.ClassVar[dict[str, menu_popup_position_]]  # value = {'menu_popup_position_left_top': <menu_popup_position_.menu_popup_position_left_top: 0>, 'menu_popup_position_left_bottom': <menu_popup_position_.menu_popup_position_left_bottom: 1>, 'menu_popup_position_right_top': <menu_popup_position_.menu_popup_position_right_top: 2>, 'menu_popup_position_right_bottom': <menu_popup_position_.menu_popup_position_right_bottom: 3>, 'menu_popup_position_center_left': <menu_popup_position_.menu_popup_position_center_left: 4>, 'menu_popup_position_center_top': <menu_popup_position_.menu_popup_position_center_top: 5>, 'menu_popup_position_center_right': <menu_popup_position_.menu_popup_position_center_right: 6>, 'menu_popup_position_center_bottom': <menu_popup_position_.menu_popup_position_center_bottom: 7>}
    menu_popup_position_center_bottom: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_center_bottom: 7>
    menu_popup_position_center_left: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_center_left: 4>
    menu_popup_position_center_right: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_center_right: 6>
    menu_popup_position_center_top: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_center_top: 5>
    menu_popup_position_left_bottom: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_left_bottom: 1>
    menu_popup_position_left_top: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_left_top: 0>
    menu_popup_position_right_bottom: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_right_bottom: 3>
    menu_popup_position_right_top: typing.ClassVar[menu_popup_position_]  # value = <menu_popup_position_.menu_popup_position_right_top: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class messageBox_flag_:
    """
    Members:
    
      messageBox_flag_other
    
      messageBox_flag_ok
    
      messageBox_flag_cancel
    
      messageBox_flag_icon_appicon
    
      messageBox_flag_icon_info
    
      messageBox_flag_icon_qustion
    
      messageBox_flag_icon_error
    
      messageBox_flag_icon_warning
    
      messageBox_flag_icon_shield
    """
    __members__: typing.ClassVar[dict[str, messageBox_flag_]]  # value = {'messageBox_flag_other': <messageBox_flag_.messageBox_flag_other: 0>, 'messageBox_flag_ok': <messageBox_flag_.messageBox_flag_ok: 1>, 'messageBox_flag_cancel': <messageBox_flag_.messageBox_flag_cancel: 2>, 'messageBox_flag_icon_appicon': <messageBox_flag_.messageBox_flag_icon_appicon: 4096>, 'messageBox_flag_icon_info': <messageBox_flag_.messageBox_flag_icon_info: 8192>, 'messageBox_flag_icon_qustion': <messageBox_flag_.messageBox_flag_icon_qustion: 16384>, 'messageBox_flag_icon_error': <messageBox_flag_.messageBox_flag_icon_error: 32768>, 'messageBox_flag_icon_warning': <messageBox_flag_.messageBox_flag_icon_warning: 65536>, 'messageBox_flag_icon_shield': <messageBox_flag_.messageBox_flag_icon_shield: 131072>}
    messageBox_flag_cancel: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_cancel: 2>
    messageBox_flag_icon_appicon: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_icon_appicon: 4096>
    messageBox_flag_icon_error: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_icon_error: 32768>
    messageBox_flag_icon_info: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_icon_info: 8192>
    messageBox_flag_icon_qustion: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_icon_qustion: 16384>
    messageBox_flag_icon_shield: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_icon_shield: 131072>
    messageBox_flag_icon_warning: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_icon_warning: 65536>
    messageBox_flag_ok: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_ok: 1>
    messageBox_flag_other: typing.ClassVar[messageBox_flag_]  # value = <messageBox_flag_.messageBox_flag_other: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class monthCal_button_type_:
    """
    Members:
    
      monthCal_button_type_today
    
      monthCal_button_type_last_year
    
      monthCal_button_type_next_year
    
      monthCal_button_type_last_month
    
      monthCal_button_type_next_month
    """
    __members__: typing.ClassVar[dict[str, monthCal_button_type_]]  # value = {'monthCal_button_type_today': <monthCal_button_type_.monthCal_button_type_today: 0>, 'monthCal_button_type_last_year': <monthCal_button_type_.monthCal_button_type_last_year: 1>, 'monthCal_button_type_next_year': <monthCal_button_type_.monthCal_button_type_next_year: 2>, 'monthCal_button_type_last_month': <monthCal_button_type_.monthCal_button_type_last_month: 3>, 'monthCal_button_type_next_month': <monthCal_button_type_.monthCal_button_type_next_month: 4>}
    monthCal_button_type_last_month: typing.ClassVar[monthCal_button_type_]  # value = <monthCal_button_type_.monthCal_button_type_last_month: 3>
    monthCal_button_type_last_year: typing.ClassVar[monthCal_button_type_]  # value = <monthCal_button_type_.monthCal_button_type_last_year: 1>
    monthCal_button_type_next_month: typing.ClassVar[monthCal_button_type_]  # value = <monthCal_button_type_.monthCal_button_type_next_month: 4>
    monthCal_button_type_next_year: typing.ClassVar[monthCal_button_type_]  # value = <monthCal_button_type_.monthCal_button_type_next_year: 2>
    monthCal_button_type_today: typing.ClassVar[monthCal_button_type_]  # value = <monthCal_button_type_.monthCal_button_type_today: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class monthCal_item_:
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> monthCal_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def nDay(self) -> int:
        ...
    @nDay.setter
    def nDay(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nState(self) -> int:
        ...
    @nState.setter
    def nState(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nType(self) -> int:
        ...
    @nType.setter
    def nType(self, arg0: typing.SupportsInt) -> None:
        ...
class monthCal_state_flag_:
    """
    Members:
    
      monthCal_state_flag_leave
    
      monthCal_state_flag_item_leave
    
      monthCal_state_flag_item_stay
    
      monthCal_state_flag_item_down
    
      monthCal_state_flag_item_select
    
      monthCal_state_flag_item_select_no
    
      monthCal_state_flag_item_today
    
      monthCal_state_flag_item_last_month
    
      monthCal_state_flag_item_cur_month
    
      monthCal_state_flag_item_next_month
    """
    __members__: typing.ClassVar[dict[str, monthCal_state_flag_]]  # value = {'monthCal_state_flag_leave': <monthCal_state_flag_.monthCal_state_flag_leave: 16>, 'monthCal_state_flag_item_leave': <monthCal_state_flag_.monthCal_state_flag_item_leave: 128>, 'monthCal_state_flag_item_stay': <monthCal_state_flag_.monthCal_state_flag_item_stay: 256>, 'monthCal_state_flag_item_down': <monthCal_state_flag_.monthCal_state_flag_item_down: 512>, 'monthCal_state_flag_item_select': <monthCal_state_flag_.monthCal_state_flag_item_select: 1024>, 'monthCal_state_flag_item_select_no': <monthCal_state_flag_.monthCal_state_flag_item_select_no: 2048>, 'monthCal_state_flag_item_today': <monthCal_state_flag_.monthCal_state_flag_item_today: 4096>, 'monthCal_state_flag_item_last_month': <monthCal_state_flag_.monthCal_state_flag_item_last_month: 8192>, 'monthCal_state_flag_item_cur_month': <monthCal_state_flag_.monthCal_state_flag_item_cur_month: 16384>, 'monthCal_state_flag_item_next_month': <monthCal_state_flag_.monthCal_state_flag_item_next_month: 32768>}
    monthCal_state_flag_item_cur_month: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_cur_month: 16384>
    monthCal_state_flag_item_down: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_down: 512>
    monthCal_state_flag_item_last_month: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_last_month: 8192>
    monthCal_state_flag_item_leave: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_leave: 128>
    monthCal_state_flag_item_next_month: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_next_month: 32768>
    monthCal_state_flag_item_select: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_select: 1024>
    monthCal_state_flag_item_select_no: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_select_no: 2048>
    monthCal_state_flag_item_stay: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_stay: 256>
    monthCal_state_flag_item_today: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_item_today: 4096>
    monthCal_state_flag_leave: typing.ClassVar[monthCal_state_flag_]  # value = <monthCal_state_flag_.monthCal_state_flag_leave: 16>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class notifyMsg_skin_:
    """
    Members:
    
      notifyMsg_skin_no
    
      notifyMsg_skin_success
    
      notifyMsg_skin_warning
    
      notifyMsg_skin_message
    
      notifyMsg_skin_error
    """
    __members__: typing.ClassVar[dict[str, notifyMsg_skin_]]  # value = {'notifyMsg_skin_no': <notifyMsg_skin_.notifyMsg_skin_no: 0>, 'notifyMsg_skin_success': <notifyMsg_skin_.notifyMsg_skin_success: 1>, 'notifyMsg_skin_warning': <notifyMsg_skin_.notifyMsg_skin_warning: 2>, 'notifyMsg_skin_message': <notifyMsg_skin_.notifyMsg_skin_message: 3>, 'notifyMsg_skin_error': <notifyMsg_skin_.notifyMsg_skin_error: 4>}
    notifyMsg_skin_error: typing.ClassVar[notifyMsg_skin_]  # value = <notifyMsg_skin_.notifyMsg_skin_error: 4>
    notifyMsg_skin_message: typing.ClassVar[notifyMsg_skin_]  # value = <notifyMsg_skin_.notifyMsg_skin_message: 3>
    notifyMsg_skin_no: typing.ClassVar[notifyMsg_skin_]  # value = <notifyMsg_skin_.notifyMsg_skin_no: 0>
    notifyMsg_skin_success: typing.ClassVar[notifyMsg_skin_]  # value = <notifyMsg_skin_.notifyMsg_skin_success: 1>
    notifyMsg_skin_warning: typing.ClassVar[notifyMsg_skin_]  # value = <notifyMsg_skin_.notifyMsg_skin_warning: 2>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class pane_align_:
    """
    Members:
    
      pane_align_error
    
      pane_align_left
    
      pane_align_top
    
      pane_align_right
    
      pane_align_bottom
    
      pane_align_center
    """
    __members__: typing.ClassVar[dict[str, pane_align_]]  # value = {'pane_align_error': <pane_align_.pane_align_error: -1>, 'pane_align_left': <pane_align_.pane_align_left: 0>, 'pane_align_top': <pane_align_.pane_align_top: 1>, 'pane_align_right': <pane_align_.pane_align_right: 2>, 'pane_align_bottom': <pane_align_.pane_align_bottom: 3>, 'pane_align_center': <pane_align_.pane_align_center: 4>}
    pane_align_bottom: typing.ClassVar[pane_align_]  # value = <pane_align_.pane_align_bottom: 3>
    pane_align_center: typing.ClassVar[pane_align_]  # value = <pane_align_.pane_align_center: 4>
    pane_align_error: typing.ClassVar[pane_align_]  # value = <pane_align_.pane_align_error: -1>
    pane_align_left: typing.ClassVar[pane_align_]  # value = <pane_align_.pane_align_left: 0>
    pane_align_right: typing.ClassVar[pane_align_]  # value = <pane_align_.pane_align_right: 2>
    pane_align_top: typing.ClassVar[pane_align_]  # value = <pane_align_.pane_align_top: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class pane_state_:
    """
    Members:
    
      pane_state_error
    
      pane_state_any
    
      pane_state_lock
    
      pane_state_dock
    
      pane_state_float
    """
    __members__: typing.ClassVar[dict[str, pane_state_]]  # value = {'pane_state_error': <pane_state_.pane_state_error: -1>, 'pane_state_any': <pane_state_.pane_state_any: 0>, 'pane_state_lock': <pane_state_.pane_state_lock: 1>, 'pane_state_dock': <pane_state_.pane_state_dock: 2>, 'pane_state_float': <pane_state_.pane_state_float: 3>}
    pane_state_any: typing.ClassVar[pane_state_]  # value = <pane_state_.pane_state_any: 0>
    pane_state_dock: typing.ClassVar[pane_state_]  # value = <pane_state_.pane_state_dock: 2>
    pane_state_error: typing.ClassVar[pane_state_]  # value = <pane_state_.pane_state_error: -1>
    pane_state_float: typing.ClassVar[pane_state_]  # value = <pane_state_.pane_state_float: 3>
    pane_state_lock: typing.ClassVar[pane_state_]  # value = <pane_state_.pane_state_lock: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class pane_state_flag_:
    """
    Members:
    
      pane_state_flag_leave
    
      pane_state_flag_stay
    
      pane_state_flag_caption
    
      pane_state_flag_body
    """
    __members__: typing.ClassVar[dict[str, pane_state_flag_]]  # value = {'pane_state_flag_leave': <pane_state_flag_.pane_state_flag_leave: 16>, 'pane_state_flag_stay': <pane_state_flag_.pane_state_flag_stay: 32>, 'pane_state_flag_caption': <pane_state_flag_.pane_state_flag_caption: 128>, 'pane_state_flag_body': <pane_state_flag_.pane_state_flag_body: 256>}
    pane_state_flag_body: typing.ClassVar[pane_state_flag_]  # value = <pane_state_flag_.pane_state_flag_body: 256>
    pane_state_flag_caption: typing.ClassVar[pane_state_flag_]  # value = <pane_state_flag_.pane_state_flag_caption: 128>
    pane_state_flag_leave: typing.ClassVar[pane_state_flag_]  # value = <pane_state_flag_.pane_state_flag_leave: 16>
    pane_state_flag_stay: typing.ClassVar[pane_state_flag_]  # value = <pane_state_flag_.pane_state_flag_stay: 32>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class position_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> position_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def iColumn(self) -> int:
        ...
    @iColumn.setter
    def iColumn(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def iRow(self) -> int:
        ...
    @iRow.setter
    def iRow(self, arg0: typing.SupportsInt) -> None:
        ...
class position_flag_:
    """
    Members:
    
      position_flag_left
    
      position_flag_top
    
      position_flag_right
    
      position_flag_bottom
    
      position_flag_leftTop
    
      position_flag_leftBottom
    
      position_flag_rightTop
    
      position_flag_rightBottom
    
      position_flag_center
    """
    __members__: typing.ClassVar[dict[str, position_flag_]]  # value = {'position_flag_left': <position_flag_.position_flag_left: 0>, 'position_flag_top': <position_flag_.position_flag_top: 1>, 'position_flag_right': <position_flag_.position_flag_right: 2>, 'position_flag_bottom': <position_flag_.position_flag_bottom: 3>, 'position_flag_leftTop': <position_flag_.position_flag_leftTop: 4>, 'position_flag_leftBottom': <position_flag_.position_flag_leftBottom: 5>, 'position_flag_rightTop': <position_flag_.position_flag_rightTop: 6>, 'position_flag_rightBottom': <position_flag_.position_flag_rightBottom: 7>, 'position_flag_center': <position_flag_.position_flag_center: 8>}
    position_flag_bottom: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_bottom: 3>
    position_flag_center: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_center: 8>
    position_flag_left: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_left: 0>
    position_flag_leftBottom: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_leftBottom: 5>
    position_flag_leftTop: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_leftTop: 4>
    position_flag_right: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_right: 2>
    position_flag_rightBottom: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_rightBottom: 7>
    position_flag_rightTop: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_rightTop: 6>
    position_flag_top: typing.ClassVar[position_flag_]  # value = <position_flag_.position_flag_top: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class propertyGrid_item_:
    bExpand: bool
    bShow: bool
    nType: propertyGrid_item_type_
    rcExpand: RECT
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> propertyGrid_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def nDepth(self) -> int:
        ...
    @nDepth.setter
    def nDepth(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nID(self) -> int:
        ...
    @nID.setter
    def nID(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nNameColWidth(self) -> int:
        ...
    @nNameColWidth.setter
    def nNameColWidth(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class propertyGrid_item_type_:
    """
    Members:
    
      propertyGrid_item_type_text
    
      propertyGrid_item_type_edit
    
      propertyGrid_item_type_edit_color
    
      propertyGrid_item_type_edit_file
    
      propertyGrid_item_type_edit_set
    
      propertyGrid_item_type_comboBox
    
      propertyGrid_item_type_group
    
      propertyGrid_item_type_panel
    """
    __members__: typing.ClassVar[dict[str, propertyGrid_item_type_]]  # value = {'propertyGrid_item_type_text': <propertyGrid_item_type_.propertyGrid_item_type_text: 0>, 'propertyGrid_item_type_edit': <propertyGrid_item_type_.propertyGrid_item_type_edit: 1>, 'propertyGrid_item_type_edit_color': <propertyGrid_item_type_.propertyGrid_item_type_edit_color: 2>, 'propertyGrid_item_type_edit_file': <propertyGrid_item_type_.propertyGrid_item_type_edit_file: 3>, 'propertyGrid_item_type_edit_set': <propertyGrid_item_type_.propertyGrid_item_type_edit_set: 4>, 'propertyGrid_item_type_comboBox': <propertyGrid_item_type_.propertyGrid_item_type_comboBox: 5>, 'propertyGrid_item_type_group': <propertyGrid_item_type_.propertyGrid_item_type_group: 6>, 'propertyGrid_item_type_panel': <propertyGrid_item_type_.propertyGrid_item_type_panel: 7>}
    propertyGrid_item_type_comboBox: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_comboBox: 5>
    propertyGrid_item_type_edit: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit: 1>
    propertyGrid_item_type_edit_color: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_color: 2>
    propertyGrid_item_type_edit_file: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_file: 3>
    propertyGrid_item_type_edit_set: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_set: 4>
    propertyGrid_item_type_group: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_group: 6>
    propertyGrid_item_type_panel: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_panel: 7>
    propertyGrid_item_type_text: typing.ClassVar[propertyGrid_item_type_]  # value = <propertyGrid_item_type_.propertyGrid_item_type_text: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class propertyGrid_state_flag_:
    """
    Members:
    
      propertyGrid_state_flag_item_leave
    
      propertyGrid_state_flag_item_stay
    
      propertyGrid_state_flag_item_select
    
      propertyGrid_state_flag_item_select_no
    
      propertyGrid_state_flag_group_leave
    
      propertyGrid_state_flag_group_expand
    
      propertyGrid_state_flag_group_expand_no
    """
    __members__: typing.ClassVar[dict[str, propertyGrid_state_flag_]]  # value = {'propertyGrid_state_flag_item_leave': <propertyGrid_state_flag_.propertyGrid_state_flag_item_leave: 128>, 'propertyGrid_state_flag_item_stay': <propertyGrid_state_flag_.propertyGrid_state_flag_item_stay: 256>, 'propertyGrid_state_flag_item_select': <propertyGrid_state_flag_.propertyGrid_state_flag_item_select: 512>, 'propertyGrid_state_flag_item_select_no': <propertyGrid_state_flag_.propertyGrid_state_flag_item_select_no: 1024>, 'propertyGrid_state_flag_group_leave': <propertyGrid_state_flag_.propertyGrid_state_flag_group_leave: 2048>, 'propertyGrid_state_flag_group_expand': <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand: 4096>, 'propertyGrid_state_flag_group_expand_no': <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand_no: 8192>}
    propertyGrid_state_flag_group_expand: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand: 4096>
    propertyGrid_state_flag_group_expand_no: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand_no: 8192>
    propertyGrid_state_flag_group_leave: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_leave: 2048>
    propertyGrid_state_flag_item_leave: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_leave: 128>
    propertyGrid_state_flag_item_select: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select: 512>
    propertyGrid_state_flag_item_select_no: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select_no: 1024>
    propertyGrid_state_flag_item_stay: typing.ClassVar[propertyGrid_state_flag_]  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_stay: 256>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class table_flag_:
    """
    Members:
    
      table_flag_full
    
      table_flag_none
    """
    __members__: typing.ClassVar[dict[str, table_flag_]]  # value = {'table_flag_full': <table_flag_.table_flag_full: 0>, 'table_flag_none': <table_flag_.table_flag_none: 1>}
    table_flag_full: typing.ClassVar[table_flag_]  # value = <table_flag_.table_flag_full: 0>
    table_flag_none: typing.ClassVar[table_flag_]  # value = <table_flag_.table_flag_none: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class table_line_flag_:
    """
    Members:
    
      table_line_flag_left
    
      table_line_flag_top
    
      table_line_flag_right
    
      table_line_flag_bottom
    
      table_line_flag_left2
    
      table_line_flag_top2
    
      table_line_flag_right2
    
      table_line_flag_bottom2
    """
    __members__: typing.ClassVar[dict[str, table_line_flag_]]  # value = {'table_line_flag_left': <table_line_flag_.table_line_flag_left: 1>, 'table_line_flag_top': <table_line_flag_.table_line_flag_top: 2>, 'table_line_flag_right': <table_line_flag_.table_line_flag_right: 4>, 'table_line_flag_bottom': <table_line_flag_.table_line_flag_bottom: 8>, 'table_line_flag_left2': <table_line_flag_.table_line_flag_left2: 16>, 'table_line_flag_top2': <table_line_flag_.table_line_flag_top2: 32>, 'table_line_flag_right2': <table_line_flag_.table_line_flag_right2: 64>, 'table_line_flag_bottom2': <table_line_flag_.table_line_flag_bottom2: 128>}
    table_line_flag_bottom: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_bottom: 8>
    table_line_flag_bottom2: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_bottom2: 128>
    table_line_flag_left: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_left: 1>
    table_line_flag_left2: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_left2: 16>
    table_line_flag_right: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_right: 4>
    table_line_flag_right2: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_right2: 64>
    table_line_flag_top: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_top: 2>
    table_line_flag_top2: typing.ClassVar[table_line_flag_]  # value = <table_line_flag_.table_line_flag_top2: 32>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class textFormatFlag_:
    """
    Members:
    
      textAlignFlag_left
    
      textAlignFlag_top
    
      textAlignFlag_left_top
    
      textAlignFlag_center
    
      textAlignFlag_right
    
      textAlignFlag_vcenter
    
      textAlignFlag_bottom
    
      textFormatFlag_DirectionRightToLeft
    
      textFormatFlag_NoWrap
    
      textFormatFlag_DirectionVertical
    
      textFormatFlag_NoFitBlackBox
    
      textFormatFlag_DisplayFormatControl
    
      textFormatFlag_NoFontFallback
    
      textFormatFlag_MeasureTrailingSpaces
    
      textFormatFlag_LineLimit
    
      textFormatFlag_NoClip
    
      textTrimming_None
    
      textTrimming_Character
    
      textTrimming_Word
    
      textTrimming_EllipsisCharacter
    
      textTrimming_EllipsisWord
    
      textTrimming_EllipsisPath
    """
    __members__: typing.ClassVar[dict[str, textFormatFlag_]]  # value = {'textAlignFlag_left': <textFormatFlag_.textAlignFlag_left: 0>, 'textAlignFlag_top': <textFormatFlag_.textAlignFlag_left: 0>, 'textAlignFlag_left_top': <textFormatFlag_.textAlignFlag_left_top: 16384>, 'textAlignFlag_center': <textFormatFlag_.textAlignFlag_center: 1>, 'textAlignFlag_right': <textFormatFlag_.textAlignFlag_right: 2>, 'textAlignFlag_vcenter': <textFormatFlag_.textAlignFlag_vcenter: 4>, 'textAlignFlag_bottom': <textFormatFlag_.textAlignFlag_bottom: 8>, 'textFormatFlag_DirectionRightToLeft': <textFormatFlag_.textFormatFlag_DirectionRightToLeft: 16>, 'textFormatFlag_NoWrap': <textFormatFlag_.textFormatFlag_NoWrap: 32>, 'textFormatFlag_DirectionVertical': <textFormatFlag_.textFormatFlag_DirectionVertical: 64>, 'textFormatFlag_NoFitBlackBox': <textFormatFlag_.textFormatFlag_NoFitBlackBox: 128>, 'textFormatFlag_DisplayFormatControl': <textFormatFlag_.textFormatFlag_DisplayFormatControl: 256>, 'textFormatFlag_NoFontFallback': <textFormatFlag_.textFormatFlag_NoFontFallback: 512>, 'textFormatFlag_MeasureTrailingSpaces': <textFormatFlag_.textFormatFlag_MeasureTrailingSpaces: 1024>, 'textFormatFlag_LineLimit': <textFormatFlag_.textFormatFlag_LineLimit: 2048>, 'textFormatFlag_NoClip': <textFormatFlag_.textFormatFlag_NoClip: 4096>, 'textTrimming_None': <textFormatFlag_.textAlignFlag_left: 0>, 'textTrimming_Character': <textFormatFlag_.textTrimming_Character: 262144>, 'textTrimming_Word': <textFormatFlag_.textTrimming_Word: 524288>, 'textTrimming_EllipsisCharacter': <textFormatFlag_.textTrimming_EllipsisCharacter: 32768>, 'textTrimming_EllipsisWord': <textFormatFlag_.textTrimming_EllipsisWord: 65536>, 'textTrimming_EllipsisPath': <textFormatFlag_.textTrimming_EllipsisPath: 131072>}
    textAlignFlag_bottom: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_bottom: 8>
    textAlignFlag_center: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_center: 1>
    textAlignFlag_left: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_left: 0>
    textAlignFlag_left_top: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_left_top: 16384>
    textAlignFlag_right: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_right: 2>
    textAlignFlag_top: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_left: 0>
    textAlignFlag_vcenter: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_vcenter: 4>
    textFormatFlag_DirectionRightToLeft: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_DirectionRightToLeft: 16>
    textFormatFlag_DirectionVertical: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_DirectionVertical: 64>
    textFormatFlag_DisplayFormatControl: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_DisplayFormatControl: 256>
    textFormatFlag_LineLimit: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_LineLimit: 2048>
    textFormatFlag_MeasureTrailingSpaces: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_MeasureTrailingSpaces: 1024>
    textFormatFlag_NoClip: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_NoClip: 4096>
    textFormatFlag_NoFitBlackBox: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_NoFitBlackBox: 128>
    textFormatFlag_NoFontFallback: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_NoFontFallback: 512>
    textFormatFlag_NoWrap: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textFormatFlag_NoWrap: 32>
    textTrimming_Character: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textTrimming_Character: 262144>
    textTrimming_EllipsisCharacter: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textTrimming_EllipsisCharacter: 32768>
    textTrimming_EllipsisPath: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textTrimming_EllipsisPath: 131072>
    textTrimming_EllipsisWord: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textTrimming_EllipsisWord: 65536>
    textTrimming_None: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textAlignFlag_left: 0>
    textTrimming_Word: typing.ClassVar[textFormatFlag_]  # value = <textFormatFlag_.textTrimming_Word: 524288>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class trayIcon_flag_:
    """
    Members:
    
      trayIcon_flag_icon_none
    
      trayIcon_flag_icon_info
    
      trayIcon_flag_icon_warning
    
      trayIcon_flag_icon_error
    
      trayIcon_flag_icon_user
    
      trayIcon_flag_nosound
    """
    __members__: typing.ClassVar[dict[str, trayIcon_flag_]]  # value = {'trayIcon_flag_icon_none': <trayIcon_flag_.trayIcon_flag_icon_none: 0>, 'trayIcon_flag_icon_info': <trayIcon_flag_.trayIcon_flag_icon_info: 1>, 'trayIcon_flag_icon_warning': <trayIcon_flag_.trayIcon_flag_icon_warning: 2>, 'trayIcon_flag_icon_error': <trayIcon_flag_.trayIcon_flag_icon_error: 3>, 'trayIcon_flag_icon_user': <trayIcon_flag_.trayIcon_flag_icon_user: 4>, 'trayIcon_flag_nosound': <trayIcon_flag_.trayIcon_flag_nosound: 16>}
    trayIcon_flag_icon_error: typing.ClassVar[trayIcon_flag_]  # value = <trayIcon_flag_.trayIcon_flag_icon_error: 3>
    trayIcon_flag_icon_info: typing.ClassVar[trayIcon_flag_]  # value = <trayIcon_flag_.trayIcon_flag_icon_info: 1>
    trayIcon_flag_icon_none: typing.ClassVar[trayIcon_flag_]  # value = <trayIcon_flag_.trayIcon_flag_icon_none: 0>
    trayIcon_flag_icon_user: typing.ClassVar[trayIcon_flag_]  # value = <trayIcon_flag_.trayIcon_flag_icon_user: 4>
    trayIcon_flag_icon_warning: typing.ClassVar[trayIcon_flag_]  # value = <trayIcon_flag_.trayIcon_flag_icon_warning: 2>
    trayIcon_flag_nosound: typing.ClassVar[trayIcon_flag_]  # value = <trayIcon_flag_.trayIcon_flag_nosound: 16>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class tree_drag_item_:
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> tree_drag_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def nDestItem(self) -> int:
        ...
    @nDestItem.setter
    def nDestItem(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nDragItem(self) -> int:
        ...
    @nDragItem.setter
    def nDragItem(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nType(self) -> int:
        ...
    @nType.setter
    def nType(self, arg0: typing.SupportsInt) -> None:
        ...
class tree_item_:
    bExpand: bool
    nState: tree_item_state_
    rcItem: RECT
    @staticmethod
    def cast(pointer: typing.SupportsInt) -> tree_item_:
        ...
    def __init__(self) -> None:
        ...
    @property
    def hLayout(self) -> int:
        ...
    @hLayout.setter
    def hLayout(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def hTemp(self) -> int:
        ...
    @hTemp.setter
    def hTemp(self, arg1: typing.SupportsInt) -> None:
        ...
    @property
    def nDepth(self) -> int:
        ...
    @nDepth.setter
    def nDepth(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nHeight(self) -> int:
        ...
    @nHeight.setter
    def nHeight(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nID(self) -> int:
        ...
    @nID.setter
    def nID(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nSelHeight(self) -> int:
        ...
    @nSelHeight.setter
    def nSelHeight(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def nUserData(self) -> int:
        ...
    @nUserData.setter
    def nUserData(self, arg0: typing.SupportsInt) -> None:
        ...
class tree_item_state_:
    """
    Members:
    
      tree_item_state_leave
    
      tree_item_state_stay
    
      tree_item_state_select
    """
    __members__: typing.ClassVar[dict[str, tree_item_state_]]  # value = {'tree_item_state_leave': <tree_item_state_.tree_item_state_leave: 0>, 'tree_item_state_stay': <tree_item_state_.tree_item_state_stay: 1>, 'tree_item_state_select': <tree_item_state_.tree_item_state_select: 2>}
    tree_item_state_leave: typing.ClassVar[tree_item_state_]  # value = <tree_item_state_.tree_item_state_leave: 0>
    tree_item_state_select: typing.ClassVar[tree_item_state_]  # value = <tree_item_state_.tree_item_state_select: 2>
    tree_item_state_stay: typing.ClassVar[tree_item_state_]  # value = <tree_item_state_.tree_item_state_stay: 1>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class tree_state_flag_:
    """
    Members:
    
      tree_state_flag_item_leave
    
      tree_state_flag_item_stay
    
      tree_state_flag_item_select
    
      tree_state_flag_item_select_no
    
      tree_state_flag_group
    
      tree_state_flag_group_no
    """
    __members__: typing.ClassVar[dict[str, tree_state_flag_]]  # value = {'tree_state_flag_item_leave': <tree_state_flag_.tree_state_flag_item_leave: 128>, 'tree_state_flag_item_stay': <tree_state_flag_.tree_state_flag_item_stay: 256>, 'tree_state_flag_item_select': <tree_state_flag_.tree_state_flag_item_select: 512>, 'tree_state_flag_item_select_no': <tree_state_flag_.tree_state_flag_item_select_no: 1024>, 'tree_state_flag_group': <tree_state_flag_.tree_state_flag_group: 2048>, 'tree_state_flag_group_no': <tree_state_flag_.tree_state_flag_group_no: 4096>}
    tree_state_flag_group: typing.ClassVar[tree_state_flag_]  # value = <tree_state_flag_.tree_state_flag_group: 2048>
    tree_state_flag_group_no: typing.ClassVar[tree_state_flag_]  # value = <tree_state_flag_.tree_state_flag_group_no: 4096>
    tree_state_flag_item_leave: typing.ClassVar[tree_state_flag_]  # value = <tree_state_flag_.tree_state_flag_item_leave: 128>
    tree_state_flag_item_select: typing.ClassVar[tree_state_flag_]  # value = <tree_state_flag_.tree_state_flag_item_select: 512>
    tree_state_flag_item_select_no: typing.ClassVar[tree_state_flag_]  # value = <tree_state_flag_.tree_state_flag_item_select_no: 1024>
    tree_state_flag_item_stay: typing.ClassVar[tree_state_flag_]  # value = <tree_state_flag_.tree_state_flag_item_stay: 256>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class window_position_:
    """
    Members:
    
      window_position_error
    
      window_position_top
    
      window_position_bottom
    
      window_position_left
    
      window_position_right
    
      window_position_body
    
      window_position_window
    """
    __members__: typing.ClassVar[dict[str, window_position_]]  # value = {'window_position_error': <window_position_.window_position_error: -1>, 'window_position_top': <window_position_.window_position_top: 0>, 'window_position_bottom': <window_position_.window_position_bottom: 1>, 'window_position_left': <window_position_.window_position_left: 2>, 'window_position_right': <window_position_.window_position_right: 3>, 'window_position_body': <window_position_.window_position_body: 4>, 'window_position_window': <window_position_.window_position_window: 5>}
    window_position_body: typing.ClassVar[window_position_]  # value = <window_position_.window_position_body: 4>
    window_position_bottom: typing.ClassVar[window_position_]  # value = <window_position_.window_position_bottom: 1>
    window_position_error: typing.ClassVar[window_position_]  # value = <window_position_.window_position_error: -1>
    window_position_left: typing.ClassVar[window_position_]  # value = <window_position_.window_position_left: 2>
    window_position_right: typing.ClassVar[window_position_]  # value = <window_position_.window_position_right: 3>
    window_position_top: typing.ClassVar[window_position_]  # value = <window_position_.window_position_top: 0>
    window_position_window: typing.ClassVar[window_position_]  # value = <window_position_.window_position_window: 5>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class window_state_flag_:
    """
    Members:
    
      window_state_flag_nothing
    
      window_state_flag_leave
    
      window_state_flag_body_leave
    
      window_state_flag_top_leave
    
      window_state_flag_bottom_leave
    
      window_state_flag_left_leave
    
      window_state_flag_right_leave
    
      window_state_flag_layout_body
    """
    __members__: typing.ClassVar[dict[str, window_state_flag_]]  # value = {'window_state_flag_nothing': <window_state_flag_.window_state_flag_nothing: 0>, 'window_state_flag_leave': <window_state_flag_.window_state_flag_leave: 1>, 'window_state_flag_body_leave': <window_state_flag_.window_state_flag_body_leave: 2>, 'window_state_flag_top_leave': <window_state_flag_.window_state_flag_top_leave: 4>, 'window_state_flag_bottom_leave': <window_state_flag_.window_state_flag_bottom_leave: 8>, 'window_state_flag_left_leave': <window_state_flag_.window_state_flag_left_leave: 16>, 'window_state_flag_right_leave': <window_state_flag_.window_state_flag_right_leave: 32>, 'window_state_flag_layout_body': <window_state_flag_.window_state_flag_layout_body: 536870912>}
    window_state_flag_body_leave: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_body_leave: 2>
    window_state_flag_bottom_leave: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_bottom_leave: 8>
    window_state_flag_layout_body: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_layout_body: 536870912>
    window_state_flag_leave: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_leave: 1>
    window_state_flag_left_leave: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_left_leave: 16>
    window_state_flag_nothing: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_nothing: 0>
    window_state_flag_right_leave: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_right_leave: 32>
    window_state_flag_top_leave: typing.ClassVar[window_state_flag_]  # value = <window_state_flag_.window_state_flag_top_leave: 4>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class window_style_:
    """
    Members:
    
      window_style_nothing
    
      window_style_caption
    
      window_style_border
    
      window_style_center
    
      window_style_drag_border
    
      window_style_drag_window
    
      window_style_allow_maxWindow
    
      window_style_icon
    
      window_style_title
    
      window_style_btn_min
    
      window_style_btn_max
    
      window_style_btn_close
    
      window_style_default
    
      window_style_simple
    
      window_style_pop
    
      window_style_modal
    
      window_style_modal_simple
    """
    __members__: typing.ClassVar[dict[str, window_style_]]  # value = {'window_style_nothing': <window_style_.window_style_nothing: 0>, 'window_style_caption': <window_style_.window_style_caption: 1>, 'window_style_border': <window_style_.window_style_border: 2>, 'window_style_center': <window_style_.window_style_center: 4>, 'window_style_drag_border': <window_style_.window_style_drag_border: 8>, 'window_style_drag_window': <window_style_.window_style_drag_window: 16>, 'window_style_allow_maxWindow': <window_style_.window_style_allow_maxWindow: 32>, 'window_style_icon': <window_style_.window_style_icon: 64>, 'window_style_title': <window_style_.window_style_title: 128>, 'window_style_btn_min': <window_style_.window_style_btn_min: 256>, 'window_style_btn_max': <window_style_.window_style_btn_max: 512>, 'window_style_btn_close': <window_style_.window_style_btn_close: 1024>, 'window_style_default': <window_style_.window_style_default: 2031>, 'window_style_simple': <window_style_.window_style_simple: 47>, 'window_style_pop': <window_style_.window_style_pop: 1263>, 'window_style_modal': <window_style_.window_style_modal: 1223>, 'window_style_modal_simple': <window_style_.window_style_modal_simple: 7>}
    window_style_allow_maxWindow: typing.ClassVar[window_style_]  # value = <window_style_.window_style_allow_maxWindow: 32>
    window_style_border: typing.ClassVar[window_style_]  # value = <window_style_.window_style_border: 2>
    window_style_btn_close: typing.ClassVar[window_style_]  # value = <window_style_.window_style_btn_close: 1024>
    window_style_btn_max: typing.ClassVar[window_style_]  # value = <window_style_.window_style_btn_max: 512>
    window_style_btn_min: typing.ClassVar[window_style_]  # value = <window_style_.window_style_btn_min: 256>
    window_style_caption: typing.ClassVar[window_style_]  # value = <window_style_.window_style_caption: 1>
    window_style_center: typing.ClassVar[window_style_]  # value = <window_style_.window_style_center: 4>
    window_style_default: typing.ClassVar[window_style_]  # value = <window_style_.window_style_default: 2031>
    window_style_drag_border: typing.ClassVar[window_style_]  # value = <window_style_.window_style_drag_border: 8>
    window_style_drag_window: typing.ClassVar[window_style_]  # value = <window_style_.window_style_drag_window: 16>
    window_style_icon: typing.ClassVar[window_style_]  # value = <window_style_.window_style_icon: 64>
    window_style_modal: typing.ClassVar[window_style_]  # value = <window_style_.window_style_modal: 1223>
    window_style_modal_simple: typing.ClassVar[window_style_]  # value = <window_style_.window_style_modal_simple: 7>
    window_style_nothing: typing.ClassVar[window_style_]  # value = <window_style_.window_style_nothing: 0>
    window_style_pop: typing.ClassVar[window_style_]  # value = <window_style_.window_style_pop: 1263>
    window_style_simple: typing.ClassVar[window_style_]  # value = <window_style_.window_style_simple: 47>
    window_style_title: typing.ClassVar[window_style_]  # value = <window_style_.window_style_title: 128>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class window_transparent_:
    """
    Members:
    
      window_transparent_false
    
      window_transparent_shaped
    
      window_transparent_shadow
    
      window_transparent_simple
    
      window_transparent_win7
    """
    __members__: typing.ClassVar[dict[str, window_transparent_]]  # value = {'window_transparent_false': <window_transparent_.window_transparent_false: 0>, 'window_transparent_shaped': <window_transparent_.window_transparent_shaped: 1>, 'window_transparent_shadow': <window_transparent_.window_transparent_shadow: 2>, 'window_transparent_simple': <window_transparent_.window_transparent_simple: 3>, 'window_transparent_win7': <window_transparent_.window_transparent_win7: 4>}
    window_transparent_false: typing.ClassVar[window_transparent_]  # value = <window_transparent_.window_transparent_false: 0>
    window_transparent_shadow: typing.ClassVar[window_transparent_]  # value = <window_transparent_.window_transparent_shadow: 2>
    window_transparent_shaped: typing.ClassVar[window_transparent_]  # value = <window_transparent_.window_transparent_shaped: 1>
    window_transparent_simple: typing.ClassVar[window_transparent_]  # value = <window_transparent_.window_transparent_simple: 3>
    window_transparent_win7: typing.ClassVar[window_transparent_]  # value = <window_transparent_.window_transparent_win7: 4>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class zorder_:
    """
    Members:
    
      zorder_top
    
      zorder_bottom
    
      zorder_before
    
      zorder_after
    """
    __members__: typing.ClassVar[dict[str, zorder_]]  # value = {'zorder_top': <zorder_.zorder_top: 0>, 'zorder_bottom': <zorder_.zorder_bottom: 1>, 'zorder_before': <zorder_.zorder_before: 2>, 'zorder_after': <zorder_.zorder_after: 3>}
    zorder_after: typing.ClassVar[zorder_]  # value = <zorder_.zorder_after: 3>
    zorder_before: typing.ClassVar[zorder_]  # value = <zorder_.zorder_before: 2>
    zorder_bottom: typing.ClassVar[zorder_]  # value = <zorder_.zorder_bottom: 1>
    zorder_top: typing.ClassVar[zorder_]  # value = <zorder_.zorder_top: 0>
    def __and__(self, other: typing.Any) -> typing.Any:
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __ge__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __gt__(self, other: typing.Any) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __invert__(self) -> typing.Any:
        ...
    def __le__(self, other: typing.Any) -> bool:
        ...
    def __lt__(self, other: typing.Any) -> bool:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __or__(self, other: typing.Any) -> typing.Any:
        ...
    def __rand__(self, other: typing.Any) -> typing.Any:
        ...
    def __repr__(self) -> str:
        ...
    def __ror__(self, other: typing.Any) -> typing.Any:
        ...
    def __rxor__(self, other: typing.Any) -> typing.Any:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __xor__(self, other: typing.Any) -> typing.Any:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
def Alert(title: str, text: str) -> None:
    ...
def CallUiThread(func: typing.Any, *args, **kwargs) -> None:
    ...
def Cast(handle: typing.SupportsInt) -> XObject:
    ...
def CombineRect(rect1: XRect, rect2: XRect) -> XRect:
    ...
def Free(pointer: typing.SupportsInt) -> None:
    ...
def FreeLibrary(hModule: typing.SupportsInt) -> bool:
    ...
def GetDefaultFont() -> XFont:
    ...
def GetProcAddress(hModule: typing.SupportsInt, procName: str) -> int:
    ...
def GetTextShowRect(text: str, font: XFont, textAlign: typing.SupportsInt, maxWidth: typing.SupportsInt) -> XSize:
    ...
def GetTextShowSize(text: str, font: XFont) -> XSize:
    ...
def GetTextShowSizeEx(text: str, font: XFont, textAlign: typing.SupportsInt) -> XSize:
    ...
def GetTextSize(text: str, font: XFont) -> XSize:
    ...
def LoadDll(fileName: str) -> int:
    ...
def LoadIcon(filePath: str) -> int:
    ...
def LoadLibrary(fileName: str) -> int:
    ...
def Malloc(size: typing.SupportsInt) -> int:
    ...
def MessageBox(title: str, text: str, flags: typing.SupportsInt, hWndParent: typing.SupportsInt, xcStyle: typing.SupportsInt = 1223) -> int:
    ...
def PointClientToScreen(hwnd: typing.SupportsInt, point: XPoint) -> XPoint:
    ...
def PostMessage(hwnd: typing.SupportsInt, msg: typing.SupportsInt, wParam: typing.SupportsInt, lParam: typing.SupportsInt) -> bool:
    ...
def PostQuitMessage(exitCode: typing.SupportsInt) -> None:
    ...
@typing.overload
def RGB(r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt) -> int:
    ...
@typing.overload
def RGB(hexcolor: str) -> int:
    ...
@typing.overload
def RGBA(hexcolor: str) -> int:
    ...
@typing.overload
def RGBA(r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, a: typing.SupportsInt) -> int:
    ...
@typing.overload
def RGBA(rgb: typing.SupportsInt, a: typing.SupportsInt) -> int:
    ...
def RectInRect(rect1: XRect, rect2: XRect) -> bool:
    ...
def RegisterWindowClassName(className: str) -> bool:
    ...
def SendMessage(hwnd: typing.SupportsInt, msg: typing.SupportsInt, wParam: typing.SupportsInt, lParam: typing.SupportsInt) -> bool:
    ...
def SetActivateTopWindow() -> bool:
    ...
def SetDefaultFont(font: XFont) -> None:
    ...
WINDOW_BODY: int = 10
WINDOW_BOTTOM: int = 2
WINDOW_BOTTOMLEFT: int = 7
WINDOW_BOTTOMRIGHT: int = 8
WINDOW_CAPTION: int = 9
WINDOW_LEFT: int = 3
WINDOW_RIGHT: int = 4
WINDOW_TOP: int = 1
WINDOW_TOPLEFT: int = 5
WINDOW_TOPRIGHT: int = 6
WM_CAPTURECHANGED: int = 533
WM_CHAR: int = 258
WM_DESTROY: int = 2
WM_DROPFILES: int = 563
WM_EXITSIZEMOVE: int = 562
WM_KEYDOWN: int = 256
WM_KEYUP: int = 257
WM_KILLFOCUS: int = 8
WM_LBUTTONDBLCLK: int = 515
WM_LBUTTONDOWN: int = 513
WM_MOUSEHOVER: int = 673
WM_MOUSEMOVE: int = 512
WM_MOUSEWHEEL: int = 522
WM_NCDESTROY: int = 130
WM_PAINT: int = 15
WM_RBUTTONDBLCLK: int = 518
WM_RBUTTONDOWN: int = 516
WM_RBUTTONUP: int = 517
WM_SETCURSOR: int = 32
WM_SETFOCUS: int = 7
WM_SIZE: int = 5
WM_TIMER: int = 275
XC_ADAPTER: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ADAPTER: 102>
XC_ADAPTER_LISTVIEW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ADAPTER_LISTVIEW: 105>
XC_ADAPTER_MAP: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ADAPTER_MAP: 106>
XC_ADAPTER_TABLE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ADAPTER_TABLE: 103>
XC_ADAPTER_TREE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ADAPTER_TREE: 104>
XC_ANIMATION_GROUP: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ANIMATION_GROUP: 132>
XC_ANIMATION_ITEM: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ANIMATION_ITEM: 133>
XC_ANIMATION_SEQUENCE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ANIMATION_SEQUENCE: 131>
XC_BKINFOM: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_BKINFOM: 116>
XC_BUTTON: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_BUTTON: 22>
XC_COMBOBOX: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_COMBOBOX: 24>
XC_COMBOBOXWINDOW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_COMBOBOXWINDOW: 11>
XC_DATETIME: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_DATETIME: 36>
XC_DWRITE_RENDERING_MODE_ALIASED: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_ALIASED: 1>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: 2>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: 3>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: 4>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: 5>
XC_DWRITE_RENDERING_MODE_DEFAULT: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_DEFAULT: 0>
XC_DWRITE_RENDERING_MODE_OUTLINE: XC_DWRITE_RENDERING_MODE  # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_OUTLINE: 6>
XC_EDIT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_EDIT: 45>
XC_EDITOR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_EDITOR: 46>
XC_EDIT_COLOR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_EDIT_COLOR: 38>
XC_EDIT_FILE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_EDIT_FILE: 50>
XC_EDIT_FOLDER: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_EDIT_FOLDER: 51>
XC_EDIT_SET: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_EDIT_SET: 39>
XC_ELE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ELE: 21>
XC_ELE_LAYOUT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ELE_LAYOUT: 53>
XC_ERROR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_ERROR: -1>
XC_FLOATWND: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_FLOATWND: 4>
XC_FONT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_FONT: 84>
XC_FRAMEWND: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_FRAMEWND: 3>
XC_HDRAW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_HDRAW: 83>
XC_ID_ERROR: int = -1
XC_ID_FIRST: int = -2
XC_ID_LAST: int = -3
XC_ID_ROOT: int = 0
XC_IMAGE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
XC_IMAGE_FRAME: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_IMAGE_FRAME: 88>
XC_IMAGE_TEXTURE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
XC_LAYOUT_BOX: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_BOX: 124>
XC_LAYOUT_FRAME: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_FRAME: 54>
XC_LAYOUT_LIST: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_LIST: 112>
XC_LAYOUT_LISTVIEW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_LISTVIEW: 111>
XC_LAYOUT_OBJECT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT: 101>
XC_LAYOUT_OBJECT_GROUP: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_GROUP: 113>
XC_LAYOUT_OBJECT_ITEM: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_ITEM: 114>
XC_LAYOUT_PANEL: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LAYOUT_PANEL: 115>
XC_LIST: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LIST: 27>
XC_LISTBOX: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LISTBOX: 28>
XC_LISTVIEW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LISTVIEW: 29>
XC_LIST_HEADER: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_LIST_HEADER: 52>
XC_MENU: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_MENU: 81>
XC_MENUBAR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_MENUBAR: 31>
XC_MENUBAR_BUTTON: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_MENUBAR_BUTTON: 44>
XC_MODALWINDOW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_MODALWINDOW: 2>
XC_MONTHCAL: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_MONTHCAL: 35>
XC_NAME1: str = 'name1'
XC_NAME2: str = 'name2'
XC_NAME3: str = 'name3'
XC_NAME4: str = 'name4'
XC_NAME5: str = 'name5'
XC_NAME6: str = 'name6'
XC_NOTHING: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_NOTHING: 0>
XC_OBJECT_UI: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_OBJECT_UI: 19>
XC_PANE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_PANE: 42>
XC_PANE_SPLIT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_PANE_SPLIT: 43>
XC_POPUPMENUCHILDWINDOW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_POPUPMENUCHILDWINDOW: 13>
XC_POPUPMENUWINDOW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_POPUPMENUWINDOW: 12>
XC_PROGRESSBAR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_PROGRESSBAR: 33>
XC_PROPERTYGRID: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_PROPERTYGRID: 37>
XC_RICHEDIT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_RICHEDIT: 23>
XC_SCROLLBAR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SCROLLBAR: 25>
XC_SCROLLVIEW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SCROLLVIEW: 26>
XC_SHAPE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE: 61>
XC_SHAPE_ELLIPSE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_ELLIPSE: 65>
XC_SHAPE_GIF: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_GIF: 68>
XC_SHAPE_GROUPBOX: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_GROUPBOX: 67>
XC_SHAPE_LINE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_LINE: 66>
XC_SHAPE_PICTURE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_PICTURE: 63>
XC_SHAPE_RECT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_RECT: 64>
XC_SHAPE_TABLE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_TABLE: 69>
XC_SHAPE_TEXT: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SHAPE_TEXT: 62>
XC_SLIDERBAR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SLIDERBAR: 32>
XC_SVG: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_SVG: 89>
XC_TABBAR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_TABBAR: 40>
XC_TEXTLINK: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_TEXTLINK: 41>
XC_TOOLBAR: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_TOOLBAR: 34>
XC_TREE: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_TREE: 30>
XC_WIDGET_UI: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_WIDGET_UI: 20>
XC_WINDOW: XC_OBJECT_TYPE  # value = <XC_OBJECT_TYPE.XC_WINDOW: 1>
XE_ADJUSTLAYOUT: int = 17
XE_ADJUSTLAYOUT_END: int = 18
XE_BNCLICK: int = 34
XE_BUTTON_CHECK: int = 35
XE_CHAR: int = 41
XE_COMBOBOX_EXIT_LIST: int = 73
XE_COMBOBOX_POPUP_LIST: int = 72
XE_COMBOBOX_SELECT: int = 71
XE_COMBOBOX_SELECT_END: int = 74
XE_DATETIME_CHANGE: int = 241
XE_DATETIME_EXIT_MONTHCAL: int = 243
XE_DATETIME_POPUP_MONTHCAL: int = 242
XE_DESTROY: int = 33
XE_DESTROY_END: int = 42
XE_DROPFILES: int = 250
XE_EDITOR_AUTOMATCH_SELECT: int = 194
XE_EDITOR_MODIFY_ROWS: int = 190
XE_EDITOR_REMOVEBREAKPOINT: int = 192
XE_EDITOR_SETBREAKPOINT: int = 191
XE_EDIT_CHANGED: int = 182
XE_EDIT_COLOR_CHANGE: int = 260
XE_EDIT_DRAWROW: int = 181
XE_EDIT_ENTER_GET_TABALIGN: int = 185
XE_EDIT_POS_CHANGED: int = 183
XE_EDIT_ROW_CHANGED: int = 193
XE_EDIT_SET: int = 180
XE_EDIT_STYLE_CHANGED: int = 184
XE_EDIT_SWAPROW: int = 186
XE_ELEPROCE: int = 1
XE_KEYDOWN: int = 39
XE_KEYUP: int = 40
XE_KILLCAPTURE: int = 52
XE_KILLFOCUS: int = 32
XE_LBUTTONDBCLICK: int = 14
XE_LBUTTONDOWN: int = 10
XE_LBUTTONUP: int = 11
XE_LISTBOX_DRAWITEM: int = 85
XE_LISTBOX_SELECT: int = 86
XE_LISTBOX_TEMP_ADJUST_COORDINATE: int = 84
XE_LISTBOX_TEMP_CREATE: int = 81
XE_LISTBOX_TEMP_CREATE_END: int = 82
XE_LISTBOX_TEMP_DESTROY: int = 83
XE_LISTBOX_TEMP_UPDATE: int = 82
XE_LISTVIEW_DRAWITEM: int = 145
XE_LISTVIEW_EXPAND: int = 147
XE_LISTVIEW_SELECT: int = 146
XE_LISTVIEW_TEMP_ADJUST_COORDINATE: int = 144
XE_LISTVIEW_TEMP_CREATE: int = 141
XE_LISTVIEW_TEMP_CREATE_END: int = 142
XE_LISTVIEW_TEMP_DESTROY: int = 143
XE_LISTVIEW_TEMP_UPDATE: int = 142
XE_LIST_DRAWITEM: int = 105
XE_LIST_HEADER_CLICK: int = 108
XE_LIST_HEADER_DRAWITEM: int = 107
XE_LIST_HEADER_TEMP_ADJUST_COORDINATE: int = 113
XE_LIST_HEADER_TEMP_CREATE: int = 110
XE_LIST_HEADER_TEMP_CREATE_END: int = 111
XE_LIST_HEADER_TEMP_DESTROY: int = 112
XE_LIST_HEADER_WIDTH_CHANGE: int = 109
XE_LIST_SELECT: int = 106
XE_LIST_TEMP_ADJUST_COORDINATE: int = 104
XE_LIST_TEMP_CREATE: int = 101
XE_LIST_TEMP_CREATE_END: int = 102
XE_LIST_TEMP_DESTROY: int = 103
XE_LIST_TEMP_UPDATE: int = 102
XE_MENU_DRAWITEM: int = 61
XE_MENU_DRAW_BACKGROUND: int = 60
XE_MENU_EXIT: int = 62
XE_MENU_POPUP: int = 57
XE_MENU_POPUP_WND: int = 58
XE_MENU_SELECT: int = 59
XE_MONTHCAL_CHANGE: int = 231
XE_MOUSEHOVER: int = 7
XE_MOUSELEAVE: int = 8
XE_MOUSEMOVE: int = 5
XE_MOUSESTAY: int = 6
XE_MOUSEWHEEL: int = 9
XE_PAINT: int = 2
XE_PAINT_END: int = 3
XE_PAINT_SCROLLVIEW: int = 4
XE_PGRID_ITEM_ADJUST_COORDINATE: int = 154
XE_PGRID_ITEM_DESTROY: int = 155
XE_PGRID_ITEM_EXPAND: int = 156
XE_PGRID_ITEM_SELECT: int = 153
XE_PGRID_ITEM_SET: int = 152
XE_PGRID_VALUE_CHANGE: int = 151
XE_PROGRESSBAR_CHANGE: int = 64
XE_RBUTTONDOWN: int = 12
XE_RBUTTONUP: int = 13
XE_SBAR_SCROLL: int = 56
XE_SCROLLVIEW_SCROLL_H: int = 54
XE_SCROLLVIEW_SCROLL_V: int = 55
XE_SETCAPTURE: int = 51
XE_SETCURSOR: int = 53
XE_SETFOCUS: int = 31
XE_SETFONT: int = 38
XE_SHOW: int = 37
XE_SIZE: int = 36
XE_SLIDERBAR_CHANGE: int = 63
XE_SYSKEYDOWN: int = 42
XE_SYSKEYUP: int = 43
XE_TABBAR_DELETE: int = 222
XE_TABBAR_SELECT: int = 221
XE_TOOLTIP_POPUP: int = 19
XE_TREE_DRAG_ITEM: int = 129
XE_TREE_DRAG_ITEM_ING: int = 128
XE_TREE_DRAWITEM: int = 125
XE_TREE_EXPAND: int = 127
XE_TREE_SELECT: int = 126
XE_TREE_TEMP_ADJUST_COORDINATE: int = 124
XE_TREE_TEMP_CREATE: int = 121
XE_TREE_TEMP_CREATE_END: int = 122
XE_TREE_TEMP_DESTROY: int = 123
XE_TREE_TEMP_UPDATE: int = 122
XE_XC_TIMER: int = 16
XWM_BODYVIEW_RECT: int = 28697
XWM_CALL_UI_THREAD: int = 28680
XWM_CLOUDUI_DOWNLOADFILE_COMPLETE: int = 28678
XWM_CLOUNDUI_OPENURL_WAIT: int = 28679
XWM_COMBOBOX_POPUP_DROPLIST: int = 28689
XWM_DOCK_POPUP: int = 28693
XWM_DRAW_T: int = 28675
XWM_EVENT_ALL: int = 33768
XWM_FLOATWND_DRAG: int = 28694
XWM_FLOAT_PANE: int = 28690
XWM_MENU_DRAWITEM: int = 28688
XWM_MENU_DRAW_BACKGROUND: int = 28687
XWM_MENU_EXIT: int = 28686
XWM_MENU_POPUP: int = 28683
XWM_MENU_POPUP_WND: int = 28684
XWM_MENU_SELECT: int = 28685
XWM_PAINT_DISPLAY: int = 28692
XWM_PAINT_END: int = 28691
XWM_PANE_SHOW: int = 28695
XWM_REDRAW_ELE: int = 28673
XWM_SETFOCUS_ELE: int = 28696
XWM_TIMER_T: int = 28676
XWM_TRAYICON: int = 28698
XWM_WINDPROC: int = 28674
XWM_XC_TIMER: int = 28677
adapter_date_type_error: adapter_date_type_  # value = <adapter_date_type_.adapter_date_type_error: -1>
adapter_date_type_float: adapter_date_type_  # value = <adapter_date_type_.adapter_date_type_float: 1>
adapter_date_type_image: adapter_date_type_  # value = <adapter_date_type_.adapter_date_type_image: 3>
adapter_date_type_int: adapter_date_type_  # value = <adapter_date_type_.adapter_date_type_int: 0>
adapter_date_type_string: adapter_date_type_  # value = <adapter_date_type_.adapter_date_type_string: 2>
adjustLayout_all: adjustLayout_  # value = <adjustLayout_.adjustLayout_all: 1>
adjustLayout_no: adjustLayout_  # value = <adjustLayout_.adjustLayout_no: 0>
adjustLayout_self: adjustLayout_  # value = <adjustLayout_.adjustLayout_self: 2>
animation_move_x: animation_move_  # value = <animation_move_.animation_move_x: 1>
animation_move_y: animation_move_  # value = <animation_move_.animation_move_y: 2>
bkObject_align_flag_bottom: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_bottom: 8>
bkObject_align_flag_center: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_center: 16>
bkObject_align_flag_center_v: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_center_v: 32>
bkObject_align_flag_left: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_left: 1>
bkObject_align_flag_no: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_no: 0>
bkObject_align_flag_right: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_right: 4>
bkObject_align_flag_top: bkObject_align_flag_  # value = <bkObject_align_flag_.bkObject_align_flag_top: 2>
button_icon_align_bottom: button_icon_align_  # value = <button_icon_align_.button_icon_align_bottom: 3>
button_icon_align_left: button_icon_align_  # value = <button_icon_align_.button_icon_align_left: 0>
button_icon_align_right: button_icon_align_  # value = <button_icon_align_.button_icon_align_right: 2>
button_icon_align_top: button_icon_align_  # value = <button_icon_align_.button_icon_align_top: 1>
button_state_check: button_state_  # value = <button_state_.button_state_check: 3>
button_state_disable: button_state_  # value = <button_state_.button_state_disable: 4>
button_state_down: button_state_  # value = <button_state_.button_state_down: 2>
button_state_flag_WindowMaximize: button_state_flag_  # value = <button_state_flag_.button_state_flag_WindowMaximize: 1024>
button_state_flag_WindowRestore: button_state_flag_  # value = <button_state_flag_.button_state_flag_WindowRestore: 512>
button_state_flag_check: button_state_flag_  # value = <button_state_flag_.button_state_flag_check: 128>
button_state_flag_check_no: button_state_flag_  # value = <button_state_flag_.button_state_flag_check_no: 256>
button_state_flag_down: button_state_flag_  # value = <button_state_flag_.button_state_flag_down: 64>
button_state_flag_leave: button_state_flag_  # value = <button_state_flag_.button_state_flag_leave: 16>
button_state_flag_stay: button_state_flag_  # value = <button_state_flag_.button_state_flag_stay: 32>
button_state_leave: button_state_  # value = <button_state_.button_state_leave: 0>
button_state_stay: button_state_  # value = <button_state_.button_state_stay: 1>
button_style_check: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_check: 2>
button_style_close: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_close: 5>
button_style_default: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.xc_style_default: 0>
button_style_expand: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_expand: 4>
button_style_icon: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_icon: 3>
button_style_max: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_max: 6>
button_style_min: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_min: 7>
button_style_pane_close: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_close: 19>
button_style_pane_dock_bottom: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_dock_bottom: 25>
button_style_pane_dock_left: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_dock_left: 22>
button_style_pane_dock_right: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_dock_right: 24>
button_style_pane_dock_top: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_dock_top: 23>
button_style_pane_lock: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_lock: 20>
button_style_pane_menu: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_pane_menu: 21>
button_style_radio: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_radio: 1>
button_style_scrollbar_down: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_scrollbar_down: 11>
button_style_scrollbar_left: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_scrollbar_left: 8>
button_style_scrollbar_right: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_scrollbar_right: 9>
button_style_scrollbar_slider_h: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_h: 12>
button_style_scrollbar_slider_v: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_v: 13>
button_style_scrollbar_up: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_scrollbar_up: 10>
button_style_slider: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_slider: 15>
button_style_tabBar: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_tabBar: 14>
button_style_toolBar: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_toolBar: 16>
button_style_toolBar_left: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_toolBar_left: 17>
button_style_toolBar_right: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.button_style_toolBar_right: 18>
button_type_check: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.button_type_check: 2>
button_type_close: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.button_type_close: 3>
button_type_default: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.button_type_default: 0>
button_type_max: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.button_type_max: 5>
button_type_min: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.button_type_min: 4>
button_type_radio: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.button_type_radio: 1>
chat_flag_center: chat_flag_  # value = <chat_flag_.chat_flag_center: 4>
chat_flag_left: chat_flag_  # value = <chat_flag_.chat_flag_left: 1>
chat_flag_next_row_bubble: chat_flag_  # value = <chat_flag_.chat_flag_next_row_bubble: 8>
chat_flag_right: chat_flag_  # value = <chat_flag_.chat_flag_right: 2>
comboBox_state_down: comboBox_state_  # value = <comboBox_state_.comboBox_state_down: 2>
comboBox_state_flag_down: comboBox_state_flag_  # value = <comboBox_state_flag_.comboBox_state_flag_down: 64>
comboBox_state_flag_leave: comboBox_state_flag_  # value = <comboBox_state_flag_.comboBox_state_flag_leave: 16>
comboBox_state_flag_stay: comboBox_state_flag_  # value = <comboBox_state_flag_.comboBox_state_flag_stay: 32>
comboBox_state_leave: comboBox_state_  # value = <comboBox_state_.comboBox_state_leave: 0>
comboBox_state_stay: comboBox_state_  # value = <comboBox_state_.comboBox_state_stay: 1>
common_state3_down: common_state3_  # value = <common_state3_.common_state3_down: 2>
common_state3_leave: common_state3_  # value = <common_state3_.common_state3_leave: 0>
common_state3_stay: common_state3_  # value = <common_state3_.common_state3_stay: 1>
easeIn: ease_type_  # value = <ease_type_.easeIn: 0>
easeInOut: ease_type_  # value = <ease_type_.easeInOut: 2>
easeOut: ease_type_  # value = <ease_type_.easeOut: 1>
ease_flag_back: ease_flag_  # value = <ease_flag_.ease_flag_back: 9>
ease_flag_bounce: ease_flag_  # value = <ease_flag_.ease_flag_bounce: 10>
ease_flag_circ: ease_flag_  # value = <ease_flag_.ease_flag_circ: 7>
ease_flag_cubic: ease_flag_  # value = <ease_flag_.ease_flag_cubic: 2>
ease_flag_elastic: ease_flag_  # value = <ease_flag_.ease_flag_elastic: 8>
ease_flag_expo: ease_flag_  # value = <ease_flag_.ease_flag_expo: 6>
ease_flag_in: ease_flag_  # value = <ease_flag_.ease_flag_in: 65536>
ease_flag_inOut: ease_flag_  # value = <ease_flag_.ease_flag_inOut: 196608>
ease_flag_linear: ease_flag_  # value = <ease_flag_.ease_flag_linear: 0>
ease_flag_out: ease_flag_  # value = <ease_flag_.ease_flag_out: 131072>
ease_flag_quad: ease_flag_  # value = <ease_flag_.ease_flag_quad: 1>
ease_flag_quart: ease_flag_  # value = <ease_flag_.ease_flag_quart: 3>
ease_flag_quint: ease_flag_  # value = <ease_flag_.ease_flag_quint: 4>
ease_flag_sine: ease_flag_  # value = <ease_flag_.ease_flag_sine: 5>
edit_style_type_font_color: edit_style_type_  # value = <edit_style_type_.edit_style_type_font_color: 1>
edit_style_type_image: edit_style_type_  # value = <edit_style_type_.edit_style_type_image: 2>
edit_style_type_obj: edit_style_type_  # value = <edit_style_type_.edit_style_type_obj: 3>
edit_textAlign_flag_bottom: edit_textAlign_flag_  # value = <edit_textAlign_flag_.edit_textAlign_flag_bottom: 4>
edit_textAlign_flag_center: edit_textAlign_flag_  # value = <edit_textAlign_flag_.edit_textAlign_flag_center: 2>
edit_textAlign_flag_center_v: edit_textAlign_flag_  # value = <edit_textAlign_flag_.edit_textAlign_flag_center_v: 8>
edit_textAlign_flag_left: edit_textAlign_flag_  # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
edit_textAlign_flag_right: edit_textAlign_flag_  # value = <edit_textAlign_flag_.edit_textAlign_flag_right: 1>
edit_textAlign_flag_top: edit_textAlign_flag_  # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
edit_type_chat: edit_type_  # value = <edit_type_.edit_type_chat: 3>
edit_type_codeTable: edit_type_  # value = <edit_type_.edit_type_codeTable: 4>
edit_type_editor: edit_type_  # value = <edit_type_.edit_type_editor: 1>
edit_type_none: edit_type_  # value = <edit_type_.edit_type_none: 0>
edit_type_richedit: edit_type_  # value = <edit_type_.edit_type_richedit: 2>
element_position_bottom: element_position_  # value = <element_position_.element_position_bottom: 8>
element_position_left: element_position_  # value = <element_position_.element_position_left: 1>
element_position_no: element_position_  # value = <element_position_.element_position_no: 0>
element_position_right: element_position_  # value = <element_position_.element_position_right: 4>
element_position_top: element_position_  # value = <element_position_.element_position_top: 2>
element_state_flag_disable: element_state_flag_  # value = <element_state_flag_.element_state_flag_disable: 2>
element_state_flag_down: element_state_flag_  # value = <element_state_flag_.element_state_flag_down: 64>
element_state_flag_enable: element_state_flag_  # value = <element_state_flag_.element_state_flag_enable: 1>
element_state_flag_focus: element_state_flag_  # value = <element_state_flag_.element_state_flag_focus: 4>
element_state_flag_focusEx: element_state_flag_  # value = <element_state_flag_.element_state_flag_focusEx: 1073741824>
element_state_flag_focusEx_no: element_state_flag_  # value = <element_state_flag_.element_state_flag_focusEx_no: -2147483648>
element_state_flag_focus_no: element_state_flag_  # value = <element_state_flag_.element_state_flag_focus_no: 8>
element_state_flag_leave: element_state_flag_  # value = <element_state_flag_.element_state_flag_leave: 16>
element_state_flag_nothing: element_state_flag_  # value = <element_state_flag_.element_state_flag_nothing: 0>
element_state_flag_stay: element_state_flag_  # value = <element_state_flag_.element_state_flag_stay: 32>
element_style_frameWnd_dock_bottom: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_bottom: 29>
element_style_frameWnd_dock_left: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_left: 26>
element_style_frameWnd_dock_right: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_right: 28>
element_style_frameWnd_dock_top: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_top: 27>
element_style_toolBar_separator: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.element_style_toolBar_separator: 30>
element_type_layout: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.element_type_layout: 6>
fontStyle_bold: fontStyle_  # value = <fontStyle_.fontStyle_bold: 1>
fontStyle_boldItalic: fontStyle_  # value = <fontStyle_.fontStyle_boldItalic: 3>
fontStyle_italic: fontStyle_  # value = <fontStyle_.fontStyle_italic: 2>
fontStyle_regular: fontStyle_  # value = <fontStyle_.fontStyle_regular: 0>
fontStyle_strikeout: fontStyle_  # value = <fontStyle_.fontStyle_strikeout: 8>
fontStyle_underline: fontStyle_  # value = <fontStyle_.fontStyle_underline: 4>
frameWnd_cell_type_bodyView: frameWnd_cell_type_  # value = <frameWnd_cell_type_.frameWnd_cell_type_bodyView: 3>
frameWnd_cell_type_group: frameWnd_cell_type_  # value = <frameWnd_cell_type_.frameWnd_cell_type_group: 2>
frameWnd_cell_type_left_right: frameWnd_cell_type_  # value = <frameWnd_cell_type_.frameWnd_cell_type_left_right: 5>
frameWnd_cell_type_no: frameWnd_cell_type_  # value = <frameWnd_cell_type_.frameWnd_cell_type_no: 0>
frameWnd_cell_type_pane: frameWnd_cell_type_  # value = <frameWnd_cell_type_.frameWnd_cell_type_pane: 1>
frameWnd_cell_type_top_bottom: frameWnd_cell_type_  # value = <frameWnd_cell_type_.frameWnd_cell_type_top_bottom: 4>
image_draw_type_adaptive: image_draw_type_  # value = <image_draw_type_.image_draw_type_adaptive: 2>
image_draw_type_adaptive_border: image_draw_type_  # value = <image_draw_type_.image_draw_type_adaptive_border: 5>
image_draw_type_default: image_draw_type_  # value = <image_draw_type_.image_draw_type_default: 0>
image_draw_type_fixed_ratio: image_draw_type_  # value = <image_draw_type_.image_draw_type_fixed_ratio: 4>
image_draw_type_stretch: image_draw_type_  # value = <image_draw_type_.image_draw_type_stretch: 1>
image_draw_type_tile: image_draw_type_  # value = <image_draw_type_.image_draw_type_tile: 3>
layout_align_axis_auto: layout_align_axis_  # value = <layout_align_axis_.layout_align_axis_auto: 0>
layout_align_axis_center: layout_align_axis_  # value = <layout_align_axis_.layout_align_axis_center: 2>
layout_align_axis_end: layout_align_axis_  # value = <layout_align_axis_.layout_align_axis_end: 3>
layout_align_axis_start: layout_align_axis_  # value = <layout_align_axis_.layout_align_axis_start: 1>
layout_align_bottom: layout_align_  # value = <layout_align_.layout_align_bottom: 3>
layout_align_center: layout_align_  # value = <layout_align_.layout_align_center: 4>
layout_align_equidistant: layout_align_  # value = <layout_align_.layout_align_equidistant: 5>
layout_align_left: layout_align_  # value = <layout_align_.layout_align_left: 0>
layout_align_right: layout_align_  # value = <layout_align_.layout_align_right: 2>
layout_align_top: layout_align_  # value = <layout_align_.layout_align_top: 1>
layout_size_auto: layout_size_  # value = <layout_size_.layout_size_auto: 2>
layout_size_disable: layout_size_  # value = <layout_size_.layout_size_disable: 5>
layout_size_fill: layout_size_  # value = <layout_size_.layout_size_fill: 1>
layout_size_fixed: layout_size_  # value = <layout_size_.layout_size_fixed: 0>
layout_size_percent: layout_size_  # value = <layout_size_.layout_size_percent: 4>
layout_size_weight: layout_size_  # value = <layout_size_.layout_size_weight: 3>
layout_state_flag_body: layout_state_flag_  # value = <layout_state_flag_.layout_state_flag_body: 2>
layout_state_flag_full: layout_state_flag_  # value = <layout_state_flag_.layout_state_flag_full: 1>
layout_state_flag_layout_body: element_state_flag_  # value = <element_state_flag_.layout_state_flag_layout_body: 536870912>
layout_state_flag_nothing: layout_state_flag_  # value = <layout_state_flag_.layout_state_flag_nothing: 0>
listBox_state_flag_item_leave: listBox_state_flag_  # value = <listBox_state_flag_.listBox_state_flag_item_leave: 128>
listBox_state_flag_item_select: listBox_state_flag_  # value = <listBox_state_flag_.listBox_state_flag_item_select: 512>
listBox_state_flag_item_select_no: listBox_state_flag_  # value = <listBox_state_flag_.listBox_state_flag_item_select_no: 1024>
listBox_state_flag_item_stay: listBox_state_flag_  # value = <listBox_state_flag_.listBox_state_flag_item_stay: 256>
listBox_style_comboBox: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.listBox_style_comboBox: 31>
listHeader_state_flag_item_down: listHeader_state_flag_  # value = <listHeader_state_flag_.listHeader_state_flag_item_down: 512>
listHeader_state_flag_item_leave: listHeader_state_flag_  # value = <listHeader_state_flag_.listHeader_state_flag_item_leave: 128>
listHeader_state_flag_item_stay: listHeader_state_flag_  # value = <listHeader_state_flag_.listHeader_state_flag_item_stay: 256>
listItemTemp_type_list: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_list: 12>
listItemTemp_type_listBox: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_listBox: 2>
listItemTemp_type_listView: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_listView: 48>
listItemTemp_type_listView_group: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_listView_group: 16>
listItemTemp_type_listView_item: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_listView_item: 32>
listItemTemp_type_list_head: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_list_head: 4>
listItemTemp_type_list_item: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_list_item: 8>
listItemTemp_type_tree: listItemTemp_type_  # value = <listItemTemp_type_.listItemTemp_type_tree: 1>
listView_state_flag_group_leave: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_group_leave: 2048>
listView_state_flag_group_select: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_group_select: 8192>
listView_state_flag_group_select_no: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_group_select_no: 16384>
listView_state_flag_group_stay: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_group_stay: 4096>
listView_state_flag_item_leave: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_item_leave: 128>
listView_state_flag_item_select: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_item_select: 512>
listView_state_flag_item_select_no: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_item_select_no: 1024>
listView_state_flag_item_stay: listView_state_flag_  # value = <listView_state_flag_.listView_state_flag_item_stay: 256>
list_drawItemBk_flag_group_leave: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_leave: 8>
list_drawItemBk_flag_group_stay: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_stay: 16>
list_drawItemBk_flag_leave: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_leave: 1>
list_drawItemBk_flag_line: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_line: 32>
list_drawItemBk_flag_lineV: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_lineV: 64>
list_drawItemBk_flag_nothing: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_nothing: 0>
list_drawItemBk_flag_select: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_select: 4>
list_drawItemBk_flag_stay: list_drawItemBk_flag_  # value = <list_drawItemBk_flag_.list_drawItemBk_flag_stay: 2>
list_item_state_cache: list_item_state_  # value = <list_item_state_.list_item_state_cache: 3>
list_item_state_leave: list_item_state_  # value = <list_item_state_.list_item_state_leave: 0>
list_item_state_select: list_item_state_  # value = <list_item_state_.list_item_state_select: 2>
list_item_state_stay: list_item_state_  # value = <list_item_state_.list_item_state_stay: 1>
list_state_flag_item_leave: list_state_flag_  # value = <list_state_flag_.list_state_flag_item_leave: 128>
list_state_flag_item_select: list_state_flag_  # value = <list_state_flag_.list_state_flag_item_select: 512>
list_state_flag_item_select_no: list_state_flag_  # value = <list_state_flag_.list_state_flag_item_select_no: 1024>
list_state_flag_item_stay: list_state_flag_  # value = <list_state_flag_.list_state_flag_item_stay: 256>
menu_item_flag_check: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_check: 2>
menu_item_flag_disable: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_disable: 16>
menu_item_flag_normal: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_normal: 0>
menu_item_flag_popup: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_popup: 4>
menu_item_flag_select: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_select: 1>
menu_item_flag_separator: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_separator: 8>
menu_item_flag_stay: menu_item_flag_  # value = <menu_item_flag_.menu_item_flag_select: 1>
menu_popup_position_center_bottom: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_center_bottom: 7>
menu_popup_position_center_left: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_center_left: 4>
menu_popup_position_center_right: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_center_right: 6>
menu_popup_position_center_top: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_center_top: 5>
menu_popup_position_left_bottom: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_left_bottom: 1>
menu_popup_position_left_top: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_left_top: 0>
menu_popup_position_right_bottom: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_right_bottom: 3>
menu_popup_position_right_top: menu_popup_position_  # value = <menu_popup_position_.menu_popup_position_right_top: 2>
messageBox_flag_cancel: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_cancel: 2>
messageBox_flag_icon_appicon: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_icon_appicon: 4096>
messageBox_flag_icon_error: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_icon_error: 32768>
messageBox_flag_icon_info: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_icon_info: 8192>
messageBox_flag_icon_qustion: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_icon_qustion: 16384>
messageBox_flag_icon_shield: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_icon_shield: 131072>
messageBox_flag_icon_warning: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_icon_warning: 65536>
messageBox_flag_ok: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_ok: 1>
messageBox_flag_other: messageBox_flag_  # value = <messageBox_flag_.messageBox_flag_other: 0>
monthCal_button_type_last_month: monthCal_button_type_  # value = <monthCal_button_type_.monthCal_button_type_last_month: 3>
monthCal_button_type_last_year: monthCal_button_type_  # value = <monthCal_button_type_.monthCal_button_type_last_year: 1>
monthCal_button_type_next_month: monthCal_button_type_  # value = <monthCal_button_type_.monthCal_button_type_next_month: 4>
monthCal_button_type_next_year: monthCal_button_type_  # value = <monthCal_button_type_.monthCal_button_type_next_year: 2>
monthCal_button_type_today: monthCal_button_type_  # value = <monthCal_button_type_.monthCal_button_type_today: 0>
monthCal_state_flag_item_cur_month: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_cur_month: 16384>
monthCal_state_flag_item_down: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_down: 512>
monthCal_state_flag_item_last_month: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_last_month: 8192>
monthCal_state_flag_item_leave: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_leave: 128>
monthCal_state_flag_item_next_month: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_next_month: 32768>
monthCal_state_flag_item_select: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_select: 1024>
monthCal_state_flag_item_select_no: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_select_no: 2048>
monthCal_state_flag_item_stay: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_stay: 256>
monthCal_state_flag_item_today: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_item_today: 4096>
monthCal_state_flag_leave: monthCal_state_flag_  # value = <monthCal_state_flag_.monthCal_state_flag_leave: 16>
notifyMsg_skin_error: notifyMsg_skin_  # value = <notifyMsg_skin_.notifyMsg_skin_error: 4>
notifyMsg_skin_message: notifyMsg_skin_  # value = <notifyMsg_skin_.notifyMsg_skin_message: 3>
notifyMsg_skin_no: notifyMsg_skin_  # value = <notifyMsg_skin_.notifyMsg_skin_no: 0>
notifyMsg_skin_success: notifyMsg_skin_  # value = <notifyMsg_skin_.notifyMsg_skin_success: 1>
notifyMsg_skin_warning: notifyMsg_skin_  # value = <notifyMsg_skin_.notifyMsg_skin_warning: 2>
pane_align_bottom: pane_align_  # value = <pane_align_.pane_align_bottom: 3>
pane_align_center: pane_align_  # value = <pane_align_.pane_align_center: 4>
pane_align_error: pane_align_  # value = <pane_align_.pane_align_error: -1>
pane_align_left: pane_align_  # value = <pane_align_.pane_align_left: 0>
pane_align_right: pane_align_  # value = <pane_align_.pane_align_right: 2>
pane_align_top: pane_align_  # value = <pane_align_.pane_align_top: 1>
pane_state_any: pane_state_  # value = <pane_state_.pane_state_any: 0>
pane_state_dock: pane_state_  # value = <pane_state_.pane_state_dock: 2>
pane_state_error: pane_state_  # value = <pane_state_.pane_state_error: -1>
pane_state_flag_body: pane_state_flag_  # value = <pane_state_flag_.pane_state_flag_body: 256>
pane_state_flag_caption: pane_state_flag_  # value = <pane_state_flag_.pane_state_flag_caption: 128>
pane_state_flag_leave: pane_state_flag_  # value = <pane_state_flag_.pane_state_flag_leave: 16>
pane_state_flag_stay: pane_state_flag_  # value = <pane_state_flag_.pane_state_flag_stay: 32>
pane_state_float: pane_state_  # value = <pane_state_.pane_state_float: 3>
pane_state_lock: pane_state_  # value = <pane_state_.pane_state_lock: 1>
position_flag_bottom: position_flag_  # value = <position_flag_.position_flag_bottom: 3>
position_flag_center: position_flag_  # value = <position_flag_.position_flag_center: 8>
position_flag_left: position_flag_  # value = <position_flag_.position_flag_left: 0>
position_flag_leftBottom: position_flag_  # value = <position_flag_.position_flag_leftBottom: 5>
position_flag_leftTop: position_flag_  # value = <position_flag_.position_flag_leftTop: 4>
position_flag_right: position_flag_  # value = <position_flag_.position_flag_right: 2>
position_flag_rightBottom: position_flag_  # value = <position_flag_.position_flag_rightBottom: 7>
position_flag_rightTop: position_flag_  # value = <position_flag_.position_flag_rightTop: 6>
position_flag_top: position_flag_  # value = <position_flag_.position_flag_top: 1>
propertyGrid_item_type_comboBox: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_comboBox: 5>
propertyGrid_item_type_edit: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit: 1>
propertyGrid_item_type_edit_color: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_color: 2>
propertyGrid_item_type_edit_file: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_file: 3>
propertyGrid_item_type_edit_set: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_set: 4>
propertyGrid_item_type_group: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_group: 6>
propertyGrid_item_type_panel: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_panel: 7>
propertyGrid_item_type_text: propertyGrid_item_type_  # value = <propertyGrid_item_type_.propertyGrid_item_type_text: 0>
propertyGrid_state_flag_group_expand: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand: 4096>
propertyGrid_state_flag_group_expand_no: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand_no: 8192>
propertyGrid_state_flag_group_leave: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_leave: 2048>
propertyGrid_state_flag_item_leave: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_leave: 128>
propertyGrid_state_flag_item_select: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select: 512>
propertyGrid_state_flag_item_select_no: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select_no: 1024>
propertyGrid_state_flag_item_stay: propertyGrid_state_flag_  # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_stay: 256>
table_flag_full: table_flag_  # value = <table_flag_.table_flag_full: 0>
table_flag_none: table_flag_  # value = <table_flag_.table_flag_none: 1>
table_line_flag_bottom: table_line_flag_  # value = <table_line_flag_.table_line_flag_bottom: 8>
table_line_flag_bottom2: table_line_flag_  # value = <table_line_flag_.table_line_flag_bottom2: 128>
table_line_flag_left: table_line_flag_  # value = <table_line_flag_.table_line_flag_left: 1>
table_line_flag_left2: table_line_flag_  # value = <table_line_flag_.table_line_flag_left2: 16>
table_line_flag_right: table_line_flag_  # value = <table_line_flag_.table_line_flag_right: 4>
table_line_flag_right2: table_line_flag_  # value = <table_line_flag_.table_line_flag_right2: 64>
table_line_flag_top: table_line_flag_  # value = <table_line_flag_.table_line_flag_top: 2>
table_line_flag_top2: table_line_flag_  # value = <table_line_flag_.table_line_flag_top2: 32>
textAlignFlag_bottom: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_bottom: 8>
textAlignFlag_center: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_center: 1>
textAlignFlag_left: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_left: 0>
textAlignFlag_left_top: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_left_top: 16384>
textAlignFlag_right: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_right: 2>
textAlignFlag_top: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_left: 0>
textAlignFlag_vcenter: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_vcenter: 4>
textFormatFlag_DirectionRightToLeft: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_DirectionRightToLeft: 16>
textFormatFlag_DirectionVertical: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_DirectionVertical: 64>
textFormatFlag_DisplayFormatControl: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_DisplayFormatControl: 256>
textFormatFlag_LineLimit: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_LineLimit: 2048>
textFormatFlag_MeasureTrailingSpaces: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_MeasureTrailingSpaces: 1024>
textFormatFlag_NoClip: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_NoClip: 4096>
textFormatFlag_NoFitBlackBox: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_NoFitBlackBox: 128>
textFormatFlag_NoFontFallback: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_NoFontFallback: 512>
textFormatFlag_NoWrap: textFormatFlag_  # value = <textFormatFlag_.textFormatFlag_NoWrap: 32>
textTrimming_Character: textFormatFlag_  # value = <textFormatFlag_.textTrimming_Character: 262144>
textTrimming_EllipsisCharacter: textFormatFlag_  # value = <textFormatFlag_.textTrimming_EllipsisCharacter: 32768>
textTrimming_EllipsisPath: textFormatFlag_  # value = <textFormatFlag_.textTrimming_EllipsisPath: 131072>
textTrimming_EllipsisWord: textFormatFlag_  # value = <textFormatFlag_.textTrimming_EllipsisWord: 65536>
textTrimming_None: textFormatFlag_  # value = <textFormatFlag_.textAlignFlag_left: 0>
textTrimming_Word: textFormatFlag_  # value = <textFormatFlag_.textTrimming_Word: 524288>
trayIcon_flag_icon_error: trayIcon_flag_  # value = <trayIcon_flag_.trayIcon_flag_icon_error: 3>
trayIcon_flag_icon_info: trayIcon_flag_  # value = <trayIcon_flag_.trayIcon_flag_icon_info: 1>
trayIcon_flag_icon_none: trayIcon_flag_  # value = <trayIcon_flag_.trayIcon_flag_icon_none: 0>
trayIcon_flag_icon_user: trayIcon_flag_  # value = <trayIcon_flag_.trayIcon_flag_icon_user: 4>
trayIcon_flag_icon_warning: trayIcon_flag_  # value = <trayIcon_flag_.trayIcon_flag_icon_warning: 2>
trayIcon_flag_nosound: trayIcon_flag_  # value = <trayIcon_flag_.trayIcon_flag_nosound: 16>
tree_item_state_leave: tree_item_state_  # value = <tree_item_state_.tree_item_state_leave: 0>
tree_item_state_select: tree_item_state_  # value = <tree_item_state_.tree_item_state_select: 2>
tree_item_state_stay: tree_item_state_  # value = <tree_item_state_.tree_item_state_stay: 1>
tree_state_flag_group: tree_state_flag_  # value = <tree_state_flag_.tree_state_flag_group: 2048>
tree_state_flag_group_no: tree_state_flag_  # value = <tree_state_flag_.tree_state_flag_group_no: 4096>
tree_state_flag_item_leave: tree_state_flag_  # value = <tree_state_flag_.tree_state_flag_item_leave: 128>
tree_state_flag_item_select: tree_state_flag_  # value = <tree_state_flag_.tree_state_flag_item_select: 512>
tree_state_flag_item_select_no: tree_state_flag_  # value = <tree_state_flag_.tree_state_flag_item_select_no: 1024>
tree_state_flag_item_stay: tree_state_flag_  # value = <tree_state_flag_.tree_state_flag_item_stay: 256>
window_position_body: window_position_  # value = <window_position_.window_position_body: 4>
window_position_bottom: window_position_  # value = <window_position_.window_position_bottom: 1>
window_position_error: window_position_  # value = <window_position_.window_position_error: -1>
window_position_left: window_position_  # value = <window_position_.window_position_left: 2>
window_position_right: window_position_  # value = <window_position_.window_position_right: 3>
window_position_top: window_position_  # value = <window_position_.window_position_top: 0>
window_position_window: window_position_  # value = <window_position_.window_position_window: 5>
window_state_flag_body_leave: window_state_flag_  # value = <window_state_flag_.window_state_flag_body_leave: 2>
window_state_flag_bottom_leave: window_state_flag_  # value = <window_state_flag_.window_state_flag_bottom_leave: 8>
window_state_flag_layout_body: window_state_flag_  # value = <window_state_flag_.window_state_flag_layout_body: 536870912>
window_state_flag_leave: window_state_flag_  # value = <window_state_flag_.window_state_flag_leave: 1>
window_state_flag_left_leave: window_state_flag_  # value = <window_state_flag_.window_state_flag_left_leave: 16>
window_state_flag_nothing: window_state_flag_  # value = <window_state_flag_.window_state_flag_nothing: 0>
window_state_flag_right_leave: window_state_flag_  # value = <window_state_flag_.window_state_flag_right_leave: 32>
window_state_flag_top_leave: window_state_flag_  # value = <window_state_flag_.window_state_flag_top_leave: 4>
window_style_allow_maxWindow: window_style_  # value = <window_style_.window_style_allow_maxWindow: 32>
window_style_border: window_style_  # value = <window_style_.window_style_border: 2>
window_style_btn_close: window_style_  # value = <window_style_.window_style_btn_close: 1024>
window_style_btn_max: window_style_  # value = <window_style_.window_style_btn_max: 512>
window_style_btn_min: window_style_  # value = <window_style_.window_style_btn_min: 256>
window_style_caption: window_style_  # value = <window_style_.window_style_caption: 1>
window_style_center: window_style_  # value = <window_style_.window_style_center: 4>
window_style_default: window_style_  # value = <window_style_.window_style_default: 2031>
window_style_drag_border: window_style_  # value = <window_style_.window_style_drag_border: 8>
window_style_drag_window: window_style_  # value = <window_style_.window_style_drag_window: 16>
window_style_icon: window_style_  # value = <window_style_.window_style_icon: 64>
window_style_modal: window_style_  # value = <window_style_.window_style_modal: 1223>
window_style_modal_simple: window_style_  # value = <window_style_.window_style_modal_simple: 7>
window_style_nothing: window_style_  # value = <window_style_.window_style_nothing: 0>
window_style_pop: window_style_  # value = <window_style_.window_style_pop: 1263>
window_style_simple: window_style_  # value = <window_style_.window_style_simple: 47>
window_style_title: window_style_  # value = <window_style_.window_style_title: 128>
window_transparent_false: window_transparent_  # value = <window_transparent_.window_transparent_false: 0>
window_transparent_shadow: window_transparent_  # value = <window_transparent_.window_transparent_shadow: 2>
window_transparent_shaped: window_transparent_  # value = <window_transparent_.window_transparent_shaped: 1>
window_transparent_simple: window_transparent_  # value = <window_transparent_.window_transparent_simple: 3>
window_transparent_win7: window_transparent_  # value = <window_transparent_.window_transparent_win7: 4>
xc_ex_error: XC_OBJECT_TYPE_EX  # value = <XC_OBJECT_TYPE_EX.xc_ex_error: -1>
xc_style_default: XC_OBJECT_STYLE  # value = <XC_OBJECT_STYLE.xc_style_default: 0>
zorder_after: zorder_  # value = <zorder_.zorder_after: 3>
zorder_before: zorder_  # value = <zorder_.zorder_before: 2>
zorder_bottom: zorder_  # value = <zorder_.zorder_bottom: 1>
zorder_top: zorder_  # value = <zorder_.zorder_top: 0>
