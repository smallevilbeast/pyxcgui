#
# Automatically generated file, do not edit!
#

"""xcgui for python"""
from __future__ import annotations
import _xcgui
import typing

__all__ = [
    "Alert",
    "CallUiThread",
    "Cast",
    "CombineRect",
    "Free",
    "FreeLibrary",
    "GetDefaultFont",
    "GetProcAddress",
    "GetTextShowRect",
    "GetTextShowSize",
    "GetTextShowSizeEx",
    "GetTextSize",
    "LoadDll",
    "LoadLibrary",
    "Malloc",
    "MessageBox",
    "POINT",
    "POINTF",
    "PointClientToScreen",
    "PostMessage",
    "PostQuitMessage",
    "RECT",
    "RECTF",
    "RGB",
    "RGBA",
    "RectInRect",
    "RegisterWindowClassName",
    "SIZE",
    "SendMessage",
    "SetActivateTopWindow",
    "SetDefaultFont",
    "WINDOW_BODY",
    "WINDOW_BOTTOM",
    "WINDOW_BOTTOMLEFT",
    "WINDOW_BOTTOMRIGHT",
    "WINDOW_CAPTION",
    "WINDOW_LEFT",
    "WINDOW_RIGHT",
    "WINDOW_TOP",
    "WINDOW_TOPLEFT",
    "WINDOW_TOPRIGHT",
    "WM_CAPTURECHANGED",
    "WM_CHAR",
    "WM_DESTROY",
    "WM_DROPFILES",
    "WM_EXITSIZEMOVE",
    "WM_KEYDOWN",
    "WM_KEYUP",
    "WM_KILLFOCUS",
    "WM_LBUTTONDBLCLK",
    "WM_LBUTTONDOWN",
    "WM_MOUSEHOVER",
    "WM_MOUSEMOVE",
    "WM_MOUSEWHEEL",
    "WM_NCDESTROY",
    "WM_PAINT",
    "WM_RBUTTONDBLCLK",
    "WM_RBUTTONDOWN",
    "WM_RBUTTONUP",
    "WM_SETCURSOR",
    "WM_SETFOCUS",
    "WM_SIZE",
    "WM_TIMER",
    "XAdapter",
    "XAdapterListView",
    "XAdapterMap",
    "XAdapterTable",
    "XAdapterTree",
    "XAnimation",
    "XAnimationGroup",
    "XAnimationItem",
    "XAnimationSequence",
    "XApp",
    "XBkManager",
    "XBkObject",
    "XButton",
    "XC_ADAPTER",
    "XC_ADAPTER_LISTVIEW",
    "XC_ADAPTER_MAP",
    "XC_ADAPTER_TABLE",
    "XC_ADAPTER_TREE",
    "XC_ANIMATION_GROUP",
    "XC_ANIMATION_ITEM",
    "XC_ANIMATION_SEQUENCE",
    "XC_BKINFOM",
    "XC_BUTTON",
    "XC_COMBOBOX",
    "XC_COMBOBOXWINDOW",
    "XC_DATETIME",
    "XC_DWRITE_RENDERING_MODE",
    "XC_DWRITE_RENDERING_MODE_ALIASED",
    "XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC",
    "XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL",
    "XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL",
    "XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC",
    "XC_DWRITE_RENDERING_MODE_DEFAULT",
    "XC_DWRITE_RENDERING_MODE_OUTLINE",
    "XC_EDIT",
    "XC_EDITOR",
    "XC_EDIT_COLOR",
    "XC_EDIT_FILE",
    "XC_EDIT_FOLDER",
    "XC_EDIT_SET",
    "XC_ELE",
    "XC_ELE_LAYOUT",
    "XC_ERROR",
    "XC_FLOATWND",
    "XC_FONT",
    "XC_FRAMEWND",
    "XC_HDRAW",
    "XC_ID_ERROR",
    "XC_ID_FIRST",
    "XC_ID_LAST",
    "XC_ID_ROOT",
    "XC_IMAGE",
    "XC_IMAGE_FRAME",
    "XC_IMAGE_TEXTURE",
    "XC_LAYOUT_BOX",
    "XC_LAYOUT_FRAME",
    "XC_LAYOUT_LIST",
    "XC_LAYOUT_LISTVIEW",
    "XC_LAYOUT_OBJECT",
    "XC_LAYOUT_OBJECT_GROUP",
    "XC_LAYOUT_OBJECT_ITEM",
    "XC_LAYOUT_PANEL",
    "XC_LIST",
    "XC_LISTBOX",
    "XC_LISTVIEW",
    "XC_LIST_HEADER",
    "XC_MENU",
    "XC_MENUBAR",
    "XC_MENUBAR_BUTTON",
    "XC_MODALWINDOW",
    "XC_MONTHCAL",
    "XC_NAME1",
    "XC_NAME2",
    "XC_NAME3",
    "XC_NAME4",
    "XC_NAME5",
    "XC_NAME6",
    "XC_NOTHING",
    "XC_OBJECT_STYLE",
    "XC_OBJECT_TYPE",
    "XC_OBJECT_TYPE_EX",
    "XC_OBJECT_UI",
    "XC_PANE",
    "XC_PANE_SPLIT",
    "XC_POPUPMENUCHILDWINDOW",
    "XC_POPUPMENUWINDOW",
    "XC_PROGRESSBAR",
    "XC_PROPERTYGRID",
    "XC_RICHEDIT",
    "XC_SCROLLBAR",
    "XC_SCROLLVIEW",
    "XC_SHAPE",
    "XC_SHAPE_ELLIPSE",
    "XC_SHAPE_GIF",
    "XC_SHAPE_GROUPBOX",
    "XC_SHAPE_LINE",
    "XC_SHAPE_PICTURE",
    "XC_SHAPE_RECT",
    "XC_SHAPE_TABLE",
    "XC_SHAPE_TEXT",
    "XC_SLIDERBAR",
    "XC_SVG",
    "XC_TABBAR",
    "XC_TEXTLINK",
    "XC_TOOLBAR",
    "XC_TREE",
    "XC_WIDGET_UI",
    "XC_WINDOW",
    "XCareInfo",
    "XComboBox",
    "XDateInfo",
    "XDateTime",
    "XDesigner",
    "XDraw",
    "XE_ADJUSTLAYOUT",
    "XE_ADJUSTLAYOUT_END",
    "XE_BNCLICK",
    "XE_BUTTON_CHECK",
    "XE_CHAR",
    "XE_COMBOBOX_EXIT_LIST",
    "XE_COMBOBOX_POPUP_LIST",
    "XE_COMBOBOX_SELECT",
    "XE_COMBOBOX_SELECT_END",
    "XE_DATETIME_CHANGE",
    "XE_DATETIME_EXIT_MONTHCAL",
    "XE_DATETIME_POPUP_MONTHCAL",
    "XE_DESTROY",
    "XE_DESTROY_END",
    "XE_DROPFILES",
    "XE_EDITOR_AUTOMATCH_SELECT",
    "XE_EDITOR_MODIFY_ROWS",
    "XE_EDITOR_REMOVEBREAKPOINT",
    "XE_EDITOR_SETBREAKPOINT",
    "XE_EDIT_CHANGED",
    "XE_EDIT_COLOR_CHANGE",
    "XE_EDIT_DRAWROW",
    "XE_EDIT_ENTER_GET_TABALIGN",
    "XE_EDIT_POS_CHANGED",
    "XE_EDIT_ROW_CHANGED",
    "XE_EDIT_SET",
    "XE_EDIT_STYLE_CHANGED",
    "XE_EDIT_SWAPROW",
    "XE_ELEPROCE",
    "XE_KEYDOWN",
    "XE_KEYUP",
    "XE_KILLCAPTURE",
    "XE_KILLFOCUS",
    "XE_LBUTTONDBCLICK",
    "XE_LBUTTONDOWN",
    "XE_LBUTTONUP",
    "XE_LISTBOX_DRAWITEM",
    "XE_LISTBOX_SELECT",
    "XE_LISTBOX_TEMP_ADJUST_COORDINATE",
    "XE_LISTBOX_TEMP_CREATE",
    "XE_LISTBOX_TEMP_CREATE_END",
    "XE_LISTBOX_TEMP_DESTROY",
    "XE_LISTBOX_TEMP_UPDATE",
    "XE_LISTVIEW_DRAWITEM",
    "XE_LISTVIEW_EXPAND",
    "XE_LISTVIEW_SELECT",
    "XE_LISTVIEW_TEMP_ADJUST_COORDINATE",
    "XE_LISTVIEW_TEMP_CREATE",
    "XE_LISTVIEW_TEMP_CREATE_END",
    "XE_LISTVIEW_TEMP_DESTROY",
    "XE_LISTVIEW_TEMP_UPDATE",
    "XE_LIST_DRAWITEM",
    "XE_LIST_HEADER_CLICK",
    "XE_LIST_HEADER_DRAWITEM",
    "XE_LIST_HEADER_TEMP_ADJUST_COORDINATE",
    "XE_LIST_HEADER_TEMP_CREATE",
    "XE_LIST_HEADER_TEMP_CREATE_END",
    "XE_LIST_HEADER_TEMP_DESTROY",
    "XE_LIST_HEADER_WIDTH_CHANGE",
    "XE_LIST_SELECT",
    "XE_LIST_TEMP_ADJUST_COORDINATE",
    "XE_LIST_TEMP_CREATE",
    "XE_LIST_TEMP_CREATE_END",
    "XE_LIST_TEMP_DESTROY",
    "XE_LIST_TEMP_UPDATE",
    "XE_MENU_DRAWITEM",
    "XE_MENU_DRAW_BACKGROUND",
    "XE_MENU_EXIT",
    "XE_MENU_POPUP",
    "XE_MENU_POPUP_WND",
    "XE_MENU_SELECT",
    "XE_MONTHCAL_CHANGE",
    "XE_MOUSEHOVER",
    "XE_MOUSELEAVE",
    "XE_MOUSEMOVE",
    "XE_MOUSESTAY",
    "XE_MOUSEWHEEL",
    "XE_PAINT",
    "XE_PAINT_END",
    "XE_PAINT_SCROLLVIEW",
    "XE_PGRID_ITEM_ADJUST_COORDINATE",
    "XE_PGRID_ITEM_DESTROY",
    "XE_PGRID_ITEM_EXPAND",
    "XE_PGRID_ITEM_SELECT",
    "XE_PGRID_ITEM_SET",
    "XE_PGRID_VALUE_CHANGE",
    "XE_PROGRESSBAR_CHANGE",
    "XE_RBUTTONDOWN",
    "XE_RBUTTONUP",
    "XE_SBAR_SCROLL",
    "XE_SCROLLVIEW_SCROLL_H",
    "XE_SCROLLVIEW_SCROLL_V",
    "XE_SETCAPTURE",
    "XE_SETCURSOR",
    "XE_SETFOCUS",
    "XE_SETFONT",
    "XE_SHOW",
    "XE_SIZE",
    "XE_SLIDERBAR_CHANGE",
    "XE_SYSKEYDOWN",
    "XE_SYSKEYUP",
    "XE_TABBAR_DELETE",
    "XE_TABBAR_SELECT",
    "XE_TREE_DRAG_ITEM",
    "XE_TREE_DRAG_ITEM_ING",
    "XE_TREE_DRAWITEM",
    "XE_TREE_EXPAND",
    "XE_TREE_SELECT",
    "XE_TREE_TEMP_ADJUST_COORDINATE",
    "XE_TREE_TEMP_CREATE",
    "XE_TREE_TEMP_CREATE_END",
    "XE_TREE_TEMP_DESTROY",
    "XE_TREE_TEMP_UPDATE",
    "XE_XC_TIMER",
    "XEase",
    "XEdit",
    "XElement",
    "XEvent",
    "XFont",
    "XFontInfo",
    "XFrameWindow",
    "XImage",
    "XImageSrc",
    "XItemHeightInfo",
    "XLayoutBox",
    "XLayoutEle",
    "XLayoutFrame",
    "XLayoutSize",
    "XList",
    "XListBox",
    "XListView",
    "XListViewItemRangeInfo",
    "XMenu",
    "XMenuBar",
    "XModelWindow",
    "XMonthCal",
    "XMsgWindow",
    "XObject",
    "XObjectUI",
    "XPane",
    "XPoint",
    "XPointF",
    "XProgressBar",
    "XRange",
    "XRect",
    "XRectF",
    "XResource",
    "XRotateInfo",
    "XScrollBar",
    "XScrollView",
    "XShadowInfo",
    "XShape",
    "XShapeEllipse",
    "XShapeGif",
    "XShapeGroupBox",
    "XShapeLine",
    "XShapePicture",
    "XShapeRect",
    "XShapeTable",
    "XShapeText",
    "XSize",
    "XSliderBar",
    "XStrokeInfo",
    "XSvg",
    "XTabBar",
    "XTemplate",
    "XTemplateNode",
    "XTextLink",
    "XTimeInfo",
    "XToolBar",
    "XTree",
    "XWM_CALL_UI_THREAD",
    "XWM_CLOUDUI_DOWNLOADFILE_COMPLETE",
    "XWM_CLOUNDUI_OPENURL_WAIT",
    "XWM_COMBOBOX_POPUP_DROPLIST",
    "XWM_DOCK_POPUP",
    "XWM_DRAW_T",
    "XWM_EVENT_ALL",
    "XWM_FLOATWND_DRAG",
    "XWM_FLOAT_PANE",
    "XWM_MENU_DRAWITEM",
    "XWM_MENU_DRAW_BACKGROUND",
    "XWM_MENU_EXIT",
    "XWM_MENU_POPUP",
    "XWM_MENU_POPUP_WND",
    "XWM_MENU_SELECT",
    "XWM_PAINT_DISPLAY",
    "XWM_PAINT_END",
    "XWM_PANE_SHOW",
    "XWM_REDRAW_ELE",
    "XWM_TIMER_T",
    "XWM_WINDPROC",
    "XWM_XC_TIMER",
    "XWidget",
    "XWindow",
    "adapter_date_type_",
    "adapter_date_type_error",
    "adapter_date_type_float",
    "adapter_date_type_image",
    "adapter_date_type_int",
    "adapter_date_type_string",
    "adjustLayout_",
    "adjustLayout_all",
    "adjustLayout_no",
    "adjustLayout_self",
    "animation_move_",
    "animation_move_x",
    "animation_move_y",
    "bkObject_align_flag_",
    "bkObject_align_flag_bottom",
    "bkObject_align_flag_center",
    "bkObject_align_flag_center_v",
    "bkObject_align_flag_left",
    "bkObject_align_flag_no",
    "bkObject_align_flag_right",
    "bkObject_align_flag_top",
    "borderSize_",
    "button_icon_align_",
    "button_icon_align_bottom",
    "button_icon_align_left",
    "button_icon_align_right",
    "button_icon_align_top",
    "button_state_",
    "button_state_check",
    "button_state_disable",
    "button_state_down",
    "button_state_flag_",
    "button_state_flag_WindowMaximize",
    "button_state_flag_WindowRestore",
    "button_state_flag_check",
    "button_state_flag_check_no",
    "button_state_flag_down",
    "button_state_flag_leave",
    "button_state_flag_stay",
    "button_state_leave",
    "button_state_stay",
    "button_style_check",
    "button_style_close",
    "button_style_default",
    "button_style_expand",
    "button_style_icon",
    "button_style_max",
    "button_style_min",
    "button_style_pane_close",
    "button_style_pane_dock_bottom",
    "button_style_pane_dock_left",
    "button_style_pane_dock_right",
    "button_style_pane_dock_top",
    "button_style_pane_lock",
    "button_style_pane_menu",
    "button_style_radio",
    "button_style_scrollbar_down",
    "button_style_scrollbar_left",
    "button_style_scrollbar_right",
    "button_style_scrollbar_slider_h",
    "button_style_scrollbar_slider_v",
    "button_style_scrollbar_up",
    "button_style_slider",
    "button_style_tabBar",
    "button_style_toolBar",
    "button_style_toolBar_left",
    "button_style_toolBar_right",
    "button_type_check",
    "button_type_close",
    "button_type_default",
    "button_type_max",
    "button_type_min",
    "button_type_radio",
    "chat_flag_",
    "chat_flag_center",
    "chat_flag_left",
    "chat_flag_next_row_bubble",
    "chat_flag_right",
    "comboBox_state_",
    "comboBox_state_down",
    "comboBox_state_flag_",
    "comboBox_state_flag_down",
    "comboBox_state_flag_leave",
    "comboBox_state_flag_stay",
    "comboBox_state_leave",
    "comboBox_state_stay",
    "common_state3_",
    "common_state3_down",
    "common_state3_leave",
    "common_state3_stay",
    "easeIn",
    "easeInOut",
    "easeOut",
    "ease_flag_",
    "ease_flag_back",
    "ease_flag_bounce",
    "ease_flag_circ",
    "ease_flag_cubic",
    "ease_flag_elastic",
    "ease_flag_expo",
    "ease_flag_in",
    "ease_flag_inOut",
    "ease_flag_linear",
    "ease_flag_out",
    "ease_flag_quad",
    "ease_flag_quart",
    "ease_flag_quint",
    "ease_flag_sine",
    "ease_type_",
    "edit_data_copy_",
    "edit_data_copy_style_",
    "edit_style_info_",
    "edit_style_type_",
    "edit_style_type_font_color",
    "edit_style_type_image",
    "edit_style_type_obj",
    "edit_textAlign_flag_",
    "edit_textAlign_flag_bottom",
    "edit_textAlign_flag_center",
    "edit_textAlign_flag_center_v",
    "edit_textAlign_flag_left",
    "edit_textAlign_flag_right",
    "edit_textAlign_flag_top",
    "edit_type_",
    "edit_type_chat",
    "edit_type_codeTable",
    "edit_type_editor",
    "edit_type_none",
    "edit_type_richedit",
    "editor_color_",
    "element_position_",
    "element_position_bottom",
    "element_position_left",
    "element_position_no",
    "element_position_right",
    "element_position_top",
    "element_state_flag_",
    "element_state_flag_disable",
    "element_state_flag_down",
    "element_state_flag_enable",
    "element_state_flag_focus",
    "element_state_flag_focusEx",
    "element_state_flag_focusEx_no",
    "element_state_flag_focus_no",
    "element_state_flag_leave",
    "element_state_flag_nothing",
    "element_state_flag_stay",
    "element_style_frameWnd_dock_bottom",
    "element_style_frameWnd_dock_left",
    "element_style_frameWnd_dock_right",
    "element_style_frameWnd_dock_top",
    "element_style_toolBar_separator",
    "element_type_layout",
    "fontStyle_",
    "fontStyle_bold",
    "fontStyle_boldItalic",
    "fontStyle_italic",
    "fontStyle_regular",
    "fontStyle_strikeout",
    "fontStyle_underline",
    "font_info_",
    "frameWnd_cell_type_",
    "frameWnd_cell_type_bodyView",
    "frameWnd_cell_type_group",
    "frameWnd_cell_type_left_right",
    "frameWnd_cell_type_no",
    "frameWnd_cell_type_pane",
    "frameWnd_cell_type_top_bottom",
    "image_draw_type_",
    "image_draw_type_adaptive",
    "image_draw_type_adaptive_border",
    "image_draw_type_default",
    "image_draw_type_fixed_ratio",
    "image_draw_type_stretch",
    "image_draw_type_tile",
    "layout_align_",
    "layout_align_axis_",
    "layout_align_axis_auto",
    "layout_align_axis_center",
    "layout_align_axis_end",
    "layout_align_axis_start",
    "layout_align_bottom",
    "layout_align_center",
    "layout_align_equidistant",
    "layout_align_left",
    "layout_align_right",
    "layout_align_top",
    "layout_size_",
    "layout_size_auto",
    "layout_size_disable",
    "layout_size_fill",
    "layout_size_fixed",
    "layout_size_percent",
    "layout_size_weight",
    "layout_state_flag_",
    "layout_state_flag_body",
    "layout_state_flag_full",
    "layout_state_flag_layout_body",
    "layout_state_flag_nothing",
    "listBox_item_",
    "listBox_item_info_",
    "listBox_state_flag_",
    "listBox_state_flag_item_leave",
    "listBox_state_flag_item_select",
    "listBox_state_flag_item_select_no",
    "listBox_state_flag_item_stay",
    "listBox_style_comboBox",
    "listHeader_state_flag_",
    "listHeader_state_flag_item_down",
    "listHeader_state_flag_item_leave",
    "listHeader_state_flag_item_stay",
    "listItemTemp_type_",
    "listItemTemp_type_list",
    "listItemTemp_type_listBox",
    "listItemTemp_type_listView",
    "listItemTemp_type_listView_group",
    "listItemTemp_type_listView_item",
    "listItemTemp_type_list_head",
    "listItemTemp_type_list_item",
    "listItemTemp_type_tree",
    "listView_item_",
    "listView_item_id_",
    "listView_state_flag_",
    "listView_state_flag_group_leave",
    "listView_state_flag_group_select",
    "listView_state_flag_group_select_no",
    "listView_state_flag_group_stay",
    "listView_state_flag_item_leave",
    "listView_state_flag_item_select",
    "listView_state_flag_item_select_no",
    "listView_state_flag_item_stay",
    "list_drawItemBk_flag_",
    "list_drawItemBk_flag_group_leave",
    "list_drawItemBk_flag_group_stay",
    "list_drawItemBk_flag_leave",
    "list_drawItemBk_flag_line",
    "list_drawItemBk_flag_lineV",
    "list_drawItemBk_flag_nothing",
    "list_drawItemBk_flag_select",
    "list_drawItemBk_flag_stay",
    "list_header_item_",
    "list_item_",
    "list_item_state_",
    "list_item_state_cache",
    "list_item_state_leave",
    "list_item_state_select",
    "list_item_state_stay",
    "list_state_flag_",
    "list_state_flag_item_leave",
    "list_state_flag_item_select",
    "list_state_flag_item_select_no",
    "list_state_flag_item_stay",
    "menu_drawBackground_",
    "menu_drawItem_",
    "menu_item_flag_",
    "menu_item_flag_check",
    "menu_item_flag_disable",
    "menu_item_flag_normal",
    "menu_item_flag_popup",
    "menu_item_flag_select",
    "menu_item_flag_separator",
    "menu_item_flag_stay",
    "menu_popupWnd_",
    "menu_popup_position_",
    "menu_popup_position_center_bottom",
    "menu_popup_position_center_left",
    "menu_popup_position_center_right",
    "menu_popup_position_center_top",
    "menu_popup_position_left_bottom",
    "menu_popup_position_left_top",
    "menu_popup_position_right_bottom",
    "menu_popup_position_right_top",
    "messageBox_flag_",
    "messageBox_flag_cancel",
    "messageBox_flag_icon_appicon",
    "messageBox_flag_icon_error",
    "messageBox_flag_icon_info",
    "messageBox_flag_icon_qustion",
    "messageBox_flag_icon_shield",
    "messageBox_flag_icon_warning",
    "messageBox_flag_ok",
    "messageBox_flag_other",
    "monthCal_button_type_",
    "monthCal_button_type_last_month",
    "monthCal_button_type_last_year",
    "monthCal_button_type_next_month",
    "monthCal_button_type_next_year",
    "monthCal_button_type_today",
    "monthCal_item_",
    "monthCal_state_flag_",
    "monthCal_state_flag_item_cur_month",
    "monthCal_state_flag_item_down",
    "monthCal_state_flag_item_last_month",
    "monthCal_state_flag_item_leave",
    "monthCal_state_flag_item_next_month",
    "monthCal_state_flag_item_select",
    "monthCal_state_flag_item_select_no",
    "monthCal_state_flag_item_stay",
    "monthCal_state_flag_item_today",
    "monthCal_state_flag_leave",
    "notifyMsg_skin_",
    "notifyMsg_skin_error",
    "notifyMsg_skin_message",
    "notifyMsg_skin_no",
    "notifyMsg_skin_success",
    "notifyMsg_skin_warning",
    "pane_align_",
    "pane_align_bottom",
    "pane_align_center",
    "pane_align_error",
    "pane_align_left",
    "pane_align_right",
    "pane_align_top",
    "pane_state_",
    "pane_state_any",
    "pane_state_dock",
    "pane_state_error",
    "pane_state_flag_",
    "pane_state_flag_body",
    "pane_state_flag_caption",
    "pane_state_flag_leave",
    "pane_state_flag_stay",
    "pane_state_float",
    "pane_state_lock",
    "position_",
    "position_flag_",
    "position_flag_bottom",
    "position_flag_center",
    "position_flag_left",
    "position_flag_leftBottom",
    "position_flag_leftTop",
    "position_flag_right",
    "position_flag_rightBottom",
    "position_flag_rightTop",
    "position_flag_top",
    "propertyGrid_item_",
    "propertyGrid_item_type_",
    "propertyGrid_item_type_comboBox",
    "propertyGrid_item_type_edit",
    "propertyGrid_item_type_edit_color",
    "propertyGrid_item_type_edit_file",
    "propertyGrid_item_type_edit_set",
    "propertyGrid_item_type_group",
    "propertyGrid_item_type_panel",
    "propertyGrid_item_type_text",
    "propertyGrid_state_flag_",
    "propertyGrid_state_flag_group_expand",
    "propertyGrid_state_flag_group_expand_no",
    "propertyGrid_state_flag_group_leave",
    "propertyGrid_state_flag_item_leave",
    "propertyGrid_state_flag_item_select",
    "propertyGrid_state_flag_item_select_no",
    "propertyGrid_state_flag_item_stay",
    "table_flag_",
    "table_flag_full",
    "table_flag_none",
    "table_line_flag_",
    "table_line_flag_bottom",
    "table_line_flag_bottom2",
    "table_line_flag_left",
    "table_line_flag_left2",
    "table_line_flag_right",
    "table_line_flag_right2",
    "table_line_flag_top",
    "table_line_flag_top2",
    "textAlignFlag_bottom",
    "textAlignFlag_center",
    "textAlignFlag_left",
    "textAlignFlag_left_top",
    "textAlignFlag_right",
    "textAlignFlag_top",
    "textAlignFlag_vcenter",
    "textFormatFlag_",
    "textFormatFlag_DirectionRightToLeft",
    "textFormatFlag_DirectionVertical",
    "textFormatFlag_DisplayFormatControl",
    "textFormatFlag_LineLimit",
    "textFormatFlag_MeasureTrailingSpaces",
    "textFormatFlag_NoClip",
    "textFormatFlag_NoFitBlackBox",
    "textFormatFlag_NoFontFallback",
    "textFormatFlag_NoWrap",
    "textTrimming_Character",
    "textTrimming_EllipsisCharacter",
    "textTrimming_EllipsisPath",
    "textTrimming_EllipsisWord",
    "textTrimming_None",
    "textTrimming_Word",
    "tree_drag_item_",
    "tree_item_",
    "tree_item_state_",
    "tree_item_state_leave",
    "tree_item_state_select",
    "tree_item_state_stay",
    "tree_state_flag_",
    "tree_state_flag_group",
    "tree_state_flag_group_no",
    "tree_state_flag_item_leave",
    "tree_state_flag_item_select",
    "tree_state_flag_item_select_no",
    "tree_state_flag_item_stay",
    "window_position_",
    "window_position_body",
    "window_position_bottom",
    "window_position_error",
    "window_position_left",
    "window_position_right",
    "window_position_top",
    "window_position_window",
    "window_state_flag_",
    "window_state_flag_body_leave",
    "window_state_flag_bottom_leave",
    "window_state_flag_layout_body",
    "window_state_flag_leave",
    "window_state_flag_left_leave",
    "window_state_flag_nothing",
    "window_state_flag_right_leave",
    "window_state_flag_top_leave",
    "window_style_",
    "window_style_allow_maxWindow",
    "window_style_border",
    "window_style_btn_close",
    "window_style_btn_max",
    "window_style_btn_min",
    "window_style_caption",
    "window_style_center",
    "window_style_default",
    "window_style_drag_border",
    "window_style_drag_window",
    "window_style_icon",
    "window_style_modal",
    "window_style_modal_simple",
    "window_style_nothing",
    "window_style_pop",
    "window_style_simple",
    "window_style_title",
    "window_transparent_",
    "window_transparent_false",
    "window_transparent_shadow",
    "window_transparent_shaped",
    "window_transparent_simple",
    "window_transparent_win7",
    "xc_ex_error",
    "xc_style_default",
    "zorder_",
    "zorder_after",
    "zorder_before",
    "zorder_bottom",
    "zorder_top"
]


class POINT():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> POINT: ...
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg0: int) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg0: int) -> None:
        pass
    pass
class POINTF():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> POINTF: ...
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg0: float) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg0: float) -> None:
        pass
    pass
class RECT():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> RECT: ...
    @property
    def bottom(self) -> int:
        """
        :type: int
        """
    @bottom.setter
    def bottom(self, arg0: int) -> None:
        pass
    @property
    def left(self) -> int:
        """
        :type: int
        """
    @left.setter
    def left(self, arg0: int) -> None:
        pass
    @property
    def right(self) -> int:
        """
        :type: int
        """
    @right.setter
    def right(self, arg0: int) -> None:
        pass
    @property
    def top(self) -> int:
        """
        :type: int
        """
    @top.setter
    def top(self, arg0: int) -> None:
        pass
    pass
class RECTF():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> RECTF: ...
    @property
    def bottom(self) -> float:
        """
        :type: float
        """
    @bottom.setter
    def bottom(self, arg0: float) -> None:
        pass
    @property
    def left(self) -> float:
        """
        :type: float
        """
    @left.setter
    def left(self, arg0: float) -> None:
        pass
    @property
    def right(self) -> float:
        """
        :type: float
        """
    @right.setter
    def right(self, arg0: float) -> None:
        pass
    @property
    def top(self) -> float:
        """
        :type: float
        """
    @top.setter
    def top(self, arg0: float) -> None:
        pass
    pass
class SIZE():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> SIZE: ...
    @property
    def cx(self) -> int:
        """
        :type: int
        """
    @cx.setter
    def cx(self, arg0: int) -> None:
        pass
    @property
    def cy(self) -> int:
        """
        :type: int
        """
    @cy.setter
    def cy(self, arg0: int) -> None:
        pass
    pass
class XObject():
    def __eq__(self, arg0: XObject) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XObject: ...
    def getHandle(self) -> int: ...
    def getProperty(self, name: str) -> str: ...
    def getType(self) -> XC_OBJECT_TYPE: ...
    def getTypeBase(self) -> XC_OBJECT_TYPE: ...
    def getTypeEx(self) -> XC_OBJECT_TYPE_EX: ...
    def releaseAnimation(self, end: bool = False) -> None: ...
    def setProperty(self, name: str, value: str) -> bool: ...
    def setTypeEx(self, nType: XC_OBJECT_TYPE_EX) -> None: ...
    __hash__ = None
    pass
class XAdapter(XObject):
    def addRef(self) -> int: ...
    @staticmethod
    def cast(handle: int) -> XAdapter: ...
    def destroy(self) -> None: ...
    def enableAutoDestroy(self, enable: int) -> None: ...
    def getRefCount(self) -> int: ...
    def isValid(self) -> bool: ...
    def release(self) -> int: ...
    pass
class XAdapterMap(XAdapter, XObject):
    def __init__(self) -> None: ...
    def addItemImage(self, name: str, image: XImage) -> bool: ...
    def addItemText(self, name: str, value: str) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XAdapterMap: ...
    def deleteItem(self, name: str) -> bool: ...
    def getCount(self) -> int: ...
    def getItemImage(self, name: str) -> XImage: ...
    def getItemText(self, name: str) -> str: ...
    def isValid(self) -> bool: ...
    def setItemImage(self, name: str, image: XImage) -> bool: ...
    def setItemText(self, name: str, value: str) -> bool: ...
    pass
class XAdapterTable(XAdapter, XObject):
    def __init__(self) -> None: ...
    def addColumn(self, name: str) -> int: ...
    def addItemImage(self, image: XImage) -> int: ...
    def addItemImageEx(self, name: str, image: XImage) -> int: ...
    def addItemText(self, value: str) -> int: ...
    def addItemTextEx(self, name: str, value: str) -> int: ...
    @staticmethod
    def cast(handle: int) -> XAdapterTable: ...
    def deleteColumnAll(self) -> None: ...
    def deleteItem(self, item: int) -> bool: ...
    def deleteItemAll(self) -> None: ...
    def deleteItemEx(self, item: int, count: int) -> bool: ...
    def getCount(self) -> int: ...
    def getCountColumn(self) -> int: ...
    def getItemDataType(self, item: int, column: int) -> adapter_date_type_: ...
    def getItemDataTypeEx(self, item: int, name: str) -> adapter_date_type_: ...
    def getItemFloat(self, item: int, column: int) -> float: ...
    def getItemFloatEx(self, item: int, name: str) -> float: ...
    def getItemImage(self, item: int, column: int) -> XImage: ...
    def getItemImageEx(self, item: int, name: str) -> XImage: ...
    def getItemInt(self, item: int, column: int) -> int: ...
    def getItemIntEx(self, item: int, name: str) -> int: ...
    def getItemText(self, item: int, column: int) -> str: ...
    def getItemTextEx(self, item: int, name: str) -> str: ...
    def insertItemImage(self, item: int, image: XImage) -> int: ...
    def insertItemImageEx(self, item: int, name: str, image: XImage) -> int: ...
    def insertItemText(self, item: int, value: str) -> int: ...
    def insertItemTextEx(self, item: int, name: str, value: str) -> int: ...
    def isValid(self) -> bool: ...
    def setColumn(self, colName: str) -> int: ...
    def setItemFloat(self, item: int, column: int, value: float) -> bool: ...
    def setItemFloatEx(self, item: int, name: str, value: float) -> bool: ...
    def setItemImage(self, item: int, column: int, image: XImage) -> bool: ...
    def setItemImageEx(self, item: int, name: str, image: XImage) -> bool: ...
    def setItemInt(self, item: int, column: int, value: int) -> bool: ...
    def setItemIntEx(self, item: int, name: str, value: int) -> bool: ...
    def setItemText(self, item: int, column: int, value: str) -> bool: ...
    def setItemTextEx(self, item: int, name: str, value: str) -> bool: ...
    def sort(self, column: int, ascending: bool) -> None: ...
    pass
class XAdapterTree(XAdapter, XObject):
    def __init__(self) -> None: ...
    def addColumn(self, name: str) -> int: ...
    @staticmethod
    def cast(handle: int) -> XAdapterTree: ...
    def deleteColumnAll(self) -> None: ...
    def deleteItem(self, nId: int) -> bool: ...
    def deleteItemAll(self) -> None: ...
    def getCount(self) -> int: ...
    def getCountColumn(self) -> int: ...
    def getItemImage(self, nId: int, column: int) -> XImage: ...
    def getItemImageEx(self, nId: int, name: str) -> HIMAGE__: ...
    def getItemText(self, nId: int, column: int) -> str: ...
    def getItemTextEx(self, nId: int, name: str) -> str: ...
    def insertItemImage(self, image: XImage, parentId: int = 0, insertId: int = -3) -> int: ...
    def insertItemImageEx(self, name: str, image: XImage, parentId: int = 0, insertId: int = -3) -> int: ...
    def insertItemText(self, value: str, parentId: int = 0, insertId: int = -3) -> int: ...
    def insertItemTextEx(self, name: str, value: str, parentId: int = 0, insertId: int = -3) -> int: ...
    def isValid(self) -> bool: ...
    def setColumn(self, colName: str) -> int: ...
    def setItemImage(self, nId: int, column: int, image: XImage) -> bool: ...
    def setItemImageEx(self, nId: int, name: str, image: XImage) -> bool: ...
    def setItemText(self, nId: int, column: int, value: str) -> bool: ...
    def setItemTextEx(self, nId: int, name: str, value: str) -> bool: ...
    pass
class XAnimation(XObject):
    @staticmethod
    def cast(handle: int) -> XAnimation: ...
    def enableAutoDestroy(self, enable: bool) -> None: ...
    def getObjectUI(self) -> XObject: ...
    def getUserData(self) -> None: ...
    def pause(self) -> None: ...
    def release(self, end: bool) -> None: ...
    @staticmethod
    def releaseEx(objectUI: XObject, end: bool = False) -> None: ...
    def run(self, obejctUI: XObjectUI) -> None: ...
    def setCallback(self, callback: typing.Callable[[XAnimation, int], None]) -> None: ...
    def setUserData(self, userdata: object) -> None: ...
    def start(self) -> None: ...
    pass
class XAnimationGroup(XAnimation, XObject):
    def __init__(self, loopCount: int = 0) -> None: ...
    def addItem(self, sequence: XAnimationSequence) -> None: ...
    @staticmethod
    def cast(handle: int) -> XAnimationGroup: ...
    def isValid(self) -> bool: ...
    pass
class XAnimationItem(XObject):
    @staticmethod
    def cast(handle: int) -> XAnimationItem: ...
    def enableAutoDestroy(self, enable: bool) -> None: ...
    def enableCompleteRelease(self, enable: bool) -> None: ...
    def getUserData(self) -> None: ...
    def isValid(self) -> bool: ...
    def moveSetFlag(self, flags: int) -> None: ...
    def rotateSetCenter(self, x: float, y: float, offset: bool) -> None: ...
    def scaleSetPosition(self, position: position_flag_) -> None: ...
    def setCallback(self, callback: typing.Callable[[XAnimationItem, float], None]) -> None: ...
    def setUserData(self, userdata: object) -> None: ...
    pass
class XAnimationSequence(XAnimation, XObject):
    def __init__(self, xcObject: XObject = None, loopCount: int = 0) -> None: ...
    def alpha(self, duration: int, alpha: int, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def alphaEx(self, duration: int, fromAlpha: int, toAlpha: int, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    @staticmethod
    def cast(handle: int) -> XAnimationSequence: ...
    def color(self, duration: int, color: int, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def colorEx(self, duration: int, fromColor: int, toColor: int, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def delay(self, duration: float) -> XAnimationItem: ...
    def delayEx(self, duration: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def destroyObjectUI(self, duration: float) -> XAnimationItem: ...
    def isValid(self) -> bool: ...
    def layoutHeight(self, duration: int, sizeType: layout_size_, height: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def layoutSize(self, duration: int, widthSizeType: layout_size_, width: float, heightSizeType: layout_size_, height: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def layoutWidth(self, duration: int, sizeType: layout_size_, width: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def move(self, duration: int, x: float, y: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def moveEx(self, duration: int, fromX: float, fromY: float, toX: float, toY: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def rotate(self, duration: int, angle: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def rotateEx(self, duration: int, fromAngle: float, toAngle: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def scale(self, duration: int, scaleX: float, scaleY: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = True) -> XAnimationItem: ...
    def scaleSize(self, duration: int, width: float, height: float, loopCount: int = 1, easeFlag: int = 0, goBack: bool = False) -> XAnimationItem: ...
    def show(self, duration: float, show: bool) -> XAnimationItem: ...
    pass
class XApp():
    def __init__(self, useD2D: bool = False) -> None: ...
    def addFileSearchPath(self, path: str) -> None: ...
    def debugToFileInfo(self, file: str) -> None: ...
    def enableAutoExitApp(self, enable: bool) -> None: ...
    def enableDebugFile(self, enable: bool) -> None: ...
    def enableErrorMessageBox(self, enable: bool) -> None: ...
    def enableGdiDrawText(self, enable: bool) -> None: ...
    def enableResMonitor(self, enable: bool) -> None: ...
    def exit(self) -> None: ...
    def run(self) -> None: ...
    def setD2dTextRenderingMode(self, mode: XC_DWRITE_RENDERING_MODE) -> None: ...
    def setLayoutFrameColor(self, color: int) -> None: ...
    def setPaintFrequency(self, milliseconds: int) -> None: ...
    def setTextRenderingHint(self, nType: int) -> None: ...
    def showLayoutFrame(self, enable: bool) -> None: ...
    def showSvgFrame(self, enable: bool) -> None: ...
    pass
class XBkManager(XObject):
    def __init__(self) -> None: ...
    def addBorder(self, state: int, color: int, width: int, bkId: int = 0) -> None: ...
    def addFill(self, state: int, color: int, bkId: int = 0) -> None: ...
    def addImage(self, state: int, image: XImage, bkId: int = 0) -> None: ...
    def addInfo(self, text: str) -> int: ...
    def addRef(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XBkManager: ...
    def clear(self) -> None: ...
    def destroy(self) -> None: ...
    def draw(self, state: int, draw: XDraw, rect: XRect) -> bool: ...
    def drawEx(self, state: int, draw: XDraw, rect: XRect, stateEx: int) -> bool: ...
    def enableAutoDestroy(self, enable: int) -> None: ...
    def getBkObject(self, bkId: int = 0) -> XBkObject: ...
    def getBkObjectHandle(self, bkId: int = 0) -> int: ...
    def getCount(self) -> int: ...
    def getRefCount(self) -> int: ...
    def getStateTextColor(self, state: int) -> int: ...
    def isValid(self) -> bool: ...
    def release(self) -> None: ...
    def setInfo(self, text: str) -> int: ...
    pass
class XBkObject():
    @staticmethod
    def cast(handle: int) -> XBkObject: ...
    def enableBorder(self, enable: bool) -> None: ...
    def enableFill(self, enable: bool) -> None: ...
    def getAlign(self) -> int: ...
    def getBorderColor(self) -> int: ...
    def getBorderWidth(self) -> int: ...
    def getFillColor(self) -> int: ...
    def getFont(self) -> XFont: ...
    def getId(self) -> int: ...
    def getImage(self) -> XImage: ...
    def getMargin(self) -> XRect: ...
    def getRectRoundAngle(self) -> XRect: ...
    def getRotate(self) -> int: ...
    def getText(self) -> str: ...
    def getTextAlign(self) -> int: ...
    def isBorder(self) -> bool: ...
    def isFill(self) -> bool: ...
    def setAlign(self, flags: int) -> None: ...
    def setBorderColor(self, color: int) -> None: ...
    def setBorderWidth(self, width: int) -> None: ...
    def setFillColor(self, color: int) -> None: ...
    def setFont(self, font: XFont) -> None: ...
    def setImage(self, image: XImage) -> None: ...
    def setMargin(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setRectRoundAngle(self, leftTop: int, leftBottom: int, rightTop: int, rightBottom: int) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlign(self, align: int) -> None: ...
    pass
class XObjectUI(XObject):
    @staticmethod
    def cast(handle: int) -> XObjectUI: ...
    def enableCss(self, enable: bool) -> None: ...
    def findObjectByName(self, name: str) -> XObject: ...
    def findObjectByUID(self, nID: int) -> XObject: ...
    def findObjectByUIDName(self, name: str) -> XObject: ...
    def getCssName(self) -> str: ...
    def getStyle(self) -> XC_OBJECT_STYLE: ...
    def isValid(self) -> bool: ...
    def loadLayout(self, fileName: str, parent: XObject = None, attachHWND: int = 0) -> bool: ...
    def loadLayoutFromString(self, xml: str, parent: XObject = None, attachHWND: int = 0) -> bool: ...
    def loadLayoutZip(self, zipFileName: str, fileName: str, password: str, parent: XObject = None, attachHWND: int = 0) -> bool: ...
    def loadLayoutZipMem(self, data: bytes, fileName: str, password: str, parent: XObject = None, attachHWND: int = 0) -> bool: ...
    def setCssName(self, name: str) -> None: ...
    def setStyle(self, style: XC_OBJECT_STYLE) -> None: ...
    pass
class XC_DWRITE_RENDERING_MODE():
    """
    Members:

      XC_DWRITE_RENDERING_MODE_DEFAULT

      XC_DWRITE_RENDERING_MODE_ALIASED

      XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC

      XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL

      XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL

      XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC

      XC_DWRITE_RENDERING_MODE_OUTLINE
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    XC_DWRITE_RENDERING_MODE_ALIASED: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_ALIASED: 1>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: 2>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: 3>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: 4>
    XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: 5>
    XC_DWRITE_RENDERING_MODE_DEFAULT: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_DEFAULT: 0>
    XC_DWRITE_RENDERING_MODE_OUTLINE: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_OUTLINE: 6>
    __members__: dict # value = {'XC_DWRITE_RENDERING_MODE_DEFAULT': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_DEFAULT: 0>, 'XC_DWRITE_RENDERING_MODE_ALIASED': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_ALIASED: 1>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: 2>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: 3>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: 4>, 'XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: 5>, 'XC_DWRITE_RENDERING_MODE_OUTLINE': <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_OUTLINE: 6>}
    pass
class XC_OBJECT_STYLE():
    """
    Members:

      xc_style_default

      button_style_default

      button_style_radio

      button_style_check

      button_style_icon

      button_style_expand

      button_style_close

      button_style_max

      button_style_min

      button_style_scrollbar_left

      button_style_scrollbar_right

      button_style_scrollbar_up

      button_style_scrollbar_down

      button_style_scrollbar_slider_h

      button_style_scrollbar_slider_v

      button_style_tabBar

      button_style_slider

      button_style_toolBar

      button_style_toolBar_left

      button_style_toolBar_right

      button_style_pane_close

      button_style_pane_lock

      button_style_pane_menu

      button_style_pane_dock_left

      button_style_pane_dock_top

      button_style_pane_dock_right

      button_style_pane_dock_bottom

      element_style_frameWnd_dock_left

      element_style_frameWnd_dock_top

      element_style_frameWnd_dock_right

      element_style_frameWnd_dock_bottom

      element_style_toolBar_separator

      listBox_style_comboBox
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'xc_style_default': <XC_OBJECT_STYLE.xc_style_default: 0>, 'button_style_default': <XC_OBJECT_STYLE.xc_style_default: 0>, 'button_style_radio': <XC_OBJECT_STYLE.button_style_radio: 1>, 'button_style_check': <XC_OBJECT_STYLE.button_style_check: 2>, 'button_style_icon': <XC_OBJECT_STYLE.button_style_icon: 3>, 'button_style_expand': <XC_OBJECT_STYLE.button_style_expand: 4>, 'button_style_close': <XC_OBJECT_STYLE.button_style_close: 5>, 'button_style_max': <XC_OBJECT_STYLE.button_style_max: 6>, 'button_style_min': <XC_OBJECT_STYLE.button_style_min: 7>, 'button_style_scrollbar_left': <XC_OBJECT_STYLE.button_style_scrollbar_left: 8>, 'button_style_scrollbar_right': <XC_OBJECT_STYLE.button_style_scrollbar_right: 9>, 'button_style_scrollbar_up': <XC_OBJECT_STYLE.button_style_scrollbar_up: 10>, 'button_style_scrollbar_down': <XC_OBJECT_STYLE.button_style_scrollbar_down: 11>, 'button_style_scrollbar_slider_h': <XC_OBJECT_STYLE.button_style_scrollbar_slider_h: 12>, 'button_style_scrollbar_slider_v': <XC_OBJECT_STYLE.button_style_scrollbar_slider_v: 13>, 'button_style_tabBar': <XC_OBJECT_STYLE.button_style_tabBar: 14>, 'button_style_slider': <XC_OBJECT_STYLE.button_style_slider: 15>, 'button_style_toolBar': <XC_OBJECT_STYLE.button_style_toolBar: 16>, 'button_style_toolBar_left': <XC_OBJECT_STYLE.button_style_toolBar_left: 17>, 'button_style_toolBar_right': <XC_OBJECT_STYLE.button_style_toolBar_right: 18>, 'button_style_pane_close': <XC_OBJECT_STYLE.button_style_pane_close: 19>, 'button_style_pane_lock': <XC_OBJECT_STYLE.button_style_pane_lock: 20>, 'button_style_pane_menu': <XC_OBJECT_STYLE.button_style_pane_menu: 21>, 'button_style_pane_dock_left': <XC_OBJECT_STYLE.button_style_pane_dock_left: 22>, 'button_style_pane_dock_top': <XC_OBJECT_STYLE.button_style_pane_dock_top: 23>, 'button_style_pane_dock_right': <XC_OBJECT_STYLE.button_style_pane_dock_right: 24>, 'button_style_pane_dock_bottom': <XC_OBJECT_STYLE.button_style_pane_dock_bottom: 25>, 'element_style_frameWnd_dock_left': <XC_OBJECT_STYLE.element_style_frameWnd_dock_left: 26>, 'element_style_frameWnd_dock_top': <XC_OBJECT_STYLE.element_style_frameWnd_dock_top: 27>, 'element_style_frameWnd_dock_right': <XC_OBJECT_STYLE.element_style_frameWnd_dock_right: 28>, 'element_style_frameWnd_dock_bottom': <XC_OBJECT_STYLE.element_style_frameWnd_dock_bottom: 29>, 'element_style_toolBar_separator': <XC_OBJECT_STYLE.element_style_toolBar_separator: 30>, 'listBox_style_comboBox': <XC_OBJECT_STYLE.listBox_style_comboBox: 31>}
    button_style_check: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_check: 2>
    button_style_close: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_close: 5>
    button_style_default: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.xc_style_default: 0>
    button_style_expand: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_expand: 4>
    button_style_icon: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_icon: 3>
    button_style_max: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_max: 6>
    button_style_min: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_min: 7>
    button_style_pane_close: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_close: 19>
    button_style_pane_dock_bottom: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_bottom: 25>
    button_style_pane_dock_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_left: 22>
    button_style_pane_dock_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_right: 24>
    button_style_pane_dock_top: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_top: 23>
    button_style_pane_lock: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_lock: 20>
    button_style_pane_menu: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_menu: 21>
    button_style_radio: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_radio: 1>
    button_style_scrollbar_down: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_down: 11>
    button_style_scrollbar_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_left: 8>
    button_style_scrollbar_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_right: 9>
    button_style_scrollbar_slider_h: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_h: 12>
    button_style_scrollbar_slider_v: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_v: 13>
    button_style_scrollbar_up: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_up: 10>
    button_style_slider: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_slider: 15>
    button_style_tabBar: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_tabBar: 14>
    button_style_toolBar: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_toolBar: 16>
    button_style_toolBar_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_toolBar_left: 17>
    button_style_toolBar_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_toolBar_right: 18>
    element_style_frameWnd_dock_bottom: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_bottom: 29>
    element_style_frameWnd_dock_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_left: 26>
    element_style_frameWnd_dock_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_right: 28>
    element_style_frameWnd_dock_top: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_top: 27>
    element_style_toolBar_separator: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_toolBar_separator: 30>
    listBox_style_comboBox: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.listBox_style_comboBox: 31>
    xc_style_default: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.xc_style_default: 0>
    pass
class XC_OBJECT_TYPE():
    """
    Members:

      XC_ERROR

      XC_NOTHING

      XC_WINDOW

      XC_MODALWINDOW

      XC_FRAMEWND

      XC_FLOATWND

      XC_COMBOBOXWINDOW

      XC_POPUPMENUWINDOW

      XC_POPUPMENUCHILDWINDOW

      XC_OBJECT_UI

      XC_WIDGET_UI

      XC_ELE

      XC_ELE_LAYOUT

      XC_LAYOUT_FRAME

      XC_BUTTON

      XC_EDIT

      XC_EDITOR

      XC_RICHEDIT

      XC_COMBOBOX

      XC_SCROLLBAR

      XC_SCROLLVIEW

      XC_LIST

      XC_LISTBOX

      XC_LISTVIEW

      XC_TREE

      XC_MENUBAR

      XC_SLIDERBAR

      XC_PROGRESSBAR

      XC_TOOLBAR

      XC_MONTHCAL

      XC_DATETIME

      XC_PROPERTYGRID

      XC_EDIT_COLOR

      XC_EDIT_SET

      XC_TABBAR

      XC_TEXTLINK

      XC_PANE

      XC_PANE_SPLIT

      XC_MENUBAR_BUTTON

      XC_EDIT_FILE

      XC_EDIT_FOLDER

      XC_LIST_HEADER

      XC_SHAPE

      XC_SHAPE_TEXT

      XC_SHAPE_PICTURE

      XC_SHAPE_RECT

      XC_SHAPE_ELLIPSE

      XC_SHAPE_LINE

      XC_SHAPE_GROUPBOX

      XC_SHAPE_GIF

      XC_SHAPE_TABLE

      XC_MENU

      XC_IMAGE

      XC_IMAGE_TEXTURE

      XC_HDRAW

      XC_FONT

      XC_IMAGE_FRAME

      XC_SVG

      XC_LAYOUT_OBJECT

      XC_ADAPTER

      XC_ADAPTER_TABLE

      XC_ADAPTER_TREE

      XC_ADAPTER_LISTVIEW

      XC_ADAPTER_MAP

      XC_BKINFOM

      XC_LAYOUT_LISTVIEW

      XC_LAYOUT_LIST

      XC_LAYOUT_OBJECT_GROUP

      XC_LAYOUT_OBJECT_ITEM

      XC_LAYOUT_PANEL

      XC_LAYOUT_BOX

      XC_ANIMATION_SEQUENCE

      XC_ANIMATION_GROUP

      XC_ANIMATION_ITEM
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    XC_ADAPTER: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER: 102>
    XC_ADAPTER_LISTVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_LISTVIEW: 105>
    XC_ADAPTER_MAP: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_MAP: 106>
    XC_ADAPTER_TABLE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_TABLE: 103>
    XC_ADAPTER_TREE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_TREE: 104>
    XC_ANIMATION_GROUP: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ANIMATION_GROUP: 132>
    XC_ANIMATION_ITEM: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ANIMATION_ITEM: 133>
    XC_ANIMATION_SEQUENCE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ANIMATION_SEQUENCE: 131>
    XC_BKINFOM: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_BKINFOM: 116>
    XC_BUTTON: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_BUTTON: 22>
    XC_COMBOBOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_COMBOBOX: 24>
    XC_COMBOBOXWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_COMBOBOXWINDOW: 11>
    XC_DATETIME: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_DATETIME: 36>
    XC_EDIT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT: 45>
    XC_EDITOR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDITOR: 46>
    XC_EDIT_COLOR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_COLOR: 38>
    XC_EDIT_FILE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_FILE: 50>
    XC_EDIT_FOLDER: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_FOLDER: 51>
    XC_EDIT_SET: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_SET: 39>
    XC_ELE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ELE: 21>
    XC_ELE_LAYOUT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ELE_LAYOUT: 53>
    XC_ERROR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ERROR: -1>
    XC_FLOATWND: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_FLOATWND: 4>
    XC_FONT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_FONT: 84>
    XC_FRAMEWND: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_FRAMEWND: 3>
    XC_HDRAW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_HDRAW: 83>
    XC_IMAGE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
    XC_IMAGE_FRAME: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_IMAGE_FRAME: 88>
    XC_IMAGE_TEXTURE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
    XC_LAYOUT_BOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_BOX: 124>
    XC_LAYOUT_FRAME: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_FRAME: 54>
    XC_LAYOUT_LIST: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_LIST: 112>
    XC_LAYOUT_LISTVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_LISTVIEW: 111>
    XC_LAYOUT_OBJECT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT: 101>
    XC_LAYOUT_OBJECT_GROUP: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_GROUP: 113>
    XC_LAYOUT_OBJECT_ITEM: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_ITEM: 114>
    XC_LAYOUT_PANEL: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_PANEL: 115>
    XC_LIST: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LIST: 27>
    XC_LISTBOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LISTBOX: 28>
    XC_LISTVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LISTVIEW: 29>
    XC_LIST_HEADER: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LIST_HEADER: 52>
    XC_MENU: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MENU: 81>
    XC_MENUBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MENUBAR: 31>
    XC_MENUBAR_BUTTON: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MENUBAR_BUTTON: 44>
    XC_MODALWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MODALWINDOW: 2>
    XC_MONTHCAL: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MONTHCAL: 35>
    XC_NOTHING: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_NOTHING: 0>
    XC_OBJECT_UI: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_OBJECT_UI: 19>
    XC_PANE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PANE: 42>
    XC_PANE_SPLIT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PANE_SPLIT: 43>
    XC_POPUPMENUCHILDWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_POPUPMENUCHILDWINDOW: 13>
    XC_POPUPMENUWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_POPUPMENUWINDOW: 12>
    XC_PROGRESSBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PROGRESSBAR: 33>
    XC_PROPERTYGRID: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PROPERTYGRID: 37>
    XC_RICHEDIT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_RICHEDIT: 23>
    XC_SCROLLBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SCROLLBAR: 25>
    XC_SCROLLVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SCROLLVIEW: 26>
    XC_SHAPE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE: 61>
    XC_SHAPE_ELLIPSE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_ELLIPSE: 65>
    XC_SHAPE_GIF: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_GIF: 68>
    XC_SHAPE_GROUPBOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_GROUPBOX: 67>
    XC_SHAPE_LINE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_LINE: 66>
    XC_SHAPE_PICTURE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_PICTURE: 63>
    XC_SHAPE_RECT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_RECT: 64>
    XC_SHAPE_TABLE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_TABLE: 69>
    XC_SHAPE_TEXT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_TEXT: 62>
    XC_SLIDERBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SLIDERBAR: 32>
    XC_SVG: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SVG: 89>
    XC_TABBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TABBAR: 40>
    XC_TEXTLINK: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TEXTLINK: 41>
    XC_TOOLBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TOOLBAR: 34>
    XC_TREE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TREE: 30>
    XC_WIDGET_UI: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_WIDGET_UI: 20>
    XC_WINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_WINDOW: 1>
    __members__: dict # value = {'XC_ERROR': <XC_OBJECT_TYPE.XC_ERROR: -1>, 'XC_NOTHING': <XC_OBJECT_TYPE.XC_NOTHING: 0>, 'XC_WINDOW': <XC_OBJECT_TYPE.XC_WINDOW: 1>, 'XC_MODALWINDOW': <XC_OBJECT_TYPE.XC_MODALWINDOW: 2>, 'XC_FRAMEWND': <XC_OBJECT_TYPE.XC_FRAMEWND: 3>, 'XC_FLOATWND': <XC_OBJECT_TYPE.XC_FLOATWND: 4>, 'XC_COMBOBOXWINDOW': <XC_OBJECT_TYPE.XC_COMBOBOXWINDOW: 11>, 'XC_POPUPMENUWINDOW': <XC_OBJECT_TYPE.XC_POPUPMENUWINDOW: 12>, 'XC_POPUPMENUCHILDWINDOW': <XC_OBJECT_TYPE.XC_POPUPMENUCHILDWINDOW: 13>, 'XC_OBJECT_UI': <XC_OBJECT_TYPE.XC_OBJECT_UI: 19>, 'XC_WIDGET_UI': <XC_OBJECT_TYPE.XC_WIDGET_UI: 20>, 'XC_ELE': <XC_OBJECT_TYPE.XC_ELE: 21>, 'XC_ELE_LAYOUT': <XC_OBJECT_TYPE.XC_ELE_LAYOUT: 53>, 'XC_LAYOUT_FRAME': <XC_OBJECT_TYPE.XC_LAYOUT_FRAME: 54>, 'XC_BUTTON': <XC_OBJECT_TYPE.XC_BUTTON: 22>, 'XC_EDIT': <XC_OBJECT_TYPE.XC_EDIT: 45>, 'XC_EDITOR': <XC_OBJECT_TYPE.XC_EDITOR: 46>, 'XC_RICHEDIT': <XC_OBJECT_TYPE.XC_RICHEDIT: 23>, 'XC_COMBOBOX': <XC_OBJECT_TYPE.XC_COMBOBOX: 24>, 'XC_SCROLLBAR': <XC_OBJECT_TYPE.XC_SCROLLBAR: 25>, 'XC_SCROLLVIEW': <XC_OBJECT_TYPE.XC_SCROLLVIEW: 26>, 'XC_LIST': <XC_OBJECT_TYPE.XC_LIST: 27>, 'XC_LISTBOX': <XC_OBJECT_TYPE.XC_LISTBOX: 28>, 'XC_LISTVIEW': <XC_OBJECT_TYPE.XC_LISTVIEW: 29>, 'XC_TREE': <XC_OBJECT_TYPE.XC_TREE: 30>, 'XC_MENUBAR': <XC_OBJECT_TYPE.XC_MENUBAR: 31>, 'XC_SLIDERBAR': <XC_OBJECT_TYPE.XC_SLIDERBAR: 32>, 'XC_PROGRESSBAR': <XC_OBJECT_TYPE.XC_PROGRESSBAR: 33>, 'XC_TOOLBAR': <XC_OBJECT_TYPE.XC_TOOLBAR: 34>, 'XC_MONTHCAL': <XC_OBJECT_TYPE.XC_MONTHCAL: 35>, 'XC_DATETIME': <XC_OBJECT_TYPE.XC_DATETIME: 36>, 'XC_PROPERTYGRID': <XC_OBJECT_TYPE.XC_PROPERTYGRID: 37>, 'XC_EDIT_COLOR': <XC_OBJECT_TYPE.XC_EDIT_COLOR: 38>, 'XC_EDIT_SET': <XC_OBJECT_TYPE.XC_EDIT_SET: 39>, 'XC_TABBAR': <XC_OBJECT_TYPE.XC_TABBAR: 40>, 'XC_TEXTLINK': <XC_OBJECT_TYPE.XC_TEXTLINK: 41>, 'XC_PANE': <XC_OBJECT_TYPE.XC_PANE: 42>, 'XC_PANE_SPLIT': <XC_OBJECT_TYPE.XC_PANE_SPLIT: 43>, 'XC_MENUBAR_BUTTON': <XC_OBJECT_TYPE.XC_MENUBAR_BUTTON: 44>, 'XC_EDIT_FILE': <XC_OBJECT_TYPE.XC_EDIT_FILE: 50>, 'XC_EDIT_FOLDER': <XC_OBJECT_TYPE.XC_EDIT_FOLDER: 51>, 'XC_LIST_HEADER': <XC_OBJECT_TYPE.XC_LIST_HEADER: 52>, 'XC_SHAPE': <XC_OBJECT_TYPE.XC_SHAPE: 61>, 'XC_SHAPE_TEXT': <XC_OBJECT_TYPE.XC_SHAPE_TEXT: 62>, 'XC_SHAPE_PICTURE': <XC_OBJECT_TYPE.XC_SHAPE_PICTURE: 63>, 'XC_SHAPE_RECT': <XC_OBJECT_TYPE.XC_SHAPE_RECT: 64>, 'XC_SHAPE_ELLIPSE': <XC_OBJECT_TYPE.XC_SHAPE_ELLIPSE: 65>, 'XC_SHAPE_LINE': <XC_OBJECT_TYPE.XC_SHAPE_LINE: 66>, 'XC_SHAPE_GROUPBOX': <XC_OBJECT_TYPE.XC_SHAPE_GROUPBOX: 67>, 'XC_SHAPE_GIF': <XC_OBJECT_TYPE.XC_SHAPE_GIF: 68>, 'XC_SHAPE_TABLE': <XC_OBJECT_TYPE.XC_SHAPE_TABLE: 69>, 'XC_MENU': <XC_OBJECT_TYPE.XC_MENU: 81>, 'XC_IMAGE': <XC_OBJECT_TYPE.XC_IMAGE: 82>, 'XC_IMAGE_TEXTURE': <XC_OBJECT_TYPE.XC_IMAGE: 82>, 'XC_HDRAW': <XC_OBJECT_TYPE.XC_HDRAW: 83>, 'XC_FONT': <XC_OBJECT_TYPE.XC_FONT: 84>, 'XC_IMAGE_FRAME': <XC_OBJECT_TYPE.XC_IMAGE_FRAME: 88>, 'XC_SVG': <XC_OBJECT_TYPE.XC_SVG: 89>, 'XC_LAYOUT_OBJECT': <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT: 101>, 'XC_ADAPTER': <XC_OBJECT_TYPE.XC_ADAPTER: 102>, 'XC_ADAPTER_TABLE': <XC_OBJECT_TYPE.XC_ADAPTER_TABLE: 103>, 'XC_ADAPTER_TREE': <XC_OBJECT_TYPE.XC_ADAPTER_TREE: 104>, 'XC_ADAPTER_LISTVIEW': <XC_OBJECT_TYPE.XC_ADAPTER_LISTVIEW: 105>, 'XC_ADAPTER_MAP': <XC_OBJECT_TYPE.XC_ADAPTER_MAP: 106>, 'XC_BKINFOM': <XC_OBJECT_TYPE.XC_BKINFOM: 116>, 'XC_LAYOUT_LISTVIEW': <XC_OBJECT_TYPE.XC_LAYOUT_LISTVIEW: 111>, 'XC_LAYOUT_LIST': <XC_OBJECT_TYPE.XC_LAYOUT_LIST: 112>, 'XC_LAYOUT_OBJECT_GROUP': <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_GROUP: 113>, 'XC_LAYOUT_OBJECT_ITEM': <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_ITEM: 114>, 'XC_LAYOUT_PANEL': <XC_OBJECT_TYPE.XC_LAYOUT_PANEL: 115>, 'XC_LAYOUT_BOX': <XC_OBJECT_TYPE.XC_LAYOUT_BOX: 124>, 'XC_ANIMATION_SEQUENCE': <XC_OBJECT_TYPE.XC_ANIMATION_SEQUENCE: 131>, 'XC_ANIMATION_GROUP': <XC_OBJECT_TYPE.XC_ANIMATION_GROUP: 132>, 'XC_ANIMATION_ITEM': <XC_OBJECT_TYPE.XC_ANIMATION_ITEM: 133>}
    pass
class XC_OBJECT_TYPE_EX():
    """
    Members:

      xc_ex_error

      button_type_default

      button_type_radio

      button_type_check

      button_type_close

      button_type_min

      button_type_max

      element_type_layout
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'xc_ex_error': <XC_OBJECT_TYPE_EX.xc_ex_error: -1>, 'button_type_default': <XC_OBJECT_TYPE_EX.button_type_default: 0>, 'button_type_radio': <XC_OBJECT_TYPE_EX.button_type_radio: 1>, 'button_type_check': <XC_OBJECT_TYPE_EX.button_type_check: 2>, 'button_type_close': <XC_OBJECT_TYPE_EX.button_type_close: 3>, 'button_type_min': <XC_OBJECT_TYPE_EX.button_type_min: 4>, 'button_type_max': <XC_OBJECT_TYPE_EX.button_type_max: 5>, 'element_type_layout': <XC_OBJECT_TYPE_EX.element_type_layout: 6>}
    button_type_check: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_check: 2>
    button_type_close: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_close: 3>
    button_type_default: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_default: 0>
    button_type_max: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_max: 5>
    button_type_min: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_min: 4>
    button_type_radio: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_radio: 1>
    element_type_layout: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.element_type_layout: 6>
    xc_ex_error: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.xc_ex_error: -1>
    pass
class XCareInfo():
    @property
    def care(self) -> XObject:
        """
        :type: XObject
        """
    @property
    def height(self) -> int:
        """
        :type: int
        """
    @property
    def width(self) -> int:
        """
        :type: int
        """
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @property
    def y(self) -> int:
        """
        :type: int
        """
    pass
class XWidget(XObjectUI, XObject):
    @staticmethod
    def cast(handle: int) -> XWidget: ...
    def enableLayoutControl(self, enable: bool) -> None: ...
    def getHWND(self) -> int: ...
    def getID(self) -> int: ...
    def getName(self) -> str: ...
    def getParent(self) -> XObject: ...
    def getParentEle(self) -> XObject: ...
    def getUID(self) -> int: ...
    def getWindow(self) -> XObject: ...
    def isLayoutControl(self) -> bool: ...
    def isShow(self) -> bool: ...
    def isValid(self) -> bool: ...
    def layoutEnableFloat(self, float: bool) -> None: ...
    def layoutEnableSwap(self, swap: bool) -> None: ...
    def layoutEnableWrap(self, wrap: bool) -> None: ...
    def layoutGetHeight(self) -> XLayoutSize: ...
    def layoutGetMargin(self) -> XRect: ...
    def layoutGetWidth(self) -> XLayoutSize: ...
    def layoutSetAlign(self, align: layout_align_axis_) -> None: ...
    def layoutSetHeight(self, sizeType: layout_size_, size: int = 0) -> None: ...
    def layoutSetMargin(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def layoutSetMinSize(self, width: int, height: int) -> None: ...
    def layoutSetPosition(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def layoutSetWidth(self, sizeType: layout_size_, size: int = 0) -> None: ...
    def setID(self, id: int) -> None: ...
    def setName(self, name: str) -> None: ...
    def setUID(self, uid: int) -> None: ...
    def show(self, show: bool) -> None: ...
    pass
class XDateInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, year: int, month: int, day: int) -> None: ...
    @property
    def day(self) -> int:
        """
        :type: int
        """
    @day.setter
    def day(self, arg0: int) -> None:
        pass
    @property
    def month(self) -> int:
        """
        :type: int
        """
    @month.setter
    def month(self, arg0: int) -> None:
        pass
    @property
    def year(self) -> int:
        """
        :type: int
        """
    @year.setter
    def year(self, arg0: int) -> None:
        pass
    pass
class XElement(XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addBkBorder(self, state: int, hColor: int, width: int) -> None: ...
    def addBkFill(self, state: int, hColor: int) -> None: ...
    def addBkImage(self, state: int, image: XImage) -> None: ...
    def addChild(self, child: XWidget) -> None: ...
    def adjustLayout(self, adjustNo: int = 0) -> None: ...
    def adjustLayoutEx(self, flags: int, adjustNo: int = 0) -> None: ...
    @staticmethod
    def cast(handle: int) -> XElement: ...
    def clearBkInfo(self) -> None: ...
    def destroy(self) -> None: ...
    def drawEle(self, draw: XDraw) -> None: ...
    def drawFocus(self, draw: XDraw, rect: XRect) -> None: ...
    def enable(self, enable: bool) -> None: ...
    def enableBkTransparent(self, enable: bool) -> None: ...
    def enableCanvas(self, enable: bool) -> None: ...
    def enableDrawBorder(self, enable: bool) -> None: ...
    def enableDrawFocus(self, enable: bool) -> None: ...
    def enableEvent_XE_MOUSEWHEEL(self, enable: bool) -> None: ...
    def enableEvent_XE_PAINT_END(self, enable: bool) -> None: ...
    def enableFocus(self, enable: bool) -> None: ...
    def enableKeyTab(self, enable: bool) -> None: ...
    def enableMouseThrough(self, enable: bool) -> None: ...
    def enableSwitchFocus(self, enable: bool) -> None: ...
    def enableTopmost(self, enable: bool) -> bool: ...
    def enableTransparentChannel(self, enable: bool) -> None: ...
    def getAlpha(self) -> int: ...
    def getBkInfoCount(self) -> int: ...
    def getBkManager(self) -> XBkManager: ...
    def getBkManagerEx(self) -> XBkManager: ...
    def getBorderSize(self) -> XRect: ...
    def getChildByID(self, nId: int) -> XObject: ...
    def getChildByIndex(self, index: int) -> XObject: ...
    def getChildCount(self) -> int: ...
    def getClientRect(self) -> XRect: ...
    def getContentSize(self, horizon: bool, cx: int, cy: int) -> XSize: ...
    def getCursor(self) -> int: ...
    def getFocusBorderColor(self) -> int: ...
    def getFont(self) -> XFont: ...
    def getFontEx(self) -> XFont: ...
    def getHeight(self) -> int: ...
    def getPadding(self) -> XRect: ...
    def getPositon(self) -> XPoint: ...
    def getRect(self) -> XRect: ...
    def getRectLogic(self) -> XRect: ...
    def getSize(self) -> XSize: ...
    def getStateFlags(self) -> int: ...
    def getTextColor(self) -> int: ...
    def getTextColorEx(self) -> int: ...
    def getToolTip(self) -> str: ...
    def getUserData(self) -> object: ...
    def getWidth(self) -> int: ...
    def getWndClientRect(self) -> XRect: ...
    def getZOrder(self) -> int: ...
    def hitChildEle(self, point: XPoint) -> XObject: ...
    def insertChild(self, child: XWidget, index: int) -> None: ...
    def isBkTransparent(self) -> bool: ...
    def isChildEle(self, child: XWidget) -> bool: ...
    def isDrawFocus(self) -> bool: ...
    def isEnable(self) -> bool: ...
    def isEnableCanvas(self) -> bool: ...
    def isEnableEvent_XE_PAINT_END(self) -> bool: ...
    def isEnableFocus(self) -> bool: ...
    def isEnable_XE_MOUSEWHEEL(self) -> bool: ...
    def isFocus(self) -> bool: ...
    def isFocusEx(self) -> bool: ...
    def isKeyTab(self) -> bool: ...
    def isMouseThrough(self) -> bool: ...
    def isSwitchFocus(self) -> bool: ...
    def isValid(self) -> bool: ...
    def killXCTimer(self, eventId: int) -> bool: ...
    def pointClientToScreen(self, position_flag: position_flag_ = position_flag_.position_flag_leftBottom, xOffset: int = 0, yOffset: int = 0) -> XPoint: ...
    def pointClientToWndClient(self, point: XPoint) -> XPoint: ...
    def pointWndClientToEleClient(self, point: XPoint) -> XPoint: ...
    def popupToolTip(self, x: int, y: int) -> None: ...
    def postEvent(self, eventType: int, wParam: int, lParam: int) -> int: ...
    def rectClientToWndClient(self, rect: XRect) -> XRect: ...
    def rectWndClientToEleClient(self, rect: XRect) -> XRect: ...
    def redraw(self, immediate: bool = False) -> None: ...
    def redrawRect(self, rect: XRect, immediate: bool = False) -> None: ...
    def regEvent(self, eventType: int, callback: typing.Callable[[XEvent, object], bool], userdata: object = None) -> None: ...
    def remove(self) -> None: ...
    def sendEvent(self, eventType: int, wParam: int, lParam: int) -> int: ...
    def setAlpha(self, alpha: int) -> None: ...
    def setBkInfo(self, text: str) -> int: ...
    def setBkManager(self, bkm: XBkManager) -> None: ...
    def setBorderSize(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setCapture(self, enable: bool) -> None: ...
    def setCursor(self, hCursor: int) -> None: ...
    def setDragBorder(self, flags: int) -> None: ...
    def setDragBorderBindEle(self, flags: int, element: XWidget, space: int) -> None: ...
    def setFocusBorderColor(self, hColor: int) -> None: ...
    def setFont(self, font: XFont) -> None: ...
    def setHeight(self, size: int) -> None: ...
    @typing.overload
    def setMaxSize(self, horizon: bool, vertical: bool) -> None: ...
    @typing.overload
    def setMaxSize(self, width: int, height: int) -> None: ...
    def setMinSize(self, width: int, height: int) -> None: ...
    def setPadding(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setPosition(self, x: int, y: int, redraw: bool = False, flags: int = adjustLayout_.adjustLayout_all, adjust_no: int = 0) -> int: ...
    def setPositionLogic(self, x: int, y: int, redraw: bool = False, flags: int = adjustLayout_.adjustLayout_all, adjust_no: int = 0) -> int: ...
    def setRect(self, rect: XRect, redraw: bool = False, flags: int = adjustLayout_.adjustLayout_all, adjust_no: int = 0) -> int: ...
    def setRectEx(self, x: int, y: int, cx: int, cy: int, redraw: bool = False, flags: int = adjustLayout_.adjustLayout_all, adjust_no: int = 0) -> int: ...
    def setRectLogic(self, rect: XRect, redraw: bool = False, flags: int = adjustLayout_.adjustLayout_all, adjust_no: int = 0) -> int: ...
    def setSize(self, width: int, height: int, redraw: bool = False, flags: int = adjustLayout_.adjustLayout_all, adjust_no: int = 0) -> int: ...
    def setTextColor(self, hColor: int) -> None: ...
    def setToolTip(self, text: str) -> None: ...
    def setToolTipEx(self, text: str, textAlign: int) -> None: ...
    def setUserData(self, userdata: object) -> None: ...
    def setWidth(self, size: int) -> None: ...
    def setXCTimer(self, eventId: int, elapse: int) -> bool: ...
    def setZOrder(self, index: int) -> bool: ...
    def setZOrderEx(self, destEle: XWidget, index: zorder_) -> None: ...
    pass
class XDesigner():
    @staticmethod
    def loadLayout(fileName: str, parent: XObject = None, attachHWND: int = 0) -> XObject: ...
    @staticmethod
    def loadLayoutFromString(xml: str, parent: XObject = None, attachHWND: int = 0) -> XObject: ...
    @staticmethod
    def loadLayoutZip(zipFileName: str, fileName: str, password: str, parent: XObject = None, attachHWND: int = 0) -> XObject: ...
    @staticmethod
    def loadLayoutZipMem(data: bytes, fileName: str, password: str, parent: XObject = None, attachHWND: int = 0) -> XObject: ...
    @staticmethod
    def loadResource(filename: str) -> bool: ...
    @staticmethod
    def loadResourceString(xml: str, filename: str) -> bool: ...
    @staticmethod
    def loadResourceZip(zipFileName: str, filename: str, password: str) -> bool: ...
    @staticmethod
    def loadResourceZipMem(data: bytes, filename: str, password: str) -> bool: ...
    @staticmethod
    def loadStyle(filename: str) -> bool: ...
    @staticmethod
    def loadStyleString(xml: str, filename: str) -> bool: ...
    @staticmethod
    def loadStyleZip(zipFileName: str, filename: str, password: str) -> bool: ...
    @staticmethod
    def loadStyleZipMem(data: bytes, filename: str, password: str) -> bool: ...
    pass
class XDraw(XObject):
    @staticmethod
    def cast(handle: int) -> XDraw: ...
    def clearClip(self) -> None: ...
    @staticmethod
    def create(window: XObject) -> XDraw: ...
    @staticmethod
    def createFromGdi(window: XObject, hdc: int) -> XDraw: ...
    def destroy(self) -> None: ...
    def dottedline(self, x1: int, y1: int, x2: int, y2: int) -> None: ...
    def dottedlineF(self, x1: float, y1: float, x2: float, y2: float) -> None: ...
    def drawArc(self, x: int, y: int, width: int, height: int, startAngle: float, sweepAngle: float) -> None: ...
    def drawArcF(self, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    def drawCurve(self, pointList: typing.List[XPoint], tension: float) -> None: ...
    def drawCurveF(self, pointList: typing.List[XPointF], tension: float) -> None: ...
    def drawEllipse(self, rect: XRect) -> None: ...
    def drawEllipseF(self, rect: XRectF) -> None: ...
    def drawLine(self, x1: int, y1: int, x2: int, y2: int) -> None: ...
    def drawLineF(self, x1: float, y1: float, x2: float, y2: float) -> None: ...
    def drawPolygon(self, pointList: typing.List[XPoint]) -> None: ...
    def drawPolygonF(self, pointList: typing.List[XPointF]) -> None: ...
    def drawRect(self, rect: XRect) -> None: ...
    def drawRectF(self, rect: XRectF) -> None: ...
    def drawRoundRect(self, rect: XRect, width: int, height: int) -> None: ...
    def drawRoundRectEx(self, rect: XRect, leftTop: int, rightTop: int, rightBottom: int, leftBottom: int) -> None: ...
    def drawRoundRectExF(self, rect: XRectF, leftTop: float, rightTop: float, rightBottom: float, leftBottom: float) -> None: ...
    def drawRoundRectF(self, rect: XRectF, width: float, height: float) -> None: ...
    def drawSvg(self, svg: XSvg, x: int, y: int) -> None: ...
    def drawSvgEx(self, svg: XSvg, x: int, y: int, width: int, height: int) -> None: ...
    def drawSvgSize(self, svg: XSvg, width: int, height: int) -> None: ...
    def drawSvgSrc(self, svg: XSvg) -> None: ...
    def drawText(self, text: str, rect: XRect) -> None: ...
    def drawTextF(self, text: str, rect: XRectF) -> None: ...
    def drawTextUnderline(self, text: str, rect: XRect, lineColor: int) -> None: ...
    def drawTextUnderlineF(self, text: str, rect: XRectF, lineColor: int) -> None: ...
    def enableSmoothingMode(self, enable: bool) -> None: ...
    def enableWndTransparent(self, enable: bool) -> None: ...
    def fillPolygon(self, pointList: typing.List[XPoint]) -> None: ...
    def fillPolygonF(self, pointList: typing.List[XPointF]) -> None: ...
    def fillRect(self, rect: XRect) -> None: ...
    def fillRectColor(self, rect: XRect, color: int) -> None: ...
    def fillRectColorF(self, rect: XRectF, color: int) -> None: ...
    def fillRectF(self, rect: XRectF) -> None: ...
    def fillRoundRect(self, rect: XRect, width: int, height: int) -> None: ...
    def fillRoundRectEx(self, rect: XRect, leftTop: int, rightTop: int, rightBottom: int, leftBottom: int) -> None: ...
    def fillRoundRectExF(self, rect: XRectF, leftTop: float, rightTop: float, rightBottom: float, leftBottom: float) -> None: ...
    def fillRoundRectF(self, rect: XRectF, width: float, height: float) -> None: ...
    def focusRect(self, rect: XRect) -> None: ...
    def focusRectF(self, rect: XRectF) -> None: ...
    def gdiAlphaBlend(self, xOriginDest: int, yOriginDest: int, widthDest: int, heightDest: int, hdcSrc: HDC__, xOriginSrc: int, yOriginSrc: int, widthSrc: int, heightSrc: int, alpha: int) -> bool: ...
    def gdiBitBlt(self, xDest: int, yDest: int, width: int, height: int, hdcSrc: int, xSrc: int, ySrc: int, rop: int) -> bool: ...
    def gdiBitBlt2(self, xDest: int, yDest: int, width: int, height: int, drawSrc: XDraw, xSrc: int, ySrc: int, rop: int) -> bool: ...
    def gdiCreatePen(self, penStyle: int, width: int, color: int) -> int: ...
    def gdiCreatePolygonRgn(self, pointList: typing.List[XPoint], polyFillMode: int) -> int: ...
    def gdiCreateRectRgn(self, left: int, top: int, right: int, bottom: int) -> int: ...
    def gdiCreateRoundRectRgn(self, left: int, top: int, right: int, bottom: int, widthEllipse: int, heightEllipse: int) -> int: ...
    def gdiCreateSolidBrush(self, color: int) -> int: ...
    def gdiDrawIconEx(self, xLeft: int, yTop: int, hIcon: int, cxWidth: int, cyWidth: int, stepIfAniCur: int, hbrFlickerFreeDraw: int, diFlags: int) -> bool: ...
    def gdiEllipse(self, rect: XRect) -> bool: ...
    def gdiFillRgn(self, hRgn: int, hBrush: int) -> bool: ...
    def gdiFrameRgn(self, hRgn: int, hBrush: int, width: int, height: int) -> bool: ...
    def gdiLineTo(self, xEnd: int, yEnd: int) -> bool: ...
    def gdiMoveToEx(self, x: int, y: int) -> XPoint: ...
    def gdiPolyline(self, pointList: typing.List[XPoint]) -> int: ...
    def gdiRectangle(self, left: int, top: int, right: int, bottom: int) -> bool: ...
    def gdiRestoreGDIOBJ(self) -> None: ...
    def gdiSelectClipRgn(self, hRgn: int) -> int: ...
    def gdiSetBkMode(self, mode: bool) -> int: ...
    def gdiSetPixel(self, x: int, y: int, color: int) -> int: ...
    def getD2dRenderTarget(self) -> int: ...
    def getHDC(self) -> int: ...
    def getOffset(self) -> XPoint: ...
    def gradientFill2(self, rect: XRect, color1: int, color2: int, mode: int) -> None: ...
    def gradientFill2F(self, rect: XRectF, color1: int, color2: int, mode: int) -> None: ...
    def gradientFill4(self, rect: XRect, color1: int, color2: int, color3: int, color4: int, mode: int) -> None: ...
    def gradientFill4F(self, rect: XRectF, color1: int, color2: int, color3: int, color4: int, mode: int) -> None: ...
    def image(self, image: XImage, x: int, y: int) -> None: ...
    def imageAdaptive(self, image: XImage, rect: XRect, onlyBorder: bool = False) -> None: ...
    def imageAdaptiveF(self, image: XImage, rect: XRectF, onlyBorder: bool = False) -> None: ...
    def imageEx(self, image: XImage, x: int, y: int, width: int, height: int) -> None: ...
    def imageExF(self, image: XImage, x: float, y: float, width: float, height: float) -> None: ...
    def imageF(self, imageF: XImage, x: float, y: float) -> None: ...
    def imageMask(self, image: XImage, imageMask: XImage, rect: XRect, x2: int, y2: int) -> None: ...
    def imageMaskEllipse(self, image: XImage, rect: XRect, rectMask: XRect) -> None: ...
    def imageMaskRect(self, image: XImage, rect: XRect, rectMask: XRect, rectRoundAngle: XRect) -> None: ...
    def imageSuper(self, image: XImage, rect: XRect, clip: bool = False) -> None: ...
    def imageSuperEx(self, image: XImage, rectDest: XRect, rectSrc: XRect) -> None: ...
    def imageSuperExF(self, image: XImage, rectDest: XRectF, rectSrc: XRectF) -> None: ...
    def imageSuperF(self, image: XImage, rect: XRectF, clip: bool = False) -> None: ...
    def imageSuperMask(self, image: XImage, imageMask: XImage, rect: XRect, rectMask: XRect, clip: bool) -> None: ...
    def imageTile(self, image: XImage, rect: XRect, flag: int = 0) -> None: ...
    def imageTileF(self, image: XImage, rect: XRectF, flag: int = 0) -> None: ...
    def isValid(self) -> bool: ...
    def setBrushColor(self, color: int) -> None: ...
    def setClipRect(self, rect: XRect) -> None: ...
    def setD2dTextRenderingMode(self, mode: XC_DWRITE_RENDERING_MODE) -> None: ...
    def setFont(self, font: XFont) -> None: ...
    def setLineWidth(self, width: int) -> None: ...
    def setLineWidthF(self, width: float) -> None: ...
    def setOffset(self, x: int, y: int) -> None: ...
    def setTextAlign(self, flag: int) -> None: ...
    def setTextRenderingHint(self, nType: int) -> None: ...
    def setTextVertical(self, vertical: bool) -> None: ...
    def textOut(self, xStart: int, yStart: int, text: str) -> None: ...
    def textOutEx(self, xStart: int, yStart: int, text: str) -> None: ...
    def textOutExF(self, xStart: float, yStart: float, text: str) -> None: ...
    def textOutF(self, xStart: float, yStart: float, text: str) -> None: ...
    pass
class XEase():
    @staticmethod
    def back(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def bounce(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def circ(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def cubic(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def elastic(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def ex(pos: float, flag: int) -> float: ...
    @staticmethod
    def expo(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def linear(pos: float) -> float: ...
    @staticmethod
    def quad(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def quart(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def quint(pos: float, flag: ease_type_) -> float: ...
    @staticmethod
    def sine(pos: float, flag: ease_type_) -> float: ...
    pass
class XScrollView(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XScrollView: ...
    def enableAutoShowScrollBar(self, enable: bool) -> None: ...
    def getLineSize(self) -> XSize: ...
    def getScrollBarH(self) -> XObject: ...
    def getScrollBarV(self) -> XObject: ...
    def getTotalSize(self) -> XSize: ...
    def getViewHeight(self) -> int: ...
    def getViewPosH(self) -> int: ...
    def getViewPosV(self) -> int: ...
    def getViewRect(self) -> XRect: ...
    def getViewWidth(self) -> int: ...
    def isValid(self) -> bool: ...
    def scrollBottom(self) -> bool: ...
    def scrollBottomLine(self) -> bool: ...
    def scrollLeft(self) -> bool: ...
    def scrollLeftLine(self) -> bool: ...
    def scrollPosH(self, pos: int) -> bool: ...
    def scrollPosV(self, pos: int) -> bool: ...
    def scrollPosXH(self, pos: int) -> bool: ...
    def scrollPosYV(self, pos: int) -> bool: ...
    def scrollRight(self) -> bool: ...
    def scrollRightLine(self) -> bool: ...
    def scrollTop(self) -> bool: ...
    def scrollTopLine(self) -> bool: ...
    def setLineSize(self, width: int, height: int) -> bool: ...
    def setScrollBarSize(self, size: int) -> None: ...
    def setTotalSize(self, width: int, height: int) -> bool: ...
    def showSBarH(self, enable: bool) -> None: ...
    def showSBarV(self, enable: bool) -> None: ...
    pass
class XButton(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    def addAnimationFrame(self, image: XImage, elapse: int) -> None: ...
    @staticmethod
    def cast(handle: int) -> XButton: ...
    def getBindEle(self) -> XObject: ...
    def getGroupId(self) -> int: ...
    def getIcon(self, nType: int) -> XImage: ...
    def getState(self) -> common_state3_: ...
    def getStateEx(self) -> button_state_: ...
    @typing.overload
    def getText(self) -> str: ...
    @typing.overload
    def getText(self, enable: bool, loopPlay: bool = False) -> None: ...
    def getTextAlign(self) -> int: ...
    def isCheck(self) -> bool: ...
    def isValid(self) -> bool: ...
    def setBindEle(self, ele: XWidget) -> None: ...
    def setBtnTypeEx(self, nType: XC_OBJECT_TYPE_EX) -> None: ...
    def setCheck(self, checked: bool) -> bool: ...
    def setGroupId(self, groupId: int) -> None: ...
    def setIcon(self, image: XImage) -> None: ...
    def setIconAlign(self, align: button_icon_align_) -> None: ...
    def setIconDisable(self, image: XImage) -> None: ...
    def setIconSpace(self, size: int) -> None: ...
    def setOffset(self, x: int, y: int) -> None: ...
    def setOffsetIcon(self, x: int, y: int) -> None: ...
    def setState(self, state: common_state3_) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlign(self, flags: int) -> None: ...
    pass
class XEvent():
    @property
    def eventType(self) -> int:
        """
        :type: int
        """
    @property
    def lParam(self) -> int:
        """
        :type: int
        """
    @property
    def mouse(self) -> XPoint:
        """
        :type: XPoint
        """
    @property
    def sender(self) -> XObject:
        """
        :type: XObject
        """
    @property
    def wParam(self) -> int:
        """
        :type: int
        """
    pass
class XFont(XObject):
    def __init__(self, size: int) -> None: ...
    def addRef(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XFont: ...
    @staticmethod
    def createFromFile(fontFile: str, size: int, style: int) -> XFont: ...
    @staticmethod
    def createFromGdiFont(pGdiFont: int) -> XFont: ...
    @staticmethod
    def createFromMem(data: bytes, size: int, style: int) -> XFont: ...
    @staticmethod
    def createFromName(name: str, size: int, style: int) -> XFont: ...
    @staticmethod
    def createFromRes(resId: int, typeName: str, size: int, style: int, hModule: int) -> XFont: ...
    @staticmethod
    def createFromZip(zipFileName: str, fileName: str, password: str, fontSize: int, style: int) -> XFont: ...
    @staticmethod
    def createFromZipMem(data: bytes, fileName: str, password: str, fontSize: int, style: int) -> XFont: ...
    def destroy(self) -> None: ...
    def enableAutoDestroy(self, enable: bool) -> None: ...
    def getFontInfo(self) -> XFontInfo: ...
    def getGdiFont(self) -> int: ...
    def getRefCount(self) -> int: ...
    def isValid(self) -> bool: ...
    def release(self) -> None: ...
    pass
class XFontInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: str, size: int, style: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @name.setter
    def name(self, arg0: str) -> None:
        pass
    @property
    def size(self) -> int:
        """
        :type: int
        """
    @size.setter
    def size(self, arg0: int) -> None:
        pass
    @property
    def style(self) -> int:
        """
        :type: int
        """
    @style.setter
    def style(self, arg0: int) -> None:
        pass
    pass
class XLayoutBox(XObject):
    @staticmethod
    def cast(handle: int) -> XLayoutBox: ...
    def enableAutoWrap(self, enable: bool) -> None: ...
    def enableHorizon(self, enable: bool) -> None: ...
    def enableOverflowHide(self, enable: bool) -> None: ...
    def isValid(self) -> bool: ...
    def setAlignBaseline(self, align: layout_align_axis_) -> None: ...
    def setAlignH(self, align: layout_align_) -> None: ...
    def setAlignV(self, align: layout_align_) -> None: ...
    def setSpace(self, space: int) -> None: ...
    def setSpaceRow(self, space: int) -> None: ...
    pass
class XImage(XObject):
    def addRef(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XImage: ...
    def destroy(self) -> None: ...
    def enableAutoDestroy(self, enable: bool) -> None: ...
    def enableCenter(self, enable: bool) -> None: ...
    def enableTranColor(self, enable: bool) -> None: ...
    def getHeight(self) -> int: ...
    def getImageSrc(self) -> XImageSrc: ...
    def getRefCount(self) -> int: ...
    def getSvg(self) -> XSvg: ...
    def getWidth(self) -> int: ...
    def isCenter(self) -> bool: ...
    def isStretch(self) -> bool: ...
    def isTile(self) -> bool: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def loadFile(filename: str) -> XImage: ...
    @staticmethod
    def loadFileAdaptive(fileName: str, leftSize: int, topSize: int, rightSize: int, bottomSize: int) -> XImage: ...
    @staticmethod
    def loadFileRect(fileName: str, x: int, y: int, cx: int, cy: int) -> XImage: ...
    @staticmethod
    def loadFromExtractIcon(fileName: str) -> XImage: ...
    @staticmethod
    def loadFromHBITMAP(hBitmap: int) -> XImage: ...
    @staticmethod
    def loadFromHICON(hIcon: int) -> XImage: ...
    @staticmethod
    def loadFromImage(gdiImageHandle: int) -> XImage: ...
    @staticmethod
    def loadMemory(data: bytes) -> XImage: ...
    @staticmethod
    def loadMemoryAdaptive(data: bytes, leftSize: int, topSize: int, rightSize: int, bottomSize: int) -> XImage: ...
    @staticmethod
    def loadMemoryRect(data: bytes, x: int, y: int, cx: int, cy: int) -> XImage: ...
    @staticmethod
    def loadRes(resId: int, typeName: str, hModule: int) -> XImage: ...
    @staticmethod
    def loadSrc(imageSrc: XImageSrc) -> XImage: ...
    @staticmethod
    def loadSvg(svg: XSvg) -> XImage: ...
    @staticmethod
    def loadSvgFile(fileName: str) -> XImage: ...
    @staticmethod
    def loadSvgString(data: str) -> XImage: ...
    @staticmethod
    def loadZip(zipFileName: str, fileName: str, password: str) -> XImage: ...
    @staticmethod
    def loadZipAdaptive(zipFileName: str, fileName: str, password: str, x1: int, x2: int, y1: int, y2: int) -> XImage: ...
    @staticmethod
    def loadZipMem(data: bytes, fileName: str, password: str) -> XImage: ...
    @staticmethod
    def loadZipRect(zipFileName: str, fileName: str, password: str, x: int, y: int, cx: int, cy: int) -> XImage: ...
    def release(self) -> None: ...
    def setDrawType(self, drawType: image_draw_type_) -> bool: ...
    def setDrawTypeAdaptive(self, leftSize: int, topSize: int, rightSize: int, bottomSize: int) -> bool: ...
    def setRotateAngle(self, angle: float) -> float: ...
    def setScaleSize(self, width: int, height: int) -> None: ...
    def setSplitEqual(self, count: int, index: int) -> None: ...
    def setTranColor(self, color: int) -> None: ...
    def setTranColorEx(self, color: int, alpha: int) -> None: ...
    pass
class XImageSrc(XObject):
    def addRef(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XImageSrc: ...
    def destroy(self) -> None: ...
    def enableAutoDestroy(self, enable: bool) -> None: ...
    def getFile(self) -> str: ...
    def getHeight(self) -> int: ...
    def getRefCount(self) -> int: ...
    def getWidth(self) -> int: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def loadFile(filename: str) -> XImageSrc: ...
    @staticmethod
    def loadFileRect(fileName: str, x: int, y: int, cx: int, cy: int) -> XImageSrc: ...
    @staticmethod
    def loadFromExtractIcon(fileName: str) -> XImageSrc: ...
    @staticmethod
    def loadFromHBITMAP(hBitmap: int) -> XImageSrc: ...
    @staticmethod
    def loadFromHICON(hIcon: int) -> XImageSrc: ...
    @staticmethod
    def loadFromImage(gdiImageHandle: int) -> XImageSrc: ...
    @staticmethod
    def loadMemory(data: bytes) -> XImageSrc: ...
    @staticmethod
    def loadMemoryRect(data: bytes, x: int, y: int, cx: int, cy: int) -> XImageSrc: ...
    @staticmethod
    def loadRes(resId: int, typeName: str, hModule: int) -> XImageSrc: ...
    @staticmethod
    def loadZip(zipFileName: str, fileName: str, password: str) -> XImageSrc: ...
    @staticmethod
    def loadZipMem(data: bytes, fileName: str, password: str) -> XImageSrc: ...
    @staticmethod
    def loadZipRect(zipFileName: str, fileName: str, password: str, x: int, y: int, cx: int, cy: int) -> XImageSrc: ...
    def release(self) -> None: ...
    pass
class XItemHeightInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, height: int, selHeight: int) -> None: ...
    @property
    def height(self) -> int:
        """
        :type: int
        """
    @height.setter
    def height(self, arg0: int) -> None:
        pass
    @property
    def selHeight(self) -> int:
        """
        :type: int
        """
    @selHeight.setter
    def selHeight(self, arg0: int) -> None:
        pass
    pass
class XWindow(XObjectUI, XLayoutBox, XObject):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, exStyle: int, style: int, className: str, x: int, y: int, width: int, height: int, title: str, hwndParent: int, xcStyle: int) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, title: str) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, title: str, hWndParent: int = 0, style: int = 2031) -> None: ...
    def addBkFill(self, state: int, color: int) -> None: ...
    def addBkImage(self, state: int, image: XImage) -> None: ...
    def addChild(self, child: XObjectUI) -> bool: ...
    def adjustLayout(self) -> None: ...
    def adjustLayoutEx(self, flags: adjustLayout_) -> None: ...
    def attach(self, hwnd: int, style: int = 2031) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XWindow: ...
    def center(self) -> None: ...
    def centerEx(self, width: int, height: int) -> None: ...
    def clearBkInfo(self) -> None: ...
    def closeWindow(self) -> None: ...
    def createCaret(self, ele: XElement, x: int, y: int, width: int, height: int) -> None: ...
    def destroyCaret(self) -> None: ...
    def drawWindow(self, draw: XDraw) -> None: ...
    def enableAutoFocus(self, enable: bool) -> None: ...
    def enableDragBorder(self, enable: bool) -> None: ...
    def enableDragCaption(self, enable: bool) -> None: ...
    def enableDragFiles(self, enable: bool) -> None: ...
    def enableDragWindow(self, enable: bool) -> None: ...
    def enableDrawBk(self, enable: bool) -> None: ...
    def enableLayout(self, enable: bool) -> None: ...
    def enableLayoutOverlayBorder(self, enable: bool) -> None: ...
    def enableLimitWindowSize(self, enable: bool) -> None: ...
    def enableMaxWindow(self, enable: bool) -> None: ...
    def findChildByID(self, nId: int) -> XObject: ...
    def findChildByIDName(self, name: str) -> XObject: ...
    def getBkInfoCount(self) -> int: ...
    def getBkManager(self) -> XObject: ...
    def getBkManagerEx(self) -> XObject: ...
    def getBodyRect(self) -> XRect: ...
    def getBorderSize(self) -> XRect: ...
    def getButton(self, flag: int) -> XButton: ...
    def getCaptureEle(self) -> XObject: ...
    def getCare(self) -> XObject: ...
    def getCareInfo(self) -> XCareInfo: ...
    def getChildByID(self, nId: int) -> XObject: ...
    def getChildByIndex(self, index: int) -> XObject: ...
    def getChildCount(self) -> int: ...
    def getClientRect(self) -> XRect: ...
    def getDragBorderSize(self) -> XRect: ...
    def getDrawRect(self) -> XRect: ...
    def getFoucsEle(self) -> XObject: ...
    def getHWND(self) -> int: ...
    def getID(self) -> int: ...
    def getIcon(self) -> XImage: ...
    def getLayoutRect(self) -> XRect: ...
    def getName(self) -> str: ...
    def getRect(self) -> XRect: ...
    def getShadowInfo(self) -> XShadowInfo: ...
    def getStayEle(self) -> XObject: ...
    def getTextColor(self) -> int: ...
    def getTextColorEx(self) -> int: ...
    def getTitle(self) -> str: ...
    def getTitleColor(self) -> int: ...
    def getTransparentType(self) -> window_transparent_: ...
    def hitChildEle(self, point: XPoint) -> XObject: ...
    def insertChild(self, child: XObjectUI, index: int) -> bool: ...
    def isDragBorder(self) -> bool: ...
    def isDragCaption(self) -> bool: ...
    def isEnableLayout(self) -> bool: ...
    def isMaxWindow(self) -> bool: ...
    def isValid(self) -> bool: ...
    def killTimer(self, eventId: int) -> bool: ...
    def killXCTimer(self, eventId: int) -> bool: ...
    def maxWindow(self, maximize: bool) -> None: ...
    def notifyMsgSetBorderSize(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def notifyMsgSetCaptionHeight(self, height: int) -> None: ...
    def notifyMsgSetDuration(self, duration: int) -> None: ...
    def notifyMsgSetParentMargin(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def notifyMsgSetSpace(self, space: int) -> None: ...
    def notifyMsgSetWidth(self, width: int) -> None: ...
    def notifyMsgWindowPopup(self, position: position_flag_, title: str, text: str, icon: XImage, skin: notifyMsg_skin_) -> None: ...
    def notifyMsgWindowPopupEx(self, position: position_flag_, title: str, text: str, icon: XImage, skin: notifyMsg_skin_, btnClose: bool, autoClose: bool, width: int, height: int) -> None: ...
    def postMessage(self, msg: int, wParam: int, lParam: int) -> bool: ...
    def redraw(self, immediate: bool = False) -> None: ...
    def redrawRect(self, rect: XRect, immediate: bool = False) -> None: ...
    def regEvent(self, eventType: int, callback: typing.Callable[[XEvent, object], bool], userdata: object = None) -> None: ...
    def sendMessage(self, msg: int, wParam: int, lParam: int) -> bool: ...
    def setBkInfo(self, text: str) -> int: ...
    def setBkMagager(self, bkm: XBkManager) -> None: ...
    def setBorderSize(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setCaptionMargin(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setCaptureEle(self, ele: XElement) -> None: ...
    def setCaretColor(self, color: int) -> None: ...
    def setCaretPos(self, x: int, y: int, width: int, height: int, update: bool) -> None: ...
    @typing.overload
    def setCursor(self) -> int: ...
    @typing.overload
    def setCursor(self, hCursor: int) -> None: ...
    def setCursorSys(self, hCursor: int) -> int: ...
    def setDragBorderSize(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setFont(self, font: XFont) -> None: ...
    def setFoucsEle(self, ele: XObjectUI) -> None: ...
    def setID(self, nId: int) -> None: ...
    def setIcon(self, image: XImage) -> None: ...
    def setMinimumSize(self, width: int, height: int) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPadding(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setPosition(self, x: int, y: int) -> None: ...
    def setRect(self, rect: XRect) -> XRect: ...
    def setShadowInfo(self, size: int, depth: int, angeleSize: int, rightAngle: bool, color: int) -> None: ...
    def setTextColor(self, color: int) -> None: ...
    def setTimer(self, eventId: int, elapse: int) -> int: ...
    def setTitle(self, title: str) -> None: ...
    def setTitleColor(self, color: int) -> None: ...
    def setTransparentAlpha(self, alpha: int) -> None: ...
    def setTransparentColor(self, color: int) -> None: ...
    def setTransparentType(self, nType: window_transparent_) -> None: ...
    def setXCTimer(self, eventId: int, elapse: int) -> bool: ...
    def show(self, show: bool) -> None: ...
    def showCaret(self, show: bool) -> None: ...
    def showLayoutFrame(self, enable: bool) -> None: ...
    def showWindow(self, showType: int = 5) -> bool: ...
    pass
class XLayoutEle(XElement, XWidget, XObjectUI, XLayoutBox, XObject):
    @typing.overload
    def __init__(self, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XLayoutEle: ...
    def enableLayout(self, enable: bool) -> None: ...
    def getHeightIn(self) -> int: ...
    def getWidthIn(self) -> int: ...
    def isEnableLayout(self) -> bool: ...
    def isValid(self) -> bool: ...
    def showLayoutFrame(self, enable: bool) -> None: ...
    pass
class XLayoutFrame(XScrollView, XElement, XWidget, XObjectUI, XLayoutBox, XObject):
    @typing.overload
    def __init__(self, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XLayoutFrame: ...
    def enableLayout(self, enable: bool) -> None: ...
    def getHeightIn(self) -> int: ...
    def getWidthIn(self) -> int: ...
    def isEnableLayout(self) -> bool: ...
    def isValid(self) -> bool: ...
    def showLayoutFrame(self, enable: bool) -> None: ...
    pass
class XLayoutSize():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, sizeType: layout_size_, size: int) -> None: ...
    @property
    def size(self) -> int:
        """
        :type: int
        """
    @size.setter
    def size(self, arg0: int) -> None:
        pass
    @property
    def sizeType(self) -> layout_size_:
        """
        :type: layout_size_
        """
    @sizeType.setter
    def sizeType(self, arg0: layout_size_) -> None:
        pass
    pass
class XList(XScrollView, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addColumn(self, width: int) -> int: ...
    def addColumnImage(self, width: int, name: str, image: XImage) -> int: ...
    def addColumnText(self, width: int, name: str, text: str) -> int: ...
    def addItemImage(self, image: XImage) -> int: ...
    def addItemImageEx(self, name: str, image: XImage) -> int: ...
    def addItemText(self, text: str) -> int: ...
    def addItemTextEx(self, name: str, text: str) -> int: ...
    def addSelectItem(self, row: int) -> bool: ...
    def bindAdapter(self, adapter: XAdapter) -> None: ...
    def bindAdapterHeader(self, adapter: XAdapter) -> None: ...
    def cancelSelectAll(self) -> None: ...
    def cancelSelectItem(self, row: int) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XList: ...
    def createAdapter(self, colExtendCount: int) -> XObject: ...
    def createAdapterHeader(self) -> XObject: ...
    def deleteColumn(self, row: int) -> bool: ...
    def deleteColumnAll(self) -> None: ...
    def deleteItem(self, row: int) -> bool: ...
    def deleteItemAll(self) -> None: ...
    def deleteItemEx(self, row: int, count: int) -> bool: ...
    def enableDragChangeColumnWidth(self, enable: bool) -> None: ...
    def enableFixedRowHeight(self, enable: bool) -> None: ...
    def enableItemBkFullRow(self, enable: bool) -> None: ...
    def enableMultiSel(self, enable: bool) -> None: ...
    def enableTemplateReuse(self, enable: bool) -> None: ...
    def enableVScrollBarTop(self, enable: bool) -> None: ...
    def enableVirtualTable(self, enable: bool) -> None: ...
    def getAdapter(self) -> XObject: ...
    def getAdapterHeader(self) -> XObject: ...
    def getColumnCount(self) -> int: ...
    def getColumnWidth(self, column: int) -> int: ...
    def getCountColumn_AD(self) -> int: ...
    def getCount_AD(self) -> int: ...
    def getHeader(self) -> XObject: ...
    def getHeaderHeight(self) -> int: ...
    def getHeaderTemplateObject(self, column: int, templateId: int) -> XTemplate: ...
    def getItemData(self, row: int, column: int) -> None: ...
    def getItemFloat(self, row: int, column: int) -> float: ...
    def getItemFloatEx(self, row: int, name: str) -> float: ...
    def getItemHeight(self, row: int) -> XItemHeightInfo: ...
    def getItemHeightDefault(self) -> XItemHeightInfo: ...
    def getItemImage(self, row: int, column: int) -> XImage: ...
    def getItemImageEx(self, row: int, name: str) -> XImage: ...
    def getItemIndexFromUIObject(self, ele: XWidget) -> int: ...
    def getItemInt(self, row: int, column: int) -> int: ...
    def getItemIntEx(self, row: int, name: str) -> int: ...
    def getItemText(self, row: int, column: int) -> str: ...
    def getItemTextEx(self, row: int, name: str) -> str: ...
    def getSelectAll(self) -> typing.List[int]: ...
    def getSelectItem(self) -> int: ...
    def getSelectItemCount(self) -> int: ...
    def getTemplateObject(self, row: int, column: int, templateId: int) -> XTemplate: ...
    def getVisibleRowRange(self) -> XRange: ...
    def hitTest(self, point: XPoint) -> position_: ...
    def hitTestOffset(self, point: XPoint) -> position_: ...
    def insertColumn(self, width: int, row: int) -> int: ...
    def insertItemImage(self, row: int, image: XImage) -> int: ...
    def insertItemImageEx(self, row: int, name: str, image: XImage) -> int: ...
    def insertItemText(self, row: int, text: str) -> int: ...
    def insertItemTextEx(self, row: int, name: str, text: str) -> int: ...
    def isValid(self) -> bool: ...
    def refreshData(self) -> None: ...
    def refreshItem(self, row: int) -> None: ...
    def setColumnMinWidth(self, row: int, width: int) -> None: ...
    def setColumnWidth(self, row: int, width: int) -> None: ...
    def setColumnWidthFixed(self, column: int, fixed: bool) -> None: ...
    def setDragRectColor(self, color: int, width: int) -> None: ...
    def setDrawItemBkFlags(self, flags: int) -> None: ...
    def setHeaderHeight(self, height: int) -> None: ...
    def setItemData(self, row: int, column: int, userdata: object) -> None: ...
    def setItemFloat(self, row: int, column: int, value: float) -> bool: ...
    def setItemFloatEx(self, row: int, name: str, value: float) -> bool: ...
    def setItemHeight(self, row: int, height: int, selHeight: int) -> None: ...
    def setItemHeightDefault(self, height: int, selHeight: int) -> None: ...
    def setItemImage(self, row: int, column: int, image: XImage) -> bool: ...
    def setItemImageEx(self, row: int, name: str, image: XImage) -> bool: ...
    def setItemInt(self, row: int, column: int, value: int) -> bool: ...
    def setItemIntEx(self, row: int, name: str, value: int) -> bool: ...
    def setItemTemplate(self, template: XTemplate) -> bool: ...
    def setItemTemplateFromMem(self, xmlData: bytes) -> bool: ...
    def setItemTemplateXML(self, xmlFile: str) -> bool: ...
    def setItemText(self, row: int, column: int, text: str) -> bool: ...
    def setItemTextEx(self, row: int, name: str, text: str) -> bool: ...
    def setLockColumnLeft(self, column: int) -> None: ...
    def setLockColumnRight(self, column: int) -> None: ...
    def setLockRowBottom(self, enable: bool) -> None: ...
    def setLockRowBottomOverlap(self, enable: bool) -> None: ...
    def setSelectAll(self) -> None: ...
    def setSelectItem(self, row: int) -> bool: ...
    def setSort(self, column: int, columnAdapter: int, enable: bool) -> None: ...
    def setSplitLineColor(self, color: int) -> None: ...
    def setVirtualRowCount(self, rowCount: int) -> None: ...
    def visibleItem(self, row: int) -> None: ...
    pass
class XListBox(XScrollView, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addItemImage(self, image: XImage) -> int: ...
    def addItemImageEx(self, name: str, image: XImage) -> int: ...
    def addItemText(self, text: str) -> int: ...
    def addItemTextEx(self, name: str, text: str) -> int: ...
    def addSelectItem(self, itemId: int) -> bool: ...
    def bindAdapter(self, adapter: XAdapter) -> None: ...
    def cancelSelectAll(self) -> bool: ...
    def cancelSelectItem(self, itemId: int) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XListBox: ...
    def createAdapter(self) -> XObject: ...
    def deleteColumnAll(self) -> None: ...
    def deleteItem(self, itemId: int) -> bool: ...
    def deleteItemAll(self) -> None: ...
    def deleteItemEx(self, itemId: int, count: int) -> bool: ...
    def enableFixedRowHeight(self, enable: bool) -> None: ...
    def enableMultiSel(self, enable: bool) -> None: ...
    def enableTemplateReuse(self, enable: bool) -> None: ...
    def enableVirtualTable(self, enable: bool) -> None: ...
    def getAdapter(self) -> XObject: ...
    def getCountColumn_AD(self) -> int: ...
    def getCount_AD(self) -> int: ...
    def getItemData(self, itemId: int) -> None: ...
    def getItemFloat(self, itemId: int, column: int) -> float: ...
    def getItemFloatEx(self, itemId: int, name: str) -> float: ...
    def getItemHeightDefault(self) -> XItemHeightInfo: ...
    def getItemImage(self, itemId: int, column: int) -> XImage: ...
    def getItemImageEx(self, itemId: int, name: str) -> XImage: ...
    def getItemIndexFromUIObject(self, ele: XWidget) -> int: ...
    def getItemInfo(self, itemId: int) -> listBox_item_info_: ...
    def getItemInt(self, itemId: int, column: int) -> int: ...
    def getItemIntEx(self, itemId: int, name: str) -> int: ...
    def getItemMouseStay(self) -> int: ...
    def getItemText(self, itemId: int, column: int) -> str: ...
    def getItemTextEx(self, itemId: int, name: str) -> str: ...
    def getRowSpace(self) -> int: ...
    def getSelectAll(self) -> typing.List[int]: ...
    def getSelectCount(self) -> int: ...
    def getSelectItem(self) -> int: ...
    def getTemplateObject(self, itemId: int, templateId: int) -> XObject: ...
    def getVisibleRowRange(self) -> XRange: ...
    def hitTest(self, point: XPoint) -> int: ...
    def hitTestOffset(self, point: XPoint) -> int: ...
    def insertItemImage(self, itemId: int, image: XImage) -> int: ...
    def insertItemImageEx(self, itemId: int, name: str, image: XImage) -> int: ...
    def insertItemText(self, itemId: int, text: str) -> int: ...
    def insertItemTextEx(self, itemId: int, name: str, text: str) -> int: ...
    def isValid(self) -> bool: ...
    def refreshData(self) -> None: ...
    def refreshItem(self, itemId: int) -> None: ...
    def selectAll(self) -> bool: ...
    def setDragRectColor(self, color: int, width: int) -> None: ...
    def setDrawItemBkFlags(self, flags: int) -> None: ...
    def setItemData(self, itemId: int, userdata: object) -> None: ...
    def setItemFloat(self, itemId: int, column: int, value: float) -> bool: ...
    def setItemFloatEx(self, itemId: int, name: str, value: float) -> bool: ...
    def setItemHeightDefault(self, height: int, selHeight: int) -> None: ...
    def setItemImage(self, itemId: int, column: int, image: XImage) -> bool: ...
    def setItemImageEx(self, itemId: int, name: str, image: XImage) -> bool: ...
    def setItemInfo(self, itemId: int, itemInfo: listBox_item_info_) -> None: ...
    def setItemInt(self, itemId: int, column: int, value: int) -> bool: ...
    def setItemIntEx(self, itemId: int, name: str, value: int) -> bool: ...
    def setItemTemplate(self, template: XTemplate) -> bool: ...
    def setItemTemplateFromMem(self, xmlData: bytes) -> bool: ...
    def setItemTemplateXML(self, xmlFile: str) -> bool: ...
    def setItemText(self, itemId: int, column: int, text: str) -> bool: ...
    def setItemTextEx(self, itemId: int, name: str, text: str) -> bool: ...
    def setRowSpace(self, space: int) -> None: ...
    def setSelectItem(self, itemId: int) -> bool: ...
    def setSplitLineColor(self, color: int) -> None: ...
    def setVirtualRowCount(self, rowCount: int) -> None: ...
    def sort(self, columnAdapter: int, ascending: bool) -> None: ...
    def visibleItem(self, itemId: int) -> None: ...
    pass
class XListView(XScrollView, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addSelectItem(self, group: int, item: int) -> bool: ...
    def bindAdapter(self, adapter: XAdapter) -> None: ...
    def cancelSelectAll(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XListView: ...
    def createAdapter(self) -> XObject: ...
    def deleteAll(self) -> None: ...
    def deleteAllGroup(self) -> None: ...
    def deleteAllItem(self) -> None: ...
    def deleteColumnGroup(self, column: int) -> None: ...
    def deleteColumnItem(self, column: int) -> None: ...
    def enableMultiSel(self, enable: bool) -> None: ...
    def enableTemplateReuse(self, enable: bool) -> None: ...
    def enableVirtualTable(self, enable: bool) -> None: ...
    def expandGroup(self, group: int, expand: bool) -> bool: ...
    def getAdapter(self) -> XObject: ...
    def getGroupHeight(self) -> int: ...
    def getGroupUserData(self, group: int) -> None: ...
    def getItemIdFromUIObject(self, ele: XWidget) -> listView_item_id_: ...
    def getItemSize(self) -> XSize: ...
    def getItemUserData(self, group: int, item: int) -> None: ...
    def getSelectAll(self) -> typing.List[listView_item_id_]: ...
    def getSelectItem(self) -> listView_item_id_: ...
    def getSelectItemCount(self) -> int: ...
    def getTemplateObject(self, groupId: int, itemId: int, templateId: int) -> XObject: ...
    def getTemplateObjectGroup(self, groupId: int, itemId: int) -> XObject: ...
    def getVisibleItemRange(self) -> XListViewItemRangeInfo: ...
    def groupAddColumn(self, name: str) -> int: ...
    def groupAddItemImage(self, image: XImage, pos: int = -1) -> int: ...
    def groupAddItemImageEx(self, name: str, image: XImage, pos: int = -1) -> int: ...
    def groupAddItemText(self, text: str, pos: int = -1) -> int: ...
    def groupAddItemTextEx(self, name: str, text: str, pos: int = -1) -> int: ...
    def groupDeleteAllChildItem(self, group: int) -> None: ...
    def groupDeleteItem(self, group: int) -> bool: ...
    def groupGetCount(self) -> int: ...
    def groupGetImage(self, group: int, column: int) -> XImage: ...
    def groupGetImageEx(self, group: int, name: str) -> XImage: ...
    def groupGetText(self, group: int, column: int) -> str: ...
    def groupGetTextEx(self, group: int, name: str) -> str: ...
    def groupSetImage(self, group: int, column: int, image: XImage) -> bool: ...
    def groupSetImageEx(self, group: int, name: str, image: XImage) -> bool: ...
    def groupSetText(self, group: int, column: int, text: str) -> bool: ...
    def groupSetTextEx(self, group: int, name: str, text: str) -> bool: ...
    def hitTest(self, point: XPoint) -> listView_item_id_: ...
    def hitTestOffset(self, point: XPoint) -> listView_item_id_: ...
    def isValid(self) -> bool: ...
    def itemAddColumn(self, name: str) -> int: ...
    def itemAddItemImage(self, group: int, image: XImage, pos: int = -1) -> int: ...
    def itemAddItemImageEx(self, group: int, name: str, image: XImage, pos: int = -1) -> int: ...
    def itemAddItemText(self, group: int, text: str, pos: int = -1) -> int: ...
    def itemAddItemTextEx(self, group: int, name: str, text: str, pos: int = -1) -> int: ...
    def itemDeleteItem(self, group: int, item: int) -> bool: ...
    def itemGetCount(self, group: int) -> int: ...
    def itemGetImage(self, group: int, item: int, column: int) -> XImage: ...
    def itemGetImageEx(self, group: int, item: int, name: str) -> XImage: ...
    def itemGetText(self, group: int, item: int, column: int) -> str: ...
    def itemGetTextEx(self, group: int, item: int, name: str) -> str: ...
    def itemSetImage(self, group: int, item: int, column: int, image: XImage) -> bool: ...
    def itemSetImageEx(self, group: int, item: int, name: str, image: XImage) -> bool: ...
    def itemSetText(self, group: int, item: int, column: int, text: str) -> bool: ...
    def itemSetTextEx(self, group: int, item: int, name: str, text: str) -> bool: ...
    def refreshData(self) -> None: ...
    def refreshItem(self, group: int, item: int) -> None: ...
    def setColumnSpace(self, space: int) -> None: ...
    def setDragRectColor(self, color: int, width: int) -> None: ...
    def setDrawItemBkFlags(self, flags: int) -> None: ...
    def setGroupHeight(self, height: int) -> None: ...
    def setGroupUserData(self, group: int, userdata: object) -> None: ...
    def setItemSize(self, width: int, height: int) -> None: ...
    def setItemTemplate(self, template: XTemplate) -> bool: ...
    def setItemTemplateFromMem(self, xmlData: bytes) -> bool: ...
    def setItemTemplateXML(self, xmlFile: str) -> bool: ...
    def setItemUserData(self, group: int, item: int, userdata: object) -> None: ...
    def setRowSpace(self, space: int) -> None: ...
    def setSelectItem(self, group: int, item: int) -> bool: ...
    def setVirtualItemCount(self, group: int, count: int) -> bool: ...
    def visibleItem(self, group: int, item: int) -> None: ...
    pass
class XListViewItemRangeInfo():
    @property
    def endGroup(self) -> int:
        """
        :type: int
        """
    @endGroup.setter
    def endGroup(self, arg0: int) -> None:
        pass
    @property
    def endItem(self) -> int:
        """
        :type: int
        """
    @endItem.setter
    def endItem(self, arg0: int) -> None:
        pass
    @property
    def group1(self) -> int:
        """
        :type: int
        """
    @group1.setter
    def group1(self, arg0: int) -> None:
        pass
    @property
    def group2(self) -> int:
        """
        :type: int
        """
    @group2.setter
    def group2(self, arg0: int) -> None:
        pass
    @property
    def startGroup(self) -> int:
        """
        :type: int
        """
    @startGroup.setter
    def startGroup(self, arg0: int) -> None:
        pass
    @property
    def startItem(self) -> int:
        """
        :type: int
        """
    @startItem.setter
    def startItem(self, arg0: int) -> None:
        pass
    pass
class XMenu(XObject):
    def __init__(self) -> None: ...
    def addItem(self, nId: int, text: str, parentId: int = 0, flags: int = 0) -> None: ...
    def addItemIcon(self, nId: int, text: str, parentId: int, image: XImage, flags: int = 0) -> None: ...
    @staticmethod
    def cast(handle: int) -> XMenu: ...
    def closeMenu(self) -> None: ...
    def destroyMenu(self) -> None: ...
    def enableDrawBackground(self, enable: bool) -> None: ...
    def getEndChildItem(self, nId: int) -> int: ...
    def getFirstChildItem(self, nId: int) -> int: ...
    def getItemHeight(self) -> int: ...
    def getItemText(self, nId: int) -> str: ...
    def getItemTextLength(self, nId: int) -> int: ...
    def getLeftSpaceText(self) -> int: ...
    def getLeftWidth(self) -> int: ...
    def getNextSiblingItem(self, nId: int) -> int: ...
    def getParentItem(self, nId: int) -> int: ...
    def getPrevSiblingItem(self, nId: int) -> int: ...
    def insertItem(self, nId: int, text: str, flags: int, insertId: int) -> None: ...
    def insertItemIcon(self, nId: int, text: str, image: XImage, flags: int, insertId: int) -> None: ...
    def isItemCheck(self, nId: int) -> bool: ...
    def isValid(self) -> bool: ...
    def popup(self, parentHWND: int, x: int, y: int, parentEle: XElement = None, position: menu_popup_position_ = menu_popup_position_.menu_popup_position_left_top) -> bool: ...
    def setAutoDestroy(self, enable: bool) -> None: ...
    def setBkImage(self, image: XImage) -> None: ...
    def setBorderColor(self, color: int) -> None: ...
    def setBorderSize(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setItemCheck(self, nId: int, check: bool) -> bool: ...
    def setItemFlags(self, nId: int, flags: int) -> bool: ...
    def setItemHeight(self, height: int) -> None: ...
    def setItemIcon(self, nId: int, image: XImage) -> None: ...
    def setItemText(self, nId: int, text: str) -> bool: ...
    def setItemWidth(self, nId: int, width: int) -> bool: ...
    pass
class XMenuBar(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addButton(self, text: str) -> int: ...
    @staticmethod
    def cast(handle: int) -> XMenuBar: ...
    def deleteButton(self, index: int) -> bool: ...
    def enableAutoWidth(self, enable: bool) -> None: ...
    def getButton(self, index: int) -> XButton: ...
    def getMenu(self, index: int) -> XMenu: ...
    def isValid(self) -> bool: ...
    def setButtonHeight(self, height: int) -> None: ...
    pass
class XModelWindow(XWindow, XObjectUI, XLayoutBox, XObject):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, exStyle: int, style: int, className: str, x: int, y: int, width: int, height: int, title: str, hwndParent: int, xcStyle: int = 1223) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, title: str) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, title: str, hwndParent: int, xcStyle: int = 1223) -> None: ...
    def attach(self, hwnd: int, style: int) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XModelWindow: ...
    def doModal(self) -> int: ...
    def enableAutoClose(self, enable: bool) -> None: ...
    def enableEscClose(self, enable: bool) -> None: ...
    def endModal(self, result: int) -> None: ...
    def isValid(self) -> bool: ...
    pass
class XMonthCal(XElement, XWidget, XObjectUI, XObject):
    def GetSelDate(self) -> XDateInfo: ...
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XMonthCal: ...
    def getButton(self, btnType: monthCal_button_type_) -> XButton: ...
    def getToday(self) -> XDateInfo: ...
    def isValid(self) -> bool: ...
    def setTextColor(self, flag: int, color: int) -> None: ...
    def setToday(self, year: int, month: int, day: int) -> None: ...
    pass
class XMsgWindow(XModelWindow, XWindow, XObjectUI, XLayoutBox, XObject):
    @typing.overload
    def __init__(self, exStyle: int, style: int, className: str, title: str, text: str, flags: int, hwndParent: int, xcStyle: int = 1223) -> None: ...
    @typing.overload
    def __init__(self, title: str, text: str, flags: int = 8193, hwndParent: int = 0, xcStyle: int = 1223) -> None: ...
    @staticmethod
    def cast(handle: int) -> XMsgWindow: ...
    def isValid(self) -> bool: ...
    pass
class XAdapterListView(XAdapter, XObject):
    def __init__(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XAdapterListView: ...
    def deleteAll(self) -> None: ...
    def deleteAllGroup(self) -> None: ...
    def deleteAllItem(self) -> None: ...
    def deleteColumnGroup(self, column: int) -> None: ...
    def deleteColumnItem(self, column: int) -> None: ...
    def groupAddColumn(self, name: str) -> int: ...
    def groupAddItemImage(self, image: XImage, pos: int = -1) -> int: ...
    def groupAddItemImageEx(self, name: str, image: XImage, pos: int = -1) -> int: ...
    def groupAddItemText(self, value: str, pos: int = -1) -> int: ...
    def groupAddItemTextEx(self, name: str, value: str, pos: int = -1) -> int: ...
    def groupDeleteAllChildItem(self, group: int) -> None: ...
    def groupDeleteItem(self, group: int) -> bool: ...
    def groupGetCount(self) -> int: ...
    def groupGetImage(self, item: int, column: int) -> XImage: ...
    def groupGetImageEx(self, item: int, column: str) -> XImage: ...
    def groupGetText(self, group: int, column: int) -> str: ...
    def groupGetTextEx(self, group: int, name: str) -> str: ...
    def groupSetImage(self, group: int, column: int, image: XImage) -> bool: ...
    def groupSetImageEx(self, group: int, name: str, image: XImage) -> bool: ...
    def groupSetText(self, group: int, column: int, value: str) -> bool: ...
    def groupSetTextEx(self, group: int, name: str, value: str) -> bool: ...
    def isValid(self) -> bool: ...
    def itemAddColumn(self, name: str) -> int: ...
    def itemAddItemImage(self, group: int, image: XImage, pos: int = -1) -> int: ...
    def itemAddItemImageEx(self, group: int, name: str, image: XImage, pos: int = -1) -> int: ...
    def itemAddItemText(self, group: int, value: str, pos: int = -1) -> int: ...
    def itemAddItemTextEx(self, group: int, name: str, value: str, pos: int = -1) -> int: ...
    def itemDeleteItem(self, group: int, item: int) -> bool: ...
    def itemGetCount(self, group: int) -> int: ...
    def itemGetImage(self, group: int, item: int, column: int) -> XImage: ...
    def itemGetImageEx(self, group: int, item: int, name: str) -> XImage: ...
    def itemGetText(self, group: int, item: int, column: int) -> str: ...
    def itemGetTextEx(self, group: int, item: int, name: str) -> str: ...
    def itemSetImage(self, group: int, item: int, column: int, image: XImage) -> bool: ...
    def itemSetImageEx(self, group: int, item: int, name: str, image: XImage) -> bool: ...
    def itemSetText(self, group: int, item: int, column: int, value: str) -> bool: ...
    def itemSetTextEx(self, group: int, item: int, name: str, value: str) -> bool: ...
    pass
class XEdit(XScrollView, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addByStyle(self, style: int) -> None: ...
    def addChatBegin(self, avatar: XImage, bubble: XImage, flag: int) -> None: ...
    def addChatEnd(self) -> None: ...
    def addData(self, data: edit_data_copy_, styleTableList: typing.List[int]) -> None: ...
    def addObject(self, obj: XObject) -> int: ...
    def addStyle(self, obj: XObject, color: int, enableColor: bool) -> int: ...
    def addStyleEx(self, fontName: str, fontSize: int, fontStyle: int, color: int, enableColor: bool) -> int: ...
    def addText(self, text: str) -> None: ...
    def addTextEx(self, text: str, style: int) -> None: ...
    def addTextUser(self, text: str) -> None: ...
    def autoScroll(self) -> bool: ...
    def autoScrollEx(self, row: int, column: int) -> bool: ...
    def cancelSelect(self) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XEdit: ...
    def clipboardCopy(self) -> bool: ...
    def clipboardCut(self) -> bool: ...
    def clipboardPaste(self) -> bool: ...
    def delete(self, startRow: int, startCol: int, endRow: int, endCol: int) -> bool: ...
    def deleteRow(self, row: int) -> bool: ...
    def deleteSelect(self) -> bool: ...
    def enableAutoCancelSel(self, enable: bool) -> None: ...
    def enableAutoSelAll(self, enable: bool) -> None: ...
    def enableAutoWrap(self, enable: bool) -> None: ...
    def enableMultiLine(self, enable: bool) -> None: ...
    def enablePassword(self, enable: bool) -> None: ...
    def enableReadOnly(self, enable: bool) -> None: ...
    def freeData(self, data: edit_data_copy_) -> None: ...
    def getCurCol(self) -> int: ...
    def getCurPos(self) -> int: ...
    def getCurPosEx(self) -> position_: ...
    def getCurRow(self) -> int: ...
    def getData(self) -> edit_data_copy_: ...
    def getLength(self) -> int: ...
    def getLengthRow(self, row: int) -> int: ...
    def getPoint(self, row: int, column: int) -> XPoint: ...
    def getRowCount(self) -> int: ...
    def getSelectRange(self) -> typing.List[position_]: ...
    def getSelectText(self, maxSize: int = -1) -> str: ...
    def getSelectTextLength(self) -> int: ...
    def getStyleInfo(self, style: int) -> edit_style_info_: ...
    def getText(self, maxSize: int = -1) -> str: ...
    def getTextRow(self, row: int, maxSize: int = -1) -> str: ...
    def getVisibleRowRange(self) -> typing.List[int]: ...
    def insertText(self, row: int, column: int, text: str) -> None: ...
    def isAutoWrap(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isInSelect(self, row: int, column: int) -> bool: ...
    def isMultiLine(self) -> bool: ...
    def isPassword(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def isValid(self) -> bool: ...
    def modifyStyle(self, style: int, font: XFont, color: int, enableColor: bool) -> bool: ...
    def moveEnd(self) -> None: ...
    def posToRowCol(self, pos: int) -> position_: ...
    def redo(self) -> bool: ...
    def releaseStyle(self, style: int) -> bool: ...
    def rowColToPos(self, row: int, column: int) -> int: ...
    def selectAll(self) -> bool: ...
    def setBackFont(self, font: XFont) -> None: ...
    def setCaretColor(self, color: int) -> None: ...
    def setCaretWidth(self, width: int) -> None: ...
    def setCharSpaceSize(self, size: int, sizeZh: int) -> None: ...
    def setChatIndentation(self, indentation: int) -> None: ...
    def setCurPos(self, pos: int) -> bool: ...
    def setCurPosEx(self, row: int, column: int) -> None: ...
    def setCurStyle(self, style: int) -> None: ...
    def setDefaultText(self, text: str) -> None: ...
    def setDefaultTextColor(self, color: int) -> None: ...
    def setPasswordCharacter(self, ch: str) -> None: ...
    def setRowHeight(self, row: int) -> None: ...
    def setRowHeightEx(self, row: int, height: int) -> None: ...
    def setRowSpace(self, space: int) -> None: ...
    def setSelect(self, startRow: int, startCol: int, endRow: int, endCol: int) -> bool: ...
    def setSelectBkColor(self, color: int) -> None: ...
    def setSelectTextStyle(self, style: int) -> None: ...
    def setSpaceSize(self, size: int) -> None: ...
    def setTabSpace(self, space: int) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlign(self, align: int) -> None: ...
    def setTextInt(self, value: int) -> None: ...
    def undo(self) -> bool: ...
    pass
class XPane(XElement, XWidget, XObjectUI, XObject):
    def __init__(self, name: str, width: int, height: int, parent: XFrameWindow = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XPane: ...
    def dockPane(self) -> None: ...
    def drawPane(self, draw: XDraw) -> None: ...
    def floatPane(self) -> None: ...
    def getCaptionHeight(self) -> int: ...
    def getState(self) -> pane_state_: ...
    def getTitle(self) -> str: ...
    def getViewRect(self) -> XRect: ...
    def hidePane(self, groupDelay: bool = False) -> None: ...
    def isGroupActivate(self) -> bool: ...
    def isShowPane(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lockPane(self) -> None: ...
    def setCaptionHeight(self, height: int) -> None: ...
    def setSelect(self) -> bool: ...
    def setSize(self, width: int, height: int) -> None: ...
    def setTitle(self, title: str) -> None: ...
    def setView(self, ele: XElement) -> None: ...
    def showPane(self, groupActivate: bool) -> None: ...
    pass
class XPoint():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int) -> None: ...
    @staticmethod
    def cast(pointer: int) -> XPoint: ...
    @property
    def x(self) -> int:
        """
        :type: int
        """
    @x.setter
    def x(self, arg0: int) -> None:
        pass
    @property
    def y(self) -> int:
        """
        :type: int
        """
    @y.setter
    def y(self, arg0: int) -> None:
        pass
    pass
class XPointF():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float) -> None: ...
    @staticmethod
    def cast(pointer: int) -> XPointF: ...
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg0: float) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg0: float) -> None:
        pass
    pass
class XProgressBar(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XProgressBar: ...
    def enableHorizon(self, enable: bool) -> None: ...
    def enableShowText(self, enable: bool) -> None: ...
    def enableStretch(self, enable: bool) -> None: ...
    def getPos(self) -> int: ...
    def getRange(self) -> int: ...
    def isValid(self) -> bool: ...
    def setImageLoad(self, image: XImage) -> None: ...
    def setPos(self, pos: int) -> None: ...
    def setRange(self, range: int) -> None: ...
    pass
class XRange():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, start: int, end: int) -> None: ...
    @property
    def end(self) -> int:
        """
        :type: int
        """
    @end.setter
    def end(self, arg0: int) -> None:
        pass
    @property
    def start(self) -> int:
        """
        :type: int
        """
    @start.setter
    def start(self, arg0: int) -> None:
        pass
    pass
class XRect():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, left: int, top: int, right: int, bottom: int) -> None: ...
    @staticmethod
    def cast(pointer: int) -> XRect: ...
    @property
    def bottom(self) -> int:
        """
        :type: int
        """
    @bottom.setter
    def bottom(self, arg0: int) -> None:
        pass
    @property
    def left(self) -> int:
        """
        :type: int
        """
    @left.setter
    def left(self, arg0: int) -> None:
        pass
    @property
    def right(self) -> int:
        """
        :type: int
        """
    @right.setter
    def right(self, arg0: int) -> None:
        pass
    @property
    def top(self) -> int:
        """
        :type: int
        """
    @top.setter
    def top(self, arg0: int) -> None:
        pass
    pass
class XRectF():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, left: float, top: float, right: float, bottom: float) -> None: ...
    @staticmethod
    def cast(pointer: int) -> XRectF: ...
    @property
    def bottom(self) -> float:
        """
        :type: float
        """
    @bottom.setter
    def bottom(self, arg0: float) -> None:
        pass
    @property
    def left(self) -> float:
        """
        :type: float
        """
    @left.setter
    def left(self, arg0: float) -> None:
        pass
    @property
    def right(self) -> float:
        """
        :type: float
        """
    @right.setter
    def right(self, arg0: float) -> None:
        pass
    @property
    def top(self) -> float:
        """
        :type: float
        """
    @top.setter
    def top(self, arg0: float) -> None:
        pass
    pass
class XResource():
    @staticmethod
    def enableDelayLoad(enable: bool) -> None: ...
    @staticmethod
    def getBkManager(name: str) -> XBkManager: ...
    @staticmethod
    def getColor(name: str) -> int: ...
    @staticmethod
    def getFont(name: str) -> XFont: ...
    @staticmethod
    def getIDValue(name: str) -> int: ...
    @staticmethod
    def getImage(name: str) -> XImage: ...
    @staticmethod
    def getImageEx(filename: str, name: str) -> XImage: ...
    @staticmethod
    def setLoadFileCallback(callback: typing.Callable[[str], bool]) -> None: ...
    pass
class XRotateInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, angle: float, x: float, y: float, offset: bool) -> None: ...
    @property
    def angle(self) -> float:
        """
        :type: float
        """
    @angle.setter
    def angle(self, arg0: float) -> None:
        pass
    @property
    def offset(self) -> bool:
        """
        :type: bool
        """
    @offset.setter
    def offset(self, arg0: bool) -> None:
        pass
    @property
    def x(self) -> float:
        """
        :type: float
        """
    @x.setter
    def x(self, arg0: float) -> None:
        pass
    @property
    def y(self) -> float:
        """
        :type: float
        """
    @y.setter
    def y(self, arg0: float) -> None:
        pass
    pass
class XScrollBar(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XScrollBar: ...
    def enableHorizon(self, enable: bool) -> bool: ...
    def getButtonDown(self) -> XButton: ...
    def getButtonSlider(self) -> XButton: ...
    def getButtonUp(self) -> XButton: ...
    def getRange(self) -> int: ...
    def getSliderMaxLength(self) -> int: ...
    def isValid(self) -> bool: ...
    def scrollBottom(self) -> bool: ...
    def scrollDown(self) -> bool: ...
    def scrollPos(self, pos: int) -> bool: ...
    def scrollTop(self) -> bool: ...
    def scrollUp(self) -> bool: ...
    def setRange(self, range: int) -> None: ...
    def setSliderLength(self, length: int) -> None: ...
    def setSliderMinLength(self, length: int) -> None: ...
    def setSliderPadding(self, padding: int) -> None: ...
    def showButton(self, enable: bool) -> None: ...
    pass
class XComboBox(XEdit, XScrollView, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addItemImage(self, image: XImage) -> int: ...
    def addItemImageEx(self, name: str, image: XImage) -> int: ...
    def addItemText(self, text: str) -> int: ...
    def addItemTextEx(self, name: str, text: str) -> int: ...
    def bindAdapter(self, adapter: XAdapter) -> None: ...
    @staticmethod
    def cast(handle: int) -> XComboBox: ...
    def createAdapter(self) -> XObject: ...
    def deleteColumnAll(self) -> None: ...
    def deleteItem(self, item: int) -> bool: ...
    def deleteItemAll(self) -> None: ...
    def deleteItemEx(self, item: int, count: int) -> bool: ...
    def enableDrawButton(self, enable: bool) -> None: ...
    def enableDropHeightFixed(self, enable: bool) -> None: ...
    def enableEdit(self, enable: bool) -> None: ...
    def getAdapter(self) -> XObject: ...
    def getButtonRect(self) -> XRect: ...
    def getCount(self) -> int: ...
    def getCountColumn(self) -> int: ...
    def getDropHeight(self) -> int: ...
    def getItemFloat(self, item: int, column: int) -> float: ...
    def getItemFloatEx(self, item: int, name: str) -> float: ...
    def getItemImage(self, item: int, column: int) -> XImage: ...
    def getItemImageEx(self, item: int, name: str) -> XImage: ...
    def getItemInt(self, item: int, column: int) -> int: ...
    def getItemIntEx(self, item: int, name: str) -> int: ...
    def getItemText(self, item: int, column: int) -> str: ...
    def getItemTextEx(self, item: int, name: str) -> str: ...
    def getSelItem(self) -> int: ...
    def getState(self) -> comboBox_state_: ...
    def insertItemImage(self, item: int, image: XImage) -> int: ...
    def insertItemImageEx(self, item: int, name: str, image: XImage) -> int: ...
    def insertItemText(self, item: int, text: str) -> int: ...
    def insertItemTextEx(self, item: int, name: str, text: str) -> int: ...
    def isValid(self) -> bool: ...
    def popupDropList(self) -> None: ...
    def setBindName(self, name: str) -> None: ...
    def setButtonSize(self, size: int) -> None: ...
    def setDropHeight(self, height: int) -> None: ...
    def setItemFloat(self, item: int, column: int, value: float) -> bool: ...
    def setItemFloatEx(self, item: int, name: str, value: float) -> bool: ...
    def setItemImage(self, item: int, column: int, image: XImage) -> bool: ...
    def setItemImageEx(self, item: int, name: str, image: XImage) -> bool: ...
    def setItemInt(self, item: int, column: int, value: int) -> bool: ...
    def setItemIntEx(self, item: int, name: str, value: int) -> bool: ...
    def setItemTemplate(self, template: XTemplate) -> bool: ...
    def setItemTemplateXML(self, xml: str) -> None: ...
    def setItemText(self, item: int, column: int, text: str) -> bool: ...
    def setItemTextEx(self, item: int, name: str, text: str) -> bool: ...
    def setSelItem(self, index: int) -> bool: ...
    pass
class XShadowInfo():
    @property
    def angeleSize(self) -> int:
        """
        :type: int
        """
    @property
    def color(self) -> int:
        """
        :type: int
        """
    @property
    def depth(self) -> int:
        """
        :type: int
        """
    @property
    def rightAngle(self) -> bool:
        """
        :type: bool
        """
    @property
    def size(self) -> int:
        """
        :type: int
        """
    pass
class XShape(XWidget, XObjectUI, XObject):
    def adjustLayout(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShape: ...
    def destroy(self) -> None: ...
    def getAlpha(self) -> int: ...
    def getContentSize(self) -> XSize: ...
    def getPosition(self) -> XPoint: ...
    def getRect(self) -> XRect: ...
    def getRectLogic(self) -> XRect: ...
    def getSize(self) -> XSize: ...
    def getWidth(self) -> int: ...
    def getWndClientRect(self) -> XRect: ...
    def getZOrder(self) -> int: ...
    def isValid(self) -> bool: ...
    def redraw(self) -> None: ...
    def removeShape(self) -> None: ...
    def setAlpha(self, alpha: int) -> None: ...
    def setPosition(self, x: int, y: int) -> None: ...
    def setRectLogic(self, rect: XRect, redraw: bool) -> bool: ...
    def setSize(self, width: int, height: int) -> None: ...
    def showLayout(self, enable: bool) -> None: ...
    pass
class XShapeEllipse(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeEllipse: ...
    def enableBorder(self, enable: bool) -> None: ...
    def enableFill(self, enable: bool) -> None: ...
    def isValid(self) -> bool: ...
    def setBorderColor(self, color: int) -> None: ...
    def setFillColor(self, color: int) -> None: ...
    pass
class XShapeGif(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeGif: ...
    def getImage(self) -> XImage: ...
    def isValid(self) -> bool: ...
    def setImage(self, image: XImage) -> None: ...
    pass
class XShapeGroupBox(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeGroupBox: ...
    def enableRoundAngle(self, enable: bool) -> None: ...
    def getRoundAngle(self) -> XSize: ...
    def getTextOffset(self) -> XPoint: ...
    def isValid(self) -> bool: ...
    def setBorderColor(self, color: int) -> None: ...
    def setFont(self, font: XFont) -> None: ...
    def setRoundAngle(self, width: int, height: int) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextColor(self, color: int) -> None: ...
    def setTextOffset(self, offsetX: int, offsetY: int) -> None: ...
    pass
class XShapeLine(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeLine: ...
    def isValid(self) -> bool: ...
    def setColor(self, color: int) -> None: ...
    def setPosition(self, x1: int, y1: int, x2: int, y2: int) -> None: ...
    pass
class XShapePicture(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapePicture: ...
    def getImage(self) -> XImage: ...
    def isValid(self) -> bool: ...
    def setImage(self, image: XImage) -> None: ...
    pass
class XShapeRect(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeRect: ...
    def enableBorder(self, enable: bool) -> None: ...
    def enableFill(self, enable: bool) -> None: ...
    def enableRoundAngle(self, enable: bool) -> None: ...
    def getRoundAngle(self) -> XSize: ...
    def isValid(self) -> bool: ...
    def setBorderColor(self, color: int) -> None: ...
    def setFillColor(self, color: int) -> None: ...
    def setRoundAngle(self, width: int, height: int) -> None: ...
    pass
class XShapeTable(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeTable: ...
    def comboColumn(self, row: int, column: int, count: int) -> None: ...
    def comboRow(self, row: int, column: int, count: int) -> None: ...
    def getItemRect(self, row: int, column: int) -> XRect: ...
    def isValid(self) -> bool: ...
    def reset(self, row: int, column: int) -> None: ...
    def setBorderColor(self, color: int) -> None: ...
    def setColumnWidth(self, column: int, width: int) -> None: ...
    def setFont(self, font: XFont) -> None: ...
    def setItemBkColor(self, row: int, column: int, color: int, enable: bool) -> None: ...
    def setItemFlag(self, row: int, column: int, flag: int) -> None: ...
    def setItemFont(self, row: int, column: int, font: XFont) -> None: ...
    def setItemLine(self, row1: int, column1: int, row2: int, column2: int, flag: int, color: int) -> None: ...
    def setItemPadding(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setItemText(self, row: int, column: int, text: str) -> None: ...
    def setItemTextAlign(self, row: int, column: int, align: int) -> None: ...
    def setItemTextColor(self, row: int, column: int, color: int, enable: bool) -> None: ...
    def setRowHeight(self, row: int, height: int) -> None: ...
    def setTextColor(self, color: int) -> None: ...
    pass
class XShapeText(XShape, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XShapeText: ...
    def getFont(self) -> XFont: ...
    def getText(self) -> str: ...
    def getTextColor(self) -> int: ...
    def getTextLength(self) -> int: ...
    def isValid(self) -> bool: ...
    def setFont(self, font: XFont) -> None: ...
    def setOffset(self, x: int, y: int) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlign(self, align: int) -> None: ...
    def setTextColor(self, color: int) -> None: ...
    pass
class XSize():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int) -> None: ...
    @staticmethod
    def cast(pointer: int) -> XSize: ...
    @property
    def height(self) -> int:
        """
        :type: int
        """
    @height.setter
    def height(self, arg0: int) -> None:
        pass
    @property
    def width(self) -> int:
        """
        :type: int
        """
    @width.setter
    def width(self, arg0: int) -> None:
        pass
    pass
class XSliderBar(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XSliderBar: ...
    def enableHorizon(self, enable: bool) -> None: ...
    def getButton(self) -> XButton: ...
    def getPos(self) -> int: ...
    def getRange(self) -> int: ...
    def isValid(self) -> bool: ...
    def setButtonHeight(self, length: int) -> None: ...
    def setButtonWidth(self, width: int) -> None: ...
    def setImageLoad(self, image: XImage) -> None: ...
    def setPos(self, pos: int) -> None: ...
    def setRange(self, range: int) -> None: ...
    pass
class XStrokeInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, color: int, strokeWidth: float) -> None: ...
    @property
    def name(self) -> int:
        """
        :type: int
        """
    @name.setter
    def name(self, arg0: int) -> None:
        pass
    @property
    def strokeWidth(self) -> float:
        """
        :type: float
        """
    @strokeWidth.setter
    def strokeWidth(self, arg0: float) -> None:
        pass
    pass
class XSvg(XObject):
    def addRef(self) -> None: ...
    @staticmethod
    def cast(handle: int) -> XSvg: ...
    def destroy(self) -> None: ...
    def enableAutoDestroy(self, enable: bool) -> None: ...
    def getAlpha(self) -> int: ...
    def getHeight(self) -> int: ...
    def getPosition(self) -> XPoint: ...
    def getRefCount(self) -> int: ...
    def getRotate(self) -> XRotateInfo: ...
    def getRotateAngle(self) -> float: ...
    def getSize(self) -> XSize: ...
    def getUserFillColor(self) -> int: ...
    def getUserStrokeColor(self) -> XStrokeInfo: ...
    def getViewBox(self) -> XRect: ...
    def getWidth(self) -> int: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def loadFile(filename: str) -> XSvg: ...
    @staticmethod
    def loadRes(resId: int, filename: str, hModule: int) -> XSvg: ...
    @staticmethod
    def loadString(text: str) -> XSvg: ...
    @staticmethod
    def loadZip(zipFileName: str, fileName: str, password: str) -> XSvg: ...
    @staticmethod
    def loadZipMem(data: bytes, fileName: str, password: str) -> XSvg: ...
    def release(self) -> None: ...
    def setAlpha(self, alpha: int) -> None: ...
    def setPosition(self, x: int, y: int) -> None: ...
    def setRotate(self, angle: float, x: float, y: float, offset: bool) -> None: ...
    def setRotateAngle(self, angle: float) -> None: ...
    def setSize(self, width: int, height: int) -> None: ...
    def setUserFillColor(self, color: int, enable: bool) -> None: ...
    def setUserStrokeColor(self, color: int, strokeWidth: float, enable: bool) -> None: ...
    def show(self, enable: bool) -> None: ...
    pass
class XTabBar(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def addLabel(self, name: str) -> int: ...
    @staticmethod
    def cast(handle: int) -> XTabBar: ...
    def deleteLabel(self, index: int) -> bool: ...
    def deleteLabelAll(self) -> None: ...
    def enableClose(self, enable: bool) -> None: ...
    def enableDropMenu(self, enable: bool) -> None: ...
    def enableTile(self, enable: bool) -> None: ...
    def getButtonDropMenu(self) -> XObject: ...
    def getButtonLeft(self) -> XObject: ...
    def getButtonRight(self) -> XObject: ...
    def getIndexByEle(self, ele: XElement) -> int: ...
    def getLabel(self, index: int) -> XObject: ...
    def getLabelClose(self, index: int) -> XObject: ...
    def getLabelCount(self) -> int: ...
    def getLabelSpacing(self) -> int: ...
    def getSelect(self) -> int: ...
    def insertLabel(self, index: int, name: str) -> int: ...
    def isValid(self) -> bool: ...
    def moveLabel(self, src: int, dest: int) -> bool: ...
    def setCloseSize(self, size: XSize) -> None: ...
    def setDown(self) -> None: ...
    def setLabelSpacing(self, spacing: int) -> None: ...
    def setLabelWidth(self, index: int, width: int) -> None: ...
    def setPadding(self, left: int, top: int, right: int, bottom: int) -> None: ...
    def setSelect(self, index: int) -> None: ...
    def setTurnButtonSize(self, size: XSize) -> None: ...
    def setUp(self) -> None: ...
    def showLabel(self, index: int, enable: bool) -> bool: ...
    pass
class XTemplate():
    def __init__(self, tempType: listItemTemp_type_) -> None: ...
    def addNodeRoot(self, node: XTemplateNode) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XTemplate: ...
    @staticmethod
    def clone(template: XTemplate) -> XTemplate: ...
    def destroy(self) -> bool: ...
    def getHandle(self) -> int: ...
    def getNode(self, index: int) -> XTemplateNode: ...
    def getType(self) -> listItemTemp_type_: ...
    @staticmethod
    def load(tempType: listItemTemp_type_, filename: str) -> XTemplate: ...
    @staticmethod
    def loadEx(tempType: listItemTemp_type_, filename: str) -> typing.List[XTemplate]: ...
    @staticmethod
    def loadMem(tempType: listItemTemp_type_, xmlData: bytes) -> XTemplate: ...
    @staticmethod
    def loadMemEx(tempType: listItemTemp_type_, xmlData: bytes) -> typing.List[XTemplate]: ...
    @staticmethod
    def loadZip(tempType: listItemTemp_type_, zipFileName: str, fileName: str, password: str) -> XTemplate: ...
    @staticmethod
    def loadZipEx(tempType: listItemTemp_type_, zipFileName: str, fileName: str, password: str) -> typing.List[XTemplate]: ...
    @staticmethod
    def loadZipMem(tempType: listItemTemp_type_, data: bytes, fileName: str, password: str) -> XTemplate: ...
    @staticmethod
    def loadZipMemEx(tempType: listItemTemp_type_, data: bytes, fileName: str, password: str) -> typing.List[XTemplate]: ...
    pass
class XTemplateNode():
    def __init__(self, objectType: XC_OBJECT_TYPE) -> None: ...
    def addNode(self, childNode: XTemplateNode) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XTemplateNode: ...
    @staticmethod
    def cloneNode(node: XTemplateNode) -> XTemplateNode: ...
    def getHandle(self) -> int: ...
    def getNode(self, itemId: int) -> XTemplateNode: ...
    def setNodeAttribute(self, name: str, value: str) -> bool: ...
    def setNodeAttributeEx(self, itemId: int, name: str, value: str) -> bool: ...
    pass
class XTextLink(XButton, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, text: str, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XTextLink: ...
    def enableUnderlineLeave(self, enable: bool) -> None: ...
    def enableUnderlineStay(self, enable: bool) -> None: ...
    def isValid(self) -> bool: ...
    def setTextColorStay(self, color: int) -> None: ...
    def setUnderlineColorLeave(self, color: int) -> None: ...
    def setUnderlineColorStay(self, color: int) -> None: ...
    pass
class XTimeInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, hour: int, minute: int, second: int) -> None: ...
    @property
    def hour(self) -> int:
        """
        :type: int
        """
    @hour.setter
    def hour(self, arg0: int) -> None:
        pass
    @property
    def minute(self) -> int:
        """
        :type: int
        """
    @minute.setter
    def minute(self, arg0: int) -> None:
        pass
    @property
    def second(self) -> int:
        """
        :type: int
        """
    @second.setter
    def second(self, arg0: int) -> None:
        pass
    pass
class XToolBar(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XToolBar: ...
    def deleteAllEle(self) -> None: ...
    def deleteEle(self, index: int) -> None: ...
    def enableButtonMenu(self, enable: bool) -> None: ...
    def getButtonLeft(self) -> XObject: ...
    def getButtonMenu(self) -> XObject: ...
    def getButtonRight(self) -> XObject: ...
    def getEle(self, index: int) -> XObject: ...
    def insertEle(self, ele: XElement, index: int) -> None: ...
    def insertSeparator(self, index: int = -1, color: int = 4286611584) -> int: ...
    def isValid(self) -> bool: ...
    def setSpace(self, size: int) -> None: ...
    pass
class XTree(XScrollView, XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    def bindAdapter(self, adapter: XAdapter) -> None: ...
    @staticmethod
    def cast(handle: int) -> XTree: ...
    def createAdapter(self) -> XObject: ...
    def deleteColumnAll(self) -> None: ...
    def deleteItem(self, itemId: int) -> bool: ...
    def deleteItemAll(self) -> None: ...
    def enableConnectLine(self, enable: bool, solid: bool) -> None: ...
    def enableDragItem(self, enable: bool) -> None: ...
    def enableExpand(self, enable: bool) -> None: ...
    def enableTemplateReuse(self, enable: bool) -> None: ...
    def expandAllChildItem(self, itemId: int, expand: bool) -> bool: ...
    def expandItem(self, itemId: int, expand: bool) -> bool: ...
    def getAdapter(self) -> XObject: ...
    def getCount(self) -> int: ...
    def getCountColumn(self) -> int: ...
    def getEndChildItem(self, itemId: int) -> int: ...
    def getFirstChildItem(self, itemId: int) -> bool: ...
    def getIndentation(self) -> int: ...
    def getItemData(self, itemId: int) -> None: ...
    def getItemHeight(self, itemId: int) -> XItemHeightInfo: ...
    def getItemHeightDefault(self) -> XItemHeightInfo: ...
    def getItemIdFromUIObject(self, ele: XWidget) -> int: ...
    def getItemImage(self, itemId: int, column: int) -> XImage: ...
    def getItemImageEx(self, itemId: int, name: str) -> XImage: ...
    def getItemText(self, itemId: int, column: int) -> str: ...
    def getItemTextEx(self, itemId: int, name: str) -> str: ...
    def getNextSiblingItem(self, itemId: int) -> int: ...
    def getParentItem(self, itemId: int) -> int: ...
    def getPrevSiblingItem(self, itemId: int) -> int: ...
    def getRowSpace(self) -> int: ...
    def getSelectItem(self) -> int: ...
    def getTemplateObject(self, itemId: int, templateId: int) -> XObject: ...
    def hitTest(self, point: XPoint) -> int: ...
    def hitTestOffset(self, point: XPoint) -> int: ...
    def insertItemImage(self, image: XImage, parentId: int = 0, insertId: int = -3) -> int: ...
    def insertItemImageEx(self, name: str, image: XImage, parentId: int = 0, insertId: int = -3) -> int: ...
    def insertItemText(self, text: str, parentId: int = 0, insertId: int = -3) -> int: ...
    def insertItemTextEx(self, name: str, text: str, parentId: int = 0, insertId: int = -3) -> int: ...
    def isExpand(self, itemId: int) -> bool: ...
    def isValid(self) -> bool: ...
    def moveItem(self, srcItemId: int, destItemId: int, flag: int) -> bool: ...
    def refreshData(self) -> None: ...
    def refreshItem(self, itemId: int) -> None: ...
    def setConnectLineColor(self, color: int) -> None: ...
    def setConnectLineLength(self, length: int) -> None: ...
    def setDragInsertPositionColor(self, color: int) -> None: ...
    def setDrawItemBkFlags(self, flags: int) -> None: ...
    def setExpandButtonSize(self, width: int, height: int) -> None: ...
    def setIndentation(self, width: int) -> None: ...
    def setItemData(self, itemId: int, userdata: object) -> None: ...
    def setItemHeight(self, itemId: int, height: int, selHeight: int) -> None: ...
    def setItemHeightDefault(self, height: int, selHeight: int) -> None: ...
    def setItemImage(self, itemId: int, column: int, image: XImage) -> bool: ...
    def setItemImageEx(self, itemId: int, name: str, image: XImage) -> bool: ...
    def setItemTemplate(self, template: XTemplate) -> bool: ...
    def setItemTemplateSel(self, template: XTemplate) -> bool: ...
    def setItemTemplateSelXMLFromMem(self, xmlData: bytes) -> bool: ...
    def setItemTemplateXML(self, xmlFile: str) -> bool: ...
    def setItemTemplateXMLFromMem(self, xmlData: bytes) -> bool: ...
    def setItemTemplateXMLSel(self, xmlFile: str) -> bool: ...
    def setItemText(self, itemId: int, column: int, text: str) -> bool: ...
    def setItemTextEx(self, itemId: int, name: str, text: str) -> bool: ...
    def setRowSpace(self, space: int) -> None: ...
    def setSelectItem(self, itemId: int) -> bool: ...
    def setSplitLineColor(self, color: int) -> None: ...
    pass
class XDateTime(XElement, XWidget, XObjectUI, XObject):
    @typing.overload
    def __init__(self, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, parent: XObjectUI = None) -> None: ...
    @staticmethod
    def cast(handle: int) -> XDateTime: ...
    def getButton(self, btnType: int) -> XButton: ...
    def getDate(self) -> XDateInfo: ...
    def getSelBkColor(self) -> int: ...
    def getStyle(self) -> int: ...
    def getTime(self) -> XTimeInfo: ...
    def isValid(self) -> bool: ...
    def popup(self) -> None: ...
    def setDate(self, year: int, month: int, day: int) -> None: ...
    def setSelBkColor(self, color: int) -> None: ...
    def setStyle(self, style: int) -> None: ...
    def setTime(self, hour: int, minute: int, second: int) -> None: ...
    pass
class XFrameWindow(XWindow, XObjectUI, XLayoutBox, XObject):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, exStyle: int, style: int, className: str, x: int, y: int, width: int, height: int, title: str, hwndParent: int, xcStyle: int = 2031) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, title: str) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int, title: str, hwndParent: int, xcStyle: int = 2031) -> None: ...
    def addPane(self, panelDest: XElement, paneNew: XElement, align: pane_align_) -> bool: ...
    def attach(self, hwnd: int, style: int) -> bool: ...
    @staticmethod
    def cast(handle: int) -> XFrameWindow: ...
    def getDragFloatWndTopFlag(self) -> frameWnd_cell_type_: ...
    def getLayoutAreaRect(self) -> None: ...
    def isValid(self) -> bool: ...
    def loadLayoutFile(self, panelList: typing.List[XElement], filename: str) -> bool: ...
    def mergePane(self, panelDest: XElement, paneNew: XElement) -> bool: ...
    def saveLayoutToFile(self, filename: str) -> bool: ...
    def setPaneSplitBarColor(self, color: int) -> None: ...
    def setTabBarHeight(self, height: int) -> None: ...
    def setView(self, ele: XElement) -> None: ...
    pass
class adapter_date_type_():
    """
    Members:

      adapter_date_type_error

      adapter_date_type_int

      adapter_date_type_float

      adapter_date_type_string

      adapter_date_type_image
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'adapter_date_type_error': <adapter_date_type_.adapter_date_type_error: -1>, 'adapter_date_type_int': <adapter_date_type_.adapter_date_type_int: 0>, 'adapter_date_type_float': <adapter_date_type_.adapter_date_type_float: 1>, 'adapter_date_type_string': <adapter_date_type_.adapter_date_type_string: 2>, 'adapter_date_type_image': <adapter_date_type_.adapter_date_type_image: 3>}
    adapter_date_type_error: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_error: -1>
    adapter_date_type_float: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_float: 1>
    adapter_date_type_image: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_image: 3>
    adapter_date_type_int: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_int: 0>
    adapter_date_type_string: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_string: 2>
    pass
class adjustLayout_():
    """
    Members:

      adjustLayout_no

      adjustLayout_all

      adjustLayout_self
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'adjustLayout_no': <adjustLayout_.adjustLayout_no: 0>, 'adjustLayout_all': <adjustLayout_.adjustLayout_all: 1>, 'adjustLayout_self': <adjustLayout_.adjustLayout_self: 2>}
    adjustLayout_all: _xcgui.adjustLayout_ # value = <adjustLayout_.adjustLayout_all: 1>
    adjustLayout_no: _xcgui.adjustLayout_ # value = <adjustLayout_.adjustLayout_no: 0>
    adjustLayout_self: _xcgui.adjustLayout_ # value = <adjustLayout_.adjustLayout_self: 2>
    pass
class animation_move_():
    """
    Members:

      animation_move_x

      animation_move_y
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'animation_move_x': <animation_move_.animation_move_x: 1>, 'animation_move_y': <animation_move_.animation_move_y: 2>}
    animation_move_x: _xcgui.animation_move_ # value = <animation_move_.animation_move_x: 1>
    animation_move_y: _xcgui.animation_move_ # value = <animation_move_.animation_move_y: 2>
    pass
class bkObject_align_flag_():
    """
    Members:

      bkObject_align_flag_no

      bkObject_align_flag_left

      bkObject_align_flag_top

      bkObject_align_flag_right

      bkObject_align_flag_bottom

      bkObject_align_flag_center

      bkObject_align_flag_center_v
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'bkObject_align_flag_no': <bkObject_align_flag_.bkObject_align_flag_no: 0>, 'bkObject_align_flag_left': <bkObject_align_flag_.bkObject_align_flag_left: 1>, 'bkObject_align_flag_top': <bkObject_align_flag_.bkObject_align_flag_top: 2>, 'bkObject_align_flag_right': <bkObject_align_flag_.bkObject_align_flag_right: 4>, 'bkObject_align_flag_bottom': <bkObject_align_flag_.bkObject_align_flag_bottom: 8>, 'bkObject_align_flag_center': <bkObject_align_flag_.bkObject_align_flag_center: 16>, 'bkObject_align_flag_center_v': <bkObject_align_flag_.bkObject_align_flag_center_v: 32>}
    bkObject_align_flag_bottom: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_bottom: 8>
    bkObject_align_flag_center: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_center: 16>
    bkObject_align_flag_center_v: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_center_v: 32>
    bkObject_align_flag_left: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_left: 1>
    bkObject_align_flag_no: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_no: 0>
    bkObject_align_flag_right: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_right: 4>
    bkObject_align_flag_top: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_top: 2>
    pass
class borderSize_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> borderSize_: ...
    @property
    def bottomSize(self) -> int:
        """
        :type: int
        """
    @bottomSize.setter
    def bottomSize(self, arg0: int) -> None:
        pass
    @property
    def leftSize(self) -> int:
        """
        :type: int
        """
    @leftSize.setter
    def leftSize(self, arg0: int) -> None:
        pass
    @property
    def rightSize(self) -> int:
        """
        :type: int
        """
    @rightSize.setter
    def rightSize(self, arg0: int) -> None:
        pass
    @property
    def topSize(self) -> int:
        """
        :type: int
        """
    @topSize.setter
    def topSize(self, arg0: int) -> None:
        pass
    pass
class button_icon_align_():
    """
    Members:

      button_icon_align_left

      button_icon_align_top

      button_icon_align_right

      button_icon_align_bottom
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'button_icon_align_left': <button_icon_align_.button_icon_align_left: 0>, 'button_icon_align_top': <button_icon_align_.button_icon_align_top: 1>, 'button_icon_align_right': <button_icon_align_.button_icon_align_right: 2>, 'button_icon_align_bottom': <button_icon_align_.button_icon_align_bottom: 3>}
    button_icon_align_bottom: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_bottom: 3>
    button_icon_align_left: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_left: 0>
    button_icon_align_right: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_right: 2>
    button_icon_align_top: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_top: 1>
    pass
class button_state_():
    """
    Members:

      button_state_leave

      button_state_stay

      button_state_down

      button_state_check

      button_state_disable
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'button_state_leave': <button_state_.button_state_leave: 0>, 'button_state_stay': <button_state_.button_state_stay: 1>, 'button_state_down': <button_state_.button_state_down: 2>, 'button_state_check': <button_state_.button_state_check: 3>, 'button_state_disable': <button_state_.button_state_disable: 4>}
    button_state_check: _xcgui.button_state_ # value = <button_state_.button_state_check: 3>
    button_state_disable: _xcgui.button_state_ # value = <button_state_.button_state_disable: 4>
    button_state_down: _xcgui.button_state_ # value = <button_state_.button_state_down: 2>
    button_state_leave: _xcgui.button_state_ # value = <button_state_.button_state_leave: 0>
    button_state_stay: _xcgui.button_state_ # value = <button_state_.button_state_stay: 1>
    pass
class button_state_flag_():
    """
    Members:

      button_state_flag_leave

      button_state_flag_stay

      button_state_flag_down

      button_state_flag_check

      button_state_flag_check_no

      button_state_flag_WindowRestore

      button_state_flag_WindowMaximize
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'button_state_flag_leave': <button_state_flag_.button_state_flag_leave: 16>, 'button_state_flag_stay': <button_state_flag_.button_state_flag_stay: 32>, 'button_state_flag_down': <button_state_flag_.button_state_flag_down: 64>, 'button_state_flag_check': <button_state_flag_.button_state_flag_check: 128>, 'button_state_flag_check_no': <button_state_flag_.button_state_flag_check_no: 256>, 'button_state_flag_WindowRestore': <button_state_flag_.button_state_flag_WindowRestore: 512>, 'button_state_flag_WindowMaximize': <button_state_flag_.button_state_flag_WindowMaximize: 1024>}
    button_state_flag_WindowMaximize: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_WindowMaximize: 1024>
    button_state_flag_WindowRestore: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_WindowRestore: 512>
    button_state_flag_check: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_check: 128>
    button_state_flag_check_no: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_check_no: 256>
    button_state_flag_down: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_down: 64>
    button_state_flag_leave: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_leave: 16>
    button_state_flag_stay: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_stay: 32>
    pass
class chat_flag_():
    """
    Members:

      chat_flag_left

      chat_flag_right

      chat_flag_center

      chat_flag_next_row_bubble
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'chat_flag_left': <chat_flag_.chat_flag_left: 1>, 'chat_flag_right': <chat_flag_.chat_flag_right: 2>, 'chat_flag_center': <chat_flag_.chat_flag_center: 4>, 'chat_flag_next_row_bubble': <chat_flag_.chat_flag_next_row_bubble: 8>}
    chat_flag_center: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_center: 4>
    chat_flag_left: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_left: 1>
    chat_flag_next_row_bubble: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_next_row_bubble: 8>
    chat_flag_right: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_right: 2>
    pass
class comboBox_state_():
    """
    Members:

      comboBox_state_leave

      comboBox_state_stay

      comboBox_state_down
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'comboBox_state_leave': <comboBox_state_.comboBox_state_leave: 0>, 'comboBox_state_stay': <comboBox_state_.comboBox_state_stay: 1>, 'comboBox_state_down': <comboBox_state_.comboBox_state_down: 2>}
    comboBox_state_down: _xcgui.comboBox_state_ # value = <comboBox_state_.comboBox_state_down: 2>
    comboBox_state_leave: _xcgui.comboBox_state_ # value = <comboBox_state_.comboBox_state_leave: 0>
    comboBox_state_stay: _xcgui.comboBox_state_ # value = <comboBox_state_.comboBox_state_stay: 1>
    pass
class comboBox_state_flag_():
    """
    Members:

      comboBox_state_flag_leave

      comboBox_state_flag_stay

      comboBox_state_flag_down
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'comboBox_state_flag_leave': <comboBox_state_flag_.comboBox_state_flag_leave: 16>, 'comboBox_state_flag_stay': <comboBox_state_flag_.comboBox_state_flag_stay: 32>, 'comboBox_state_flag_down': <comboBox_state_flag_.comboBox_state_flag_down: 64>}
    comboBox_state_flag_down: _xcgui.comboBox_state_flag_ # value = <comboBox_state_flag_.comboBox_state_flag_down: 64>
    comboBox_state_flag_leave: _xcgui.comboBox_state_flag_ # value = <comboBox_state_flag_.comboBox_state_flag_leave: 16>
    comboBox_state_flag_stay: _xcgui.comboBox_state_flag_ # value = <comboBox_state_flag_.comboBox_state_flag_stay: 32>
    pass
class common_state3_():
    """
    Members:

      common_state3_leave

      common_state3_stay

      common_state3_down
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'common_state3_leave': <common_state3_.common_state3_leave: 0>, 'common_state3_stay': <common_state3_.common_state3_stay: 1>, 'common_state3_down': <common_state3_.common_state3_down: 2>}
    common_state3_down: _xcgui.common_state3_ # value = <common_state3_.common_state3_down: 2>
    common_state3_leave: _xcgui.common_state3_ # value = <common_state3_.common_state3_leave: 0>
    common_state3_stay: _xcgui.common_state3_ # value = <common_state3_.common_state3_stay: 1>
    pass
class ease_flag_():
    """
    Members:

      ease_flag_linear

      ease_flag_quad

      ease_flag_cubic

      ease_flag_quart

      ease_flag_quint

      ease_flag_sine

      ease_flag_expo

      ease_flag_circ

      ease_flag_elastic

      ease_flag_back

      ease_flag_bounce

      ease_flag_in

      ease_flag_out

      ease_flag_inOut
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'ease_flag_linear': <ease_flag_.ease_flag_linear: 0>, 'ease_flag_quad': <ease_flag_.ease_flag_quad: 1>, 'ease_flag_cubic': <ease_flag_.ease_flag_cubic: 2>, 'ease_flag_quart': <ease_flag_.ease_flag_quart: 3>, 'ease_flag_quint': <ease_flag_.ease_flag_quint: 4>, 'ease_flag_sine': <ease_flag_.ease_flag_sine: 5>, 'ease_flag_expo': <ease_flag_.ease_flag_expo: 6>, 'ease_flag_circ': <ease_flag_.ease_flag_circ: 7>, 'ease_flag_elastic': <ease_flag_.ease_flag_elastic: 8>, 'ease_flag_back': <ease_flag_.ease_flag_back: 9>, 'ease_flag_bounce': <ease_flag_.ease_flag_bounce: 10>, 'ease_flag_in': <ease_flag_.ease_flag_in: 65536>, 'ease_flag_out': <ease_flag_.ease_flag_out: 131072>, 'ease_flag_inOut': <ease_flag_.ease_flag_inOut: 196608>}
    ease_flag_back: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_back: 9>
    ease_flag_bounce: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_bounce: 10>
    ease_flag_circ: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_circ: 7>
    ease_flag_cubic: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_cubic: 2>
    ease_flag_elastic: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_elastic: 8>
    ease_flag_expo: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_expo: 6>
    ease_flag_in: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_in: 65536>
    ease_flag_inOut: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_inOut: 196608>
    ease_flag_linear: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_linear: 0>
    ease_flag_out: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_out: 131072>
    ease_flag_quad: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_quad: 1>
    ease_flag_quart: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_quart: 3>
    ease_flag_quint: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_quint: 4>
    ease_flag_sine: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_sine: 5>
    pass
class ease_type_():
    """
    Members:

      easeIn

      easeOut

      easeInOut
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'easeIn': <ease_type_.easeIn: 0>, 'easeOut': <ease_type_.easeOut: 1>, 'easeInOut': <ease_type_.easeInOut: 2>}
    easeIn: _xcgui.ease_type_ # value = <ease_type_.easeIn: 0>
    easeInOut: _xcgui.ease_type_ # value = <ease_type_.easeInOut: 2>
    easeOut: _xcgui.ease_type_ # value = <ease_type_.easeOut: 1>
    pass
class edit_data_copy_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> edit_data_copy_: ...
    @property
    def nCount(self) -> int:
        """
        :type: int
        """
    @nCount.setter
    def nCount(self, arg0: int) -> None:
        pass
    @property
    def nStyleCount(self) -> int:
        """
        :type: int
        """
    @nStyleCount.setter
    def nStyleCount(self, arg0: int) -> None:
        pass
    @property
    def pData(self) -> int:
        """
        :type: int
        """
    @pData.setter
    def pData(self, arg0: int) -> None:
        pass
    @property
    def pStyle(self) -> edit_data_copy_style_:
        """
        :type: edit_data_copy_style_
        """
    @pStyle.setter
    def pStyle(self, arg0: edit_data_copy_style_) -> None:
        pass
    pass
class edit_data_copy_style_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> edit_data_copy_style_: ...
    @property
    def bColor(self) -> bool:
        """
        :type: bool
        """
    @bColor.setter
    def bColor(self, arg1: bool) -> None:
        pass
    @property
    def color(self) -> int:
        """
        :type: int
        """
    @color.setter
    def color(self, arg0: int) -> None:
        pass
    @property
    def hFont_image_obj(self) -> int:
        """
        :type: int
        """
    @hFont_image_obj.setter
    def hFont_image_obj(self, arg1: int) -> None:
        pass
    pass
class edit_style_info_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> edit_style_info_: ...
    @property
    def bColor(self) -> bool:
        """
        :type: bool
        """
    @bColor.setter
    def bColor(self, arg1: bool) -> None:
        pass
    @property
    def color(self) -> int:
        """
        :type: int
        """
    @color.setter
    def color(self, arg0: int) -> None:
        pass
    @property
    def hFont_image_obj(self) -> int:
        """
        :type: int
        """
    @hFont_image_obj.setter
    def hFont_image_obj(self, arg1: int) -> None:
        pass
    @property
    def nRef(self) -> int:
        """
        :type: int
        """
    @nRef.setter
    def nRef(self, arg0: int) -> None:
        pass
    @property
    def type(self) -> int:
        """
        :type: int
        """
    @type.setter
    def type(self, arg0: int) -> None:
        pass
    pass
class edit_style_type_():
    """
    Members:

      edit_style_type_font_color

      edit_style_type_image

      edit_style_type_obj
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'edit_style_type_font_color': <edit_style_type_.edit_style_type_font_color: 1>, 'edit_style_type_image': <edit_style_type_.edit_style_type_image: 2>, 'edit_style_type_obj': <edit_style_type_.edit_style_type_obj: 3>}
    edit_style_type_font_color: _xcgui.edit_style_type_ # value = <edit_style_type_.edit_style_type_font_color: 1>
    edit_style_type_image: _xcgui.edit_style_type_ # value = <edit_style_type_.edit_style_type_image: 2>
    edit_style_type_obj: _xcgui.edit_style_type_ # value = <edit_style_type_.edit_style_type_obj: 3>
    pass
class edit_textAlign_flag_():
    """
    Members:

      edit_textAlign_flag_left

      edit_textAlign_flag_right

      edit_textAlign_flag_center

      edit_textAlign_flag_top

      edit_textAlign_flag_bottom

      edit_textAlign_flag_center_v
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'edit_textAlign_flag_left': <edit_textAlign_flag_.edit_textAlign_flag_left: 0>, 'edit_textAlign_flag_right': <edit_textAlign_flag_.edit_textAlign_flag_right: 1>, 'edit_textAlign_flag_center': <edit_textAlign_flag_.edit_textAlign_flag_center: 2>, 'edit_textAlign_flag_top': <edit_textAlign_flag_.edit_textAlign_flag_left: 0>, 'edit_textAlign_flag_bottom': <edit_textAlign_flag_.edit_textAlign_flag_bottom: 4>, 'edit_textAlign_flag_center_v': <edit_textAlign_flag_.edit_textAlign_flag_center_v: 8>}
    edit_textAlign_flag_bottom: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_bottom: 4>
    edit_textAlign_flag_center: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_center: 2>
    edit_textAlign_flag_center_v: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_center_v: 8>
    edit_textAlign_flag_left: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
    edit_textAlign_flag_right: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_right: 1>
    edit_textAlign_flag_top: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
    pass
class edit_type_():
    """
    Members:

      edit_type_none

      edit_type_editor

      edit_type_richedit

      edit_type_chat

      edit_type_codeTable
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'edit_type_none': <edit_type_.edit_type_none: 0>, 'edit_type_editor': <edit_type_.edit_type_editor: 1>, 'edit_type_richedit': <edit_type_.edit_type_richedit: 2>, 'edit_type_chat': <edit_type_.edit_type_chat: 3>, 'edit_type_codeTable': <edit_type_.edit_type_codeTable: 4>}
    edit_type_chat: _xcgui.edit_type_ # value = <edit_type_.edit_type_chat: 3>
    edit_type_codeTable: _xcgui.edit_type_ # value = <edit_type_.edit_type_codeTable: 4>
    edit_type_editor: _xcgui.edit_type_ # value = <edit_type_.edit_type_editor: 1>
    edit_type_none: _xcgui.edit_type_ # value = <edit_type_.edit_type_none: 0>
    edit_type_richedit: _xcgui.edit_type_ # value = <edit_type_.edit_type_richedit: 2>
    pass
class editor_color_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> editor_color_: ...
    @property
    def StylePunctuation(self) -> int:
        """
        :type: int
        """
    @StylePunctuation.setter
    def StylePunctuation(self, arg0: int) -> None:
        pass
    @property
    def bAlignLineArrow(self) -> bool:
        """
        :type: bool
        """
    @bAlignLineArrow.setter
    def bAlignLineArrow(self, arg1: bool) -> None:
        pass
    @property
    def clrAlignLine(self) -> int:
        """
        :type: int
        """
    @clrAlignLine.setter
    def clrAlignLine(self, arg0: int) -> None:
        pass
    @property
    def clrAlignLineSel(self) -> int:
        """
        :type: int
        """
    @clrAlignLineSel.setter
    def clrAlignLineSel(self, arg0: int) -> None:
        pass
    @property
    def clrCurRowFull(self) -> int:
        """
        :type: int
        """
    @clrCurRowFull.setter
    def clrCurRowFull(self, arg0: int) -> None:
        pass
    @property
    def clrFunSplitLine(self) -> int:
        """
        :type: int
        """
    @clrFunSplitLine.setter
    def clrFunSplitLine(self, arg0: int) -> None:
        pass
    @property
    def clrMargin1(self) -> int:
        """
        :type: int
        """
    @clrMargin1.setter
    def clrMargin1(self, arg0: int) -> None:
        pass
    @property
    def clrMargin2(self) -> int:
        """
        :type: int
        """
    @clrMargin2.setter
    def clrMargin2(self, arg0: int) -> None:
        pass
    @property
    def clrMargin_breakpoint(self) -> int:
        """
        :type: int
        """
    @clrMargin_breakpoint.setter
    def clrMargin_breakpoint(self, arg0: int) -> None:
        pass
    @property
    def clrMargin_breakpointBorder(self) -> int:
        """
        :type: int
        """
    @clrMargin_breakpointBorder.setter
    def clrMargin_breakpointBorder(self, arg0: int) -> None:
        pass
    @property
    def clrMargin_curRow(self) -> int:
        """
        :type: int
        """
    @clrMargin_curRow.setter
    def clrMargin_curRow(self, arg0: int) -> None:
        pass
    @property
    def clrMargin_error(self) -> int:
        """
        :type: int
        """
    @clrMargin_error.setter
    def clrMargin_error(self, arg0: int) -> None:
        pass
    @property
    def clrMargin_runRowArrow(self) -> int:
        """
        :type: int
        """
    @clrMargin_runRowArrow.setter
    def clrMargin_runRowArrow(self, arg0: int) -> None:
        pass
    @property
    def clrMargin_text(self) -> int:
        """
        :type: int
        """
    @clrMargin_text.setter
    def clrMargin_text(self, arg0: int) -> None:
        pass
    @property
    def clrMatchSel(self) -> int:
        """
        :type: int
        """
    @clrMatchSel.setter
    def clrMatchSel(self, arg0: int) -> None:
        pass
    @property
    def styleClass(self) -> int:
        """
        :type: int
        """
    @styleClass.setter
    def styleClass(self, arg0: int) -> None:
        pass
    @property
    def styleComment(self) -> int:
        """
        :type: int
        """
    @styleComment.setter
    def styleComment(self, arg0: int) -> None:
        pass
    @property
    def styleDataType(self) -> int:
        """
        :type: int
        """
    @styleDataType.setter
    def styleDataType(self, arg0: int) -> None:
        pass
    @property
    def styleEnum(self) -> int:
        """
        :type: int
        """
    @styleEnum.setter
    def styleEnum(self, arg0: int) -> None:
        pass
    @property
    def styleFunction(self) -> int:
        """
        :type: int
        """
    @styleFunction.setter
    def styleFunction(self, arg0: int) -> None:
        pass
    @property
    def styleMacro(self) -> int:
        """
        :type: int
        """
    @styleMacro.setter
    def styleMacro(self, arg0: int) -> None:
        pass
    @property
    def styleNumber(self) -> int:
        """
        :type: int
        """
    @styleNumber.setter
    def styleNumber(self, arg0: int) -> None:
        pass
    @property
    def styleString(self) -> int:
        """
        :type: int
        """
    @styleString.setter
    def styleString(self, arg0: int) -> None:
        pass
    @property
    def styleSys(self) -> int:
        """
        :type: int
        """
    @styleSys.setter
    def styleSys(self, arg0: int) -> None:
        pass
    @property
    def styleVar(self) -> int:
        """
        :type: int
        """
    @styleVar.setter
    def styleVar(self, arg0: int) -> None:
        pass
    pass
class element_position_():
    """
    Members:

      element_position_no

      element_position_left

      element_position_top

      element_position_right

      element_position_bottom
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'element_position_no': <element_position_.element_position_no: 0>, 'element_position_left': <element_position_.element_position_left: 1>, 'element_position_top': <element_position_.element_position_top: 2>, 'element_position_right': <element_position_.element_position_right: 4>, 'element_position_bottom': <element_position_.element_position_bottom: 8>}
    element_position_bottom: _xcgui.element_position_ # value = <element_position_.element_position_bottom: 8>
    element_position_left: _xcgui.element_position_ # value = <element_position_.element_position_left: 1>
    element_position_no: _xcgui.element_position_ # value = <element_position_.element_position_no: 0>
    element_position_right: _xcgui.element_position_ # value = <element_position_.element_position_right: 4>
    element_position_top: _xcgui.element_position_ # value = <element_position_.element_position_top: 2>
    pass
class element_state_flag_():
    """
    Members:

      element_state_flag_nothing

      element_state_flag_enable

      element_state_flag_disable

      element_state_flag_focus

      element_state_flag_focus_no

      element_state_flag_focusEx

      element_state_flag_focusEx_no

      layout_state_flag_layout_body

      element_state_flag_leave

      element_state_flag_stay

      element_state_flag_down
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'element_state_flag_nothing': <element_state_flag_.element_state_flag_nothing: 0>, 'element_state_flag_enable': <element_state_flag_.element_state_flag_enable: 1>, 'element_state_flag_disable': <element_state_flag_.element_state_flag_disable: 2>, 'element_state_flag_focus': <element_state_flag_.element_state_flag_focus: 4>, 'element_state_flag_focus_no': <element_state_flag_.element_state_flag_focus_no: 8>, 'element_state_flag_focusEx': <element_state_flag_.element_state_flag_focusEx: 1073741824>, 'element_state_flag_focusEx_no': <element_state_flag_.element_state_flag_focusEx_no: -2147483648>, 'layout_state_flag_layout_body': <element_state_flag_.layout_state_flag_layout_body: 536870912>, 'element_state_flag_leave': <element_state_flag_.element_state_flag_leave: 16>, 'element_state_flag_stay': <element_state_flag_.element_state_flag_stay: 32>, 'element_state_flag_down': <element_state_flag_.element_state_flag_down: 64>}
    element_state_flag_disable: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_disable: 2>
    element_state_flag_down: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_down: 64>
    element_state_flag_enable: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_enable: 1>
    element_state_flag_focus: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focus: 4>
    element_state_flag_focusEx: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focusEx: 1073741824>
    element_state_flag_focusEx_no: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focusEx_no: -2147483648>
    element_state_flag_focus_no: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focus_no: 8>
    element_state_flag_leave: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_leave: 16>
    element_state_flag_nothing: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_nothing: 0>
    element_state_flag_stay: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_stay: 32>
    layout_state_flag_layout_body: _xcgui.element_state_flag_ # value = <element_state_flag_.layout_state_flag_layout_body: 536870912>
    pass
class fontStyle_():
    """
    Members:

      fontStyle_regular

      fontStyle_bold

      fontStyle_italic

      fontStyle_boldItalic

      fontStyle_underline

      fontStyle_strikeout
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'fontStyle_regular': <fontStyle_.fontStyle_regular: 0>, 'fontStyle_bold': <fontStyle_.fontStyle_bold: 1>, 'fontStyle_italic': <fontStyle_.fontStyle_italic: 2>, 'fontStyle_boldItalic': <fontStyle_.fontStyle_boldItalic: 3>, 'fontStyle_underline': <fontStyle_.fontStyle_underline: 4>, 'fontStyle_strikeout': <fontStyle_.fontStyle_strikeout: 8>}
    fontStyle_bold: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_bold: 1>
    fontStyle_boldItalic: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_boldItalic: 3>
    fontStyle_italic: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_italic: 2>
    fontStyle_regular: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_regular: 0>
    fontStyle_strikeout: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_strikeout: 8>
    fontStyle_underline: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_underline: 4>
    pass
class font_info_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> font_info_: ...
    @property
    def nSize(self) -> int:
        """
        :type: int
        """
    @nSize.setter
    def nSize(self, arg0: int) -> None:
        pass
    @property
    def nStyle(self) -> int:
        """
        :type: int
        """
    @nStyle.setter
    def nStyle(self, arg0: int) -> None:
        pass
    @property
    def name(self) -> str:
        """
        :type: str
        """
    pass
class frameWnd_cell_type_():
    """
    Members:

      frameWnd_cell_type_no

      frameWnd_cell_type_pane

      frameWnd_cell_type_group

      frameWnd_cell_type_bodyView

      frameWnd_cell_type_top_bottom

      frameWnd_cell_type_left_right
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'frameWnd_cell_type_no': <frameWnd_cell_type_.frameWnd_cell_type_no: 0>, 'frameWnd_cell_type_pane': <frameWnd_cell_type_.frameWnd_cell_type_pane: 1>, 'frameWnd_cell_type_group': <frameWnd_cell_type_.frameWnd_cell_type_group: 2>, 'frameWnd_cell_type_bodyView': <frameWnd_cell_type_.frameWnd_cell_type_bodyView: 3>, 'frameWnd_cell_type_top_bottom': <frameWnd_cell_type_.frameWnd_cell_type_top_bottom: 4>, 'frameWnd_cell_type_left_right': <frameWnd_cell_type_.frameWnd_cell_type_left_right: 5>}
    frameWnd_cell_type_bodyView: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_bodyView: 3>
    frameWnd_cell_type_group: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_group: 2>
    frameWnd_cell_type_left_right: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_left_right: 5>
    frameWnd_cell_type_no: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_no: 0>
    frameWnd_cell_type_pane: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_pane: 1>
    frameWnd_cell_type_top_bottom: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_top_bottom: 4>
    pass
class image_draw_type_():
    """
    Members:

      image_draw_type_default

      image_draw_type_stretch

      image_draw_type_adaptive

      image_draw_type_tile

      image_draw_type_fixed_ratio

      image_draw_type_adaptive_border
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'image_draw_type_default': <image_draw_type_.image_draw_type_default: 0>, 'image_draw_type_stretch': <image_draw_type_.image_draw_type_stretch: 1>, 'image_draw_type_adaptive': <image_draw_type_.image_draw_type_adaptive: 2>, 'image_draw_type_tile': <image_draw_type_.image_draw_type_tile: 3>, 'image_draw_type_fixed_ratio': <image_draw_type_.image_draw_type_fixed_ratio: 4>, 'image_draw_type_adaptive_border': <image_draw_type_.image_draw_type_adaptive_border: 5>}
    image_draw_type_adaptive: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_adaptive: 2>
    image_draw_type_adaptive_border: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_adaptive_border: 5>
    image_draw_type_default: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_default: 0>
    image_draw_type_fixed_ratio: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_fixed_ratio: 4>
    image_draw_type_stretch: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_stretch: 1>
    image_draw_type_tile: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_tile: 3>
    pass
class layout_align_():
    """
    Members:

      layout_align_left

      layout_align_top

      layout_align_right

      layout_align_bottom

      layout_align_center

      layout_align_equidistant
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'layout_align_left': <layout_align_.layout_align_left: 0>, 'layout_align_top': <layout_align_.layout_align_top: 1>, 'layout_align_right': <layout_align_.layout_align_right: 2>, 'layout_align_bottom': <layout_align_.layout_align_bottom: 3>, 'layout_align_center': <layout_align_.layout_align_center: 4>, 'layout_align_equidistant': <layout_align_.layout_align_equidistant: 5>}
    layout_align_bottom: _xcgui.layout_align_ # value = <layout_align_.layout_align_bottom: 3>
    layout_align_center: _xcgui.layout_align_ # value = <layout_align_.layout_align_center: 4>
    layout_align_equidistant: _xcgui.layout_align_ # value = <layout_align_.layout_align_equidistant: 5>
    layout_align_left: _xcgui.layout_align_ # value = <layout_align_.layout_align_left: 0>
    layout_align_right: _xcgui.layout_align_ # value = <layout_align_.layout_align_right: 2>
    layout_align_top: _xcgui.layout_align_ # value = <layout_align_.layout_align_top: 1>
    pass
class layout_align_axis_():
    """
    Members:

      layout_align_axis_auto

      layout_align_axis_start

      layout_align_axis_center

      layout_align_axis_end
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'layout_align_axis_auto': <layout_align_axis_.layout_align_axis_auto: 0>, 'layout_align_axis_start': <layout_align_axis_.layout_align_axis_start: 1>, 'layout_align_axis_center': <layout_align_axis_.layout_align_axis_center: 2>, 'layout_align_axis_end': <layout_align_axis_.layout_align_axis_end: 3>}
    layout_align_axis_auto: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_auto: 0>
    layout_align_axis_center: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_center: 2>
    layout_align_axis_end: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_end: 3>
    layout_align_axis_start: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_start: 1>
    pass
class layout_size_():
    """
    Members:

      layout_size_fixed

      layout_size_fill

      layout_size_auto

      layout_size_weight

      layout_size_percent

      layout_size_disable
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'layout_size_fixed': <layout_size_.layout_size_fixed: 0>, 'layout_size_fill': <layout_size_.layout_size_fill: 1>, 'layout_size_auto': <layout_size_.layout_size_auto: 2>, 'layout_size_weight': <layout_size_.layout_size_weight: 3>, 'layout_size_percent': <layout_size_.layout_size_percent: 4>, 'layout_size_disable': <layout_size_.layout_size_disable: 5>}
    layout_size_auto: _xcgui.layout_size_ # value = <layout_size_.layout_size_auto: 2>
    layout_size_disable: _xcgui.layout_size_ # value = <layout_size_.layout_size_disable: 5>
    layout_size_fill: _xcgui.layout_size_ # value = <layout_size_.layout_size_fill: 1>
    layout_size_fixed: _xcgui.layout_size_ # value = <layout_size_.layout_size_fixed: 0>
    layout_size_percent: _xcgui.layout_size_ # value = <layout_size_.layout_size_percent: 4>
    layout_size_weight: _xcgui.layout_size_ # value = <layout_size_.layout_size_weight: 3>
    pass
class layout_state_flag_():
    """
    Members:

      layout_state_flag_nothing

      layout_state_flag_full

      layout_state_flag_body
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'layout_state_flag_nothing': <layout_state_flag_.layout_state_flag_nothing: 0>, 'layout_state_flag_full': <layout_state_flag_.layout_state_flag_full: 1>, 'layout_state_flag_body': <layout_state_flag_.layout_state_flag_body: 2>}
    layout_state_flag_body: _xcgui.layout_state_flag_ # value = <layout_state_flag_.layout_state_flag_body: 2>
    layout_state_flag_full: _xcgui.layout_state_flag_ # value = <layout_state_flag_.layout_state_flag_full: 1>
    layout_state_flag_nothing: _xcgui.layout_state_flag_ # value = <layout_state_flag_.layout_state_flag_nothing: 0>
    pass
class listBox_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> listBox_item_: ...
    @property
    def hLayout(self) -> int:
        """
        :type: int
        """
    @hLayout.setter
    def hLayout(self, arg1: int) -> None:
        pass
    @property
    def hTemp(self) -> int:
        """
        :type: int
        """
    @hTemp.setter
    def hTemp(self, arg1: int) -> None:
        pass
    @property
    def index(self) -> int:
        """
        :type: int
        """
    @index.setter
    def index(self, arg0: int) -> None:
        pass
    @property
    def nHeight(self) -> int:
        """
        :type: int
        """
    @nHeight.setter
    def nHeight(self, arg0: int) -> None:
        pass
    @property
    def nSelHeight(self) -> int:
        """
        :type: int
        """
    @nSelHeight.setter
    def nSelHeight(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> list_item_state_:
        """
        :type: list_item_state_
        """
    @nState.setter
    def nState(self, arg0: list_item_state_) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class listBox_item_info_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> listBox_item_info_: ...
    @property
    def nHeight(self) -> int:
        """
        :type: int
        """
    @nHeight.setter
    def nHeight(self, arg0: int) -> None:
        pass
    @property
    def nSelHeight(self) -> int:
        """
        :type: int
        """
    @nSelHeight.setter
    def nSelHeight(self, arg0: int) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    pass
class listBox_state_flag_():
    """
    Members:

      listBox_state_flag_item_leave

      listBox_state_flag_item_stay

      listBox_state_flag_item_select

      listBox_state_flag_item_select_no
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'listBox_state_flag_item_leave': <listBox_state_flag_.listBox_state_flag_item_leave: 128>, 'listBox_state_flag_item_stay': <listBox_state_flag_.listBox_state_flag_item_stay: 256>, 'listBox_state_flag_item_select': <listBox_state_flag_.listBox_state_flag_item_select: 512>, 'listBox_state_flag_item_select_no': <listBox_state_flag_.listBox_state_flag_item_select_no: 1024>}
    listBox_state_flag_item_leave: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_leave: 128>
    listBox_state_flag_item_select: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_select: 512>
    listBox_state_flag_item_select_no: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_select_no: 1024>
    listBox_state_flag_item_stay: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_stay: 256>
    pass
class listHeader_state_flag_():
    """
    Members:

      listHeader_state_flag_item_leave

      listHeader_state_flag_item_stay

      listHeader_state_flag_item_down
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'listHeader_state_flag_item_leave': <listHeader_state_flag_.listHeader_state_flag_item_leave: 128>, 'listHeader_state_flag_item_stay': <listHeader_state_flag_.listHeader_state_flag_item_stay: 256>, 'listHeader_state_flag_item_down': <listHeader_state_flag_.listHeader_state_flag_item_down: 512>}
    listHeader_state_flag_item_down: _xcgui.listHeader_state_flag_ # value = <listHeader_state_flag_.listHeader_state_flag_item_down: 512>
    listHeader_state_flag_item_leave: _xcgui.listHeader_state_flag_ # value = <listHeader_state_flag_.listHeader_state_flag_item_leave: 128>
    listHeader_state_flag_item_stay: _xcgui.listHeader_state_flag_ # value = <listHeader_state_flag_.listHeader_state_flag_item_stay: 256>
    pass
class listItemTemp_type_():
    """
    Members:

      listItemTemp_type_tree

      listItemTemp_type_listBox

      listItemTemp_type_list_head

      listItemTemp_type_list_item

      listItemTemp_type_listView_group

      listItemTemp_type_listView_item

      listItemTemp_type_list

      listItemTemp_type_listView
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'listItemTemp_type_tree': <listItemTemp_type_.listItemTemp_type_tree: 1>, 'listItemTemp_type_listBox': <listItemTemp_type_.listItemTemp_type_listBox: 2>, 'listItemTemp_type_list_head': <listItemTemp_type_.listItemTemp_type_list_head: 4>, 'listItemTemp_type_list_item': <listItemTemp_type_.listItemTemp_type_list_item: 8>, 'listItemTemp_type_listView_group': <listItemTemp_type_.listItemTemp_type_listView_group: 16>, 'listItemTemp_type_listView_item': <listItemTemp_type_.listItemTemp_type_listView_item: 32>, 'listItemTemp_type_list': <listItemTemp_type_.listItemTemp_type_list: 12>, 'listItemTemp_type_listView': <listItemTemp_type_.listItemTemp_type_listView: 48>}
    listItemTemp_type_list: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_list: 12>
    listItemTemp_type_listBox: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listBox: 2>
    listItemTemp_type_listView: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listView: 48>
    listItemTemp_type_listView_group: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listView_group: 16>
    listItemTemp_type_listView_item: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listView_item: 32>
    listItemTemp_type_list_head: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_list_head: 4>
    listItemTemp_type_list_item: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_list_item: 8>
    listItemTemp_type_tree: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_tree: 1>
    pass
class listView_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> listView_item_: ...
    @property
    def hLayout(self) -> int:
        """
        :type: int
        """
    @hLayout.setter
    def hLayout(self, arg1: int) -> None:
        pass
    @property
    def hTemp(self) -> int:
        """
        :type: int
        """
    @hTemp.setter
    def hTemp(self, arg1: int) -> None:
        pass
    @property
    def iGroup(self) -> int:
        """
        :type: int
        """
    @iGroup.setter
    def iGroup(self, arg0: int) -> None:
        pass
    @property
    def iItem(self) -> int:
        """
        :type: int
        """
    @iItem.setter
    def iItem(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> list_item_state_:
        """
        :type: list_item_state_
        """
    @nState.setter
    def nState(self, arg0: list_item_state_) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class listView_item_id_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> listView_item_id_: ...
    @property
    def iGroup(self) -> int:
        """
        :type: int
        """
    @iGroup.setter
    def iGroup(self, arg0: int) -> None:
        pass
    @property
    def iItem(self) -> int:
        """
        :type: int
        """
    @iItem.setter
    def iItem(self, arg0: int) -> None:
        pass
    pass
class listView_state_flag_():
    """
    Members:

      listView_state_flag_item_leave

      listView_state_flag_item_stay

      listView_state_flag_item_select

      listView_state_flag_item_select_no

      listView_state_flag_group_leave

      listView_state_flag_group_stay

      listView_state_flag_group_select

      listView_state_flag_group_select_no
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'listView_state_flag_item_leave': <listView_state_flag_.listView_state_flag_item_leave: 128>, 'listView_state_flag_item_stay': <listView_state_flag_.listView_state_flag_item_stay: 256>, 'listView_state_flag_item_select': <listView_state_flag_.listView_state_flag_item_select: 512>, 'listView_state_flag_item_select_no': <listView_state_flag_.listView_state_flag_item_select_no: 1024>, 'listView_state_flag_group_leave': <listView_state_flag_.listView_state_flag_group_leave: 2048>, 'listView_state_flag_group_stay': <listView_state_flag_.listView_state_flag_group_stay: 4096>, 'listView_state_flag_group_select': <listView_state_flag_.listView_state_flag_group_select: 8192>, 'listView_state_flag_group_select_no': <listView_state_flag_.listView_state_flag_group_select_no: 16384>}
    listView_state_flag_group_leave: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_leave: 2048>
    listView_state_flag_group_select: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_select: 8192>
    listView_state_flag_group_select_no: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_select_no: 16384>
    listView_state_flag_group_stay: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_stay: 4096>
    listView_state_flag_item_leave: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_leave: 128>
    listView_state_flag_item_select: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_select: 512>
    listView_state_flag_item_select_no: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_select_no: 1024>
    listView_state_flag_item_stay: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_stay: 256>
    pass
class list_drawItemBk_flag_():
    """
    Members:

      list_drawItemBk_flag_nothing

      list_drawItemBk_flag_leave

      list_drawItemBk_flag_stay

      list_drawItemBk_flag_select

      list_drawItemBk_flag_group_leave

      list_drawItemBk_flag_group_stay

      list_drawItemBk_flag_line

      list_drawItemBk_flag_lineV
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'list_drawItemBk_flag_nothing': <list_drawItemBk_flag_.list_drawItemBk_flag_nothing: 0>, 'list_drawItemBk_flag_leave': <list_drawItemBk_flag_.list_drawItemBk_flag_leave: 1>, 'list_drawItemBk_flag_stay': <list_drawItemBk_flag_.list_drawItemBk_flag_stay: 2>, 'list_drawItemBk_flag_select': <list_drawItemBk_flag_.list_drawItemBk_flag_select: 4>, 'list_drawItemBk_flag_group_leave': <list_drawItemBk_flag_.list_drawItemBk_flag_group_leave: 8>, 'list_drawItemBk_flag_group_stay': <list_drawItemBk_flag_.list_drawItemBk_flag_group_stay: 16>, 'list_drawItemBk_flag_line': <list_drawItemBk_flag_.list_drawItemBk_flag_line: 32>, 'list_drawItemBk_flag_lineV': <list_drawItemBk_flag_.list_drawItemBk_flag_lineV: 64>}
    list_drawItemBk_flag_group_leave: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_leave: 8>
    list_drawItemBk_flag_group_stay: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_stay: 16>
    list_drawItemBk_flag_leave: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_leave: 1>
    list_drawItemBk_flag_line: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_line: 32>
    list_drawItemBk_flag_lineV: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_lineV: 64>
    list_drawItemBk_flag_nothing: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_nothing: 0>
    list_drawItemBk_flag_select: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_select: 4>
    list_drawItemBk_flag_stay: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_stay: 2>
    pass
class list_header_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> list_header_item_: ...
    @property
    def bSort(self) -> bool:
        """
        :type: bool
        """
    @bSort.setter
    def bSort(self, arg1: bool) -> None:
        pass
    @property
    def hLayout(self) -> int:
        """
        :type: int
        """
    @hLayout.setter
    def hLayout(self, arg1: int) -> None:
        pass
    @property
    def hTemp(self) -> int:
        """
        :type: int
        """
    @hTemp.setter
    def hTemp(self, arg1: int) -> None:
        pass
    @property
    def iColumnAdapter(self) -> int:
        """
        :type: int
        """
    @iColumnAdapter.setter
    def iColumnAdapter(self, arg0: int) -> None:
        pass
    @property
    def index(self) -> int:
        """
        :type: int
        """
    @index.setter
    def index(self, arg0: int) -> None:
        pass
    @property
    def nSortType(self) -> int:
        """
        :type: int
        """
    @nSortType.setter
    def nSortType(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> common_state3_:
        """
        :type: common_state3_
        """
    @nState.setter
    def nState(self, arg0: common_state3_) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class list_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> list_item_: ...
    @property
    def hLayout(self) -> int:
        """
        :type: int
        """
    @hLayout.setter
    def hLayout(self, arg1: int) -> None:
        pass
    @property
    def hTemp(self) -> int:
        """
        :type: int
        """
    @hTemp.setter
    def hTemp(self, arg1: int) -> None:
        pass
    @property
    def iSubItem(self) -> int:
        """
        :type: int
        """
    @iSubItem.setter
    def iSubItem(self, arg0: int) -> None:
        pass
    @property
    def index(self) -> int:
        """
        :type: int
        """
    @index.setter
    def index(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> list_item_state_:
        """
        :type: list_item_state_
        """
    @nState.setter
    def nState(self, arg0: list_item_state_) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class list_item_state_():
    """
    Members:

      list_item_state_leave

      list_item_state_stay

      list_item_state_select

      list_item_state_cache
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'list_item_state_leave': <list_item_state_.list_item_state_leave: 0>, 'list_item_state_stay': <list_item_state_.list_item_state_stay: 1>, 'list_item_state_select': <list_item_state_.list_item_state_select: 2>, 'list_item_state_cache': <list_item_state_.list_item_state_cache: 3>}
    list_item_state_cache: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_cache: 3>
    list_item_state_leave: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_leave: 0>
    list_item_state_select: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_select: 2>
    list_item_state_stay: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_stay: 1>
    pass
class list_state_flag_():
    """
    Members:

      list_state_flag_item_leave

      list_state_flag_item_stay

      list_state_flag_item_select

      list_state_flag_item_select_no
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'list_state_flag_item_leave': <list_state_flag_.list_state_flag_item_leave: 128>, 'list_state_flag_item_stay': <list_state_flag_.list_state_flag_item_stay: 256>, 'list_state_flag_item_select': <list_state_flag_.list_state_flag_item_select: 512>, 'list_state_flag_item_select_no': <list_state_flag_.list_state_flag_item_select_no: 1024>}
    list_state_flag_item_leave: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_leave: 128>
    list_state_flag_item_select: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_select: 512>
    list_state_flag_item_select_no: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_select_no: 1024>
    list_state_flag_item_stay: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_stay: 256>
    pass
class menu_drawBackground_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> menu_drawBackground_: ...
    @property
    def hMenu(self) -> int:
        """
        :type: int
        """
    @hMenu.setter
    def hMenu(self, arg1: int) -> None:
        pass
    @property
    def hWindow(self) -> int:
        """
        :type: int
        """
    @hWindow.setter
    def hWindow(self, arg1: int) -> None:
        pass
    @property
    def nParentID(self) -> int:
        """
        :type: int
        """
    @nParentID.setter
    def nParentID(self, arg0: int) -> None:
        pass
    pass
class menu_drawItem_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> menu_drawItem_: ...
    @property
    def hIcon(self) -> int:
        """
        :type: int
        """
    @hIcon.setter
    def hIcon(self, arg1: int) -> None:
        pass
    @property
    def hMenu(self) -> int:
        """
        :type: int
        """
    @hMenu.setter
    def hMenu(self, arg1: int) -> None:
        pass
    @property
    def hWindow(self) -> int:
        """
        :type: int
        """
    @hWindow.setter
    def hWindow(self, arg1: int) -> None:
        pass
    @property
    def nID(self) -> int:
        """
        :type: int
        """
    @nID.setter
    def nID(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> int:
        """
        :type: int
        """
    @nState.setter
    def nState(self, arg0: int) -> None:
        pass
    @property
    def pText(self) -> str:
        """
        :type: str
        """
    @pText.setter
    def pText(self, arg0: str) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class menu_item_flag_():
    """
    Members:

      menu_item_flag_normal

      menu_item_flag_select

      menu_item_flag_stay

      menu_item_flag_check

      menu_item_flag_popup

      menu_item_flag_separator

      menu_item_flag_disable
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'menu_item_flag_normal': <menu_item_flag_.menu_item_flag_normal: 0>, 'menu_item_flag_select': <menu_item_flag_.menu_item_flag_select: 1>, 'menu_item_flag_stay': <menu_item_flag_.menu_item_flag_select: 1>, 'menu_item_flag_check': <menu_item_flag_.menu_item_flag_check: 2>, 'menu_item_flag_popup': <menu_item_flag_.menu_item_flag_popup: 4>, 'menu_item_flag_separator': <menu_item_flag_.menu_item_flag_separator: 8>, 'menu_item_flag_disable': <menu_item_flag_.menu_item_flag_disable: 16>}
    menu_item_flag_check: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_check: 2>
    menu_item_flag_disable: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_disable: 16>
    menu_item_flag_normal: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_normal: 0>
    menu_item_flag_popup: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_popup: 4>
    menu_item_flag_select: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_select: 1>
    menu_item_flag_separator: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_separator: 8>
    menu_item_flag_stay: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_select: 1>
    pass
class menu_popupWnd_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> menu_popupWnd_: ...
    @property
    def hWindow(self) -> int:
        """
        :type: int
        """
    @hWindow.setter
    def hWindow(self, arg1: int) -> None:
        pass
    @property
    def nParentID(self) -> int:
        """
        :type: int
        """
    @nParentID.setter
    def nParentID(self, arg0: int) -> None:
        pass
    pass
class menu_popup_position_():
    """
    Members:

      menu_popup_position_left_top

      menu_popup_position_left_bottom

      menu_popup_position_right_top

      menu_popup_position_right_bottom

      menu_popup_position_center_left

      menu_popup_position_center_top

      menu_popup_position_center_right

      menu_popup_position_center_bottom
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'menu_popup_position_left_top': <menu_popup_position_.menu_popup_position_left_top: 0>, 'menu_popup_position_left_bottom': <menu_popup_position_.menu_popup_position_left_bottom: 1>, 'menu_popup_position_right_top': <menu_popup_position_.menu_popup_position_right_top: 2>, 'menu_popup_position_right_bottom': <menu_popup_position_.menu_popup_position_right_bottom: 3>, 'menu_popup_position_center_left': <menu_popup_position_.menu_popup_position_center_left: 4>, 'menu_popup_position_center_top': <menu_popup_position_.menu_popup_position_center_top: 5>, 'menu_popup_position_center_right': <menu_popup_position_.menu_popup_position_center_right: 6>, 'menu_popup_position_center_bottom': <menu_popup_position_.menu_popup_position_center_bottom: 7>}
    menu_popup_position_center_bottom: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_bottom: 7>
    menu_popup_position_center_left: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_left: 4>
    menu_popup_position_center_right: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_right: 6>
    menu_popup_position_center_top: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_top: 5>
    menu_popup_position_left_bottom: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_left_bottom: 1>
    menu_popup_position_left_top: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_left_top: 0>
    menu_popup_position_right_bottom: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_right_bottom: 3>
    menu_popup_position_right_top: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_right_top: 2>
    pass
class messageBox_flag_():
    """
    Members:

      messageBox_flag_other

      messageBox_flag_ok

      messageBox_flag_cancel

      messageBox_flag_icon_appicon

      messageBox_flag_icon_info

      messageBox_flag_icon_qustion

      messageBox_flag_icon_error

      messageBox_flag_icon_warning

      messageBox_flag_icon_shield
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'messageBox_flag_other': <messageBox_flag_.messageBox_flag_other: 0>, 'messageBox_flag_ok': <messageBox_flag_.messageBox_flag_ok: 1>, 'messageBox_flag_cancel': <messageBox_flag_.messageBox_flag_cancel: 2>, 'messageBox_flag_icon_appicon': <messageBox_flag_.messageBox_flag_icon_appicon: 4096>, 'messageBox_flag_icon_info': <messageBox_flag_.messageBox_flag_icon_info: 8192>, 'messageBox_flag_icon_qustion': <messageBox_flag_.messageBox_flag_icon_qustion: 16384>, 'messageBox_flag_icon_error': <messageBox_flag_.messageBox_flag_icon_error: 32768>, 'messageBox_flag_icon_warning': <messageBox_flag_.messageBox_flag_icon_warning: 65536>, 'messageBox_flag_icon_shield': <messageBox_flag_.messageBox_flag_icon_shield: 131072>}
    messageBox_flag_cancel: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_cancel: 2>
    messageBox_flag_icon_appicon: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_appicon: 4096>
    messageBox_flag_icon_error: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_error: 32768>
    messageBox_flag_icon_info: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_info: 8192>
    messageBox_flag_icon_qustion: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_qustion: 16384>
    messageBox_flag_icon_shield: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_shield: 131072>
    messageBox_flag_icon_warning: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_warning: 65536>
    messageBox_flag_ok: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_ok: 1>
    messageBox_flag_other: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_other: 0>
    pass
class monthCal_button_type_():
    """
    Members:

      monthCal_button_type_today

      monthCal_button_type_last_year

      monthCal_button_type_next_year

      monthCal_button_type_last_month

      monthCal_button_type_next_month
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'monthCal_button_type_today': <monthCal_button_type_.monthCal_button_type_today: 0>, 'monthCal_button_type_last_year': <monthCal_button_type_.monthCal_button_type_last_year: 1>, 'monthCal_button_type_next_year': <monthCal_button_type_.monthCal_button_type_next_year: 2>, 'monthCal_button_type_last_month': <monthCal_button_type_.monthCal_button_type_last_month: 3>, 'monthCal_button_type_next_month': <monthCal_button_type_.monthCal_button_type_next_month: 4>}
    monthCal_button_type_last_month: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_last_month: 3>
    monthCal_button_type_last_year: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_last_year: 1>
    monthCal_button_type_next_month: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_next_month: 4>
    monthCal_button_type_next_year: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_next_year: 2>
    monthCal_button_type_today: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_today: 0>
    pass
class monthCal_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> monthCal_item_: ...
    @property
    def nDay(self) -> int:
        """
        :type: int
        """
    @nDay.setter
    def nDay(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> int:
        """
        :type: int
        """
    @nState.setter
    def nState(self, arg0: int) -> None:
        pass
    @property
    def nType(self) -> int:
        """
        :type: int
        """
    @nType.setter
    def nType(self, arg0: int) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class monthCal_state_flag_():
    """
    Members:

      monthCal_state_flag_leave

      monthCal_state_flag_item_leave

      monthCal_state_flag_item_stay

      monthCal_state_flag_item_down

      monthCal_state_flag_item_select

      monthCal_state_flag_item_select_no

      monthCal_state_flag_item_today

      monthCal_state_flag_item_last_month

      monthCal_state_flag_item_cur_month

      monthCal_state_flag_item_next_month
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'monthCal_state_flag_leave': <monthCal_state_flag_.monthCal_state_flag_leave: 16>, 'monthCal_state_flag_item_leave': <monthCal_state_flag_.monthCal_state_flag_item_leave: 128>, 'monthCal_state_flag_item_stay': <monthCal_state_flag_.monthCal_state_flag_item_stay: 256>, 'monthCal_state_flag_item_down': <monthCal_state_flag_.monthCal_state_flag_item_down: 512>, 'monthCal_state_flag_item_select': <monthCal_state_flag_.monthCal_state_flag_item_select: 1024>, 'monthCal_state_flag_item_select_no': <monthCal_state_flag_.monthCal_state_flag_item_select_no: 2048>, 'monthCal_state_flag_item_today': <monthCal_state_flag_.monthCal_state_flag_item_today: 4096>, 'monthCal_state_flag_item_last_month': <monthCal_state_flag_.monthCal_state_flag_item_last_month: 8192>, 'monthCal_state_flag_item_cur_month': <monthCal_state_flag_.monthCal_state_flag_item_cur_month: 16384>, 'monthCal_state_flag_item_next_month': <monthCal_state_flag_.monthCal_state_flag_item_next_month: 32768>}
    monthCal_state_flag_item_cur_month: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_cur_month: 16384>
    monthCal_state_flag_item_down: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_down: 512>
    monthCal_state_flag_item_last_month: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_last_month: 8192>
    monthCal_state_flag_item_leave: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_leave: 128>
    monthCal_state_flag_item_next_month: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_next_month: 32768>
    monthCal_state_flag_item_select: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_select: 1024>
    monthCal_state_flag_item_select_no: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_select_no: 2048>
    monthCal_state_flag_item_stay: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_stay: 256>
    monthCal_state_flag_item_today: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_today: 4096>
    monthCal_state_flag_leave: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_leave: 16>
    pass
class notifyMsg_skin_():
    """
    Members:

      notifyMsg_skin_no

      notifyMsg_skin_success

      notifyMsg_skin_warning

      notifyMsg_skin_message

      notifyMsg_skin_error
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'notifyMsg_skin_no': <notifyMsg_skin_.notifyMsg_skin_no: 0>, 'notifyMsg_skin_success': <notifyMsg_skin_.notifyMsg_skin_success: 1>, 'notifyMsg_skin_warning': <notifyMsg_skin_.notifyMsg_skin_warning: 2>, 'notifyMsg_skin_message': <notifyMsg_skin_.notifyMsg_skin_message: 3>, 'notifyMsg_skin_error': <notifyMsg_skin_.notifyMsg_skin_error: 4>}
    notifyMsg_skin_error: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_error: 4>
    notifyMsg_skin_message: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_message: 3>
    notifyMsg_skin_no: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_no: 0>
    notifyMsg_skin_success: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_success: 1>
    notifyMsg_skin_warning: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_warning: 2>
    pass
class pane_align_():
    """
    Members:

      pane_align_error

      pane_align_left

      pane_align_top

      pane_align_right

      pane_align_bottom

      pane_align_center
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'pane_align_error': <pane_align_.pane_align_error: -1>, 'pane_align_left': <pane_align_.pane_align_left: 0>, 'pane_align_top': <pane_align_.pane_align_top: 1>, 'pane_align_right': <pane_align_.pane_align_right: 2>, 'pane_align_bottom': <pane_align_.pane_align_bottom: 3>, 'pane_align_center': <pane_align_.pane_align_center: 4>}
    pane_align_bottom: _xcgui.pane_align_ # value = <pane_align_.pane_align_bottom: 3>
    pane_align_center: _xcgui.pane_align_ # value = <pane_align_.pane_align_center: 4>
    pane_align_error: _xcgui.pane_align_ # value = <pane_align_.pane_align_error: -1>
    pane_align_left: _xcgui.pane_align_ # value = <pane_align_.pane_align_left: 0>
    pane_align_right: _xcgui.pane_align_ # value = <pane_align_.pane_align_right: 2>
    pane_align_top: _xcgui.pane_align_ # value = <pane_align_.pane_align_top: 1>
    pass
class pane_state_():
    """
    Members:

      pane_state_error

      pane_state_any

      pane_state_lock

      pane_state_dock

      pane_state_float
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'pane_state_error': <pane_state_.pane_state_error: -1>, 'pane_state_any': <pane_state_.pane_state_any: 0>, 'pane_state_lock': <pane_state_.pane_state_lock: 1>, 'pane_state_dock': <pane_state_.pane_state_dock: 2>, 'pane_state_float': <pane_state_.pane_state_float: 3>}
    pane_state_any: _xcgui.pane_state_ # value = <pane_state_.pane_state_any: 0>
    pane_state_dock: _xcgui.pane_state_ # value = <pane_state_.pane_state_dock: 2>
    pane_state_error: _xcgui.pane_state_ # value = <pane_state_.pane_state_error: -1>
    pane_state_float: _xcgui.pane_state_ # value = <pane_state_.pane_state_float: 3>
    pane_state_lock: _xcgui.pane_state_ # value = <pane_state_.pane_state_lock: 1>
    pass
class pane_state_flag_():
    """
    Members:

      pane_state_flag_leave

      pane_state_flag_stay

      pane_state_flag_caption

      pane_state_flag_body
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'pane_state_flag_leave': <pane_state_flag_.pane_state_flag_leave: 16>, 'pane_state_flag_stay': <pane_state_flag_.pane_state_flag_stay: 32>, 'pane_state_flag_caption': <pane_state_flag_.pane_state_flag_caption: 128>, 'pane_state_flag_body': <pane_state_flag_.pane_state_flag_body: 256>}
    pane_state_flag_body: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_body: 256>
    pane_state_flag_caption: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_caption: 128>
    pane_state_flag_leave: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_leave: 16>
    pane_state_flag_stay: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_stay: 32>
    pass
class position_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> position_: ...
    @property
    def iColumn(self) -> int:
        """
        :type: int
        """
    @iColumn.setter
    def iColumn(self, arg0: int) -> None:
        pass
    @property
    def iRow(self) -> int:
        """
        :type: int
        """
    @iRow.setter
    def iRow(self, arg0: int) -> None:
        pass
    pass
class position_flag_():
    """
    Members:

      position_flag_left

      position_flag_top

      position_flag_right

      position_flag_bottom

      position_flag_leftTop

      position_flag_leftBottom

      position_flag_rightTop

      position_flag_rightBottom

      position_flag_center
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'position_flag_left': <position_flag_.position_flag_left: 0>, 'position_flag_top': <position_flag_.position_flag_top: 1>, 'position_flag_right': <position_flag_.position_flag_right: 2>, 'position_flag_bottom': <position_flag_.position_flag_bottom: 3>, 'position_flag_leftTop': <position_flag_.position_flag_leftTop: 4>, 'position_flag_leftBottom': <position_flag_.position_flag_leftBottom: 5>, 'position_flag_rightTop': <position_flag_.position_flag_rightTop: 6>, 'position_flag_rightBottom': <position_flag_.position_flag_rightBottom: 7>, 'position_flag_center': <position_flag_.position_flag_center: 8>}
    position_flag_bottom: _xcgui.position_flag_ # value = <position_flag_.position_flag_bottom: 3>
    position_flag_center: _xcgui.position_flag_ # value = <position_flag_.position_flag_center: 8>
    position_flag_left: _xcgui.position_flag_ # value = <position_flag_.position_flag_left: 0>
    position_flag_leftBottom: _xcgui.position_flag_ # value = <position_flag_.position_flag_leftBottom: 5>
    position_flag_leftTop: _xcgui.position_flag_ # value = <position_flag_.position_flag_leftTop: 4>
    position_flag_right: _xcgui.position_flag_ # value = <position_flag_.position_flag_right: 2>
    position_flag_rightBottom: _xcgui.position_flag_ # value = <position_flag_.position_flag_rightBottom: 7>
    position_flag_rightTop: _xcgui.position_flag_ # value = <position_flag_.position_flag_rightTop: 6>
    position_flag_top: _xcgui.position_flag_ # value = <position_flag_.position_flag_top: 1>
    pass
class propertyGrid_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> propertyGrid_item_: ...
    @property
    def bExpand(self) -> bool:
        """
        :type: bool
        """
    @bExpand.setter
    def bExpand(self, arg1: bool) -> None:
        pass
    @property
    def bShow(self) -> bool:
        """
        :type: bool
        """
    @bShow.setter
    def bShow(self, arg1: bool) -> None:
        pass
    @property
    def nDepth(self) -> int:
        """
        :type: int
        """
    @nDepth.setter
    def nDepth(self, arg0: int) -> None:
        pass
    @property
    def nID(self) -> int:
        """
        :type: int
        """
    @nID.setter
    def nID(self, arg0: int) -> None:
        pass
    @property
    def nNameColWidth(self) -> int:
        """
        :type: int
        """
    @nNameColWidth.setter
    def nNameColWidth(self, arg0: int) -> None:
        pass
    @property
    def nType(self) -> propertyGrid_item_type_:
        """
        :type: propertyGrid_item_type_
        """
    @nType.setter
    def nType(self, arg0: propertyGrid_item_type_) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    @property
    def rcExpand(self) -> RECT:
        """
        :type: RECT
        """
    @rcExpand.setter
    def rcExpand(self, arg0: RECT) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class propertyGrid_item_type_():
    """
    Members:

      propertyGrid_item_type_text

      propertyGrid_item_type_edit

      propertyGrid_item_type_edit_color

      propertyGrid_item_type_edit_file

      propertyGrid_item_type_edit_set

      propertyGrid_item_type_comboBox

      propertyGrid_item_type_group

      propertyGrid_item_type_panel
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'propertyGrid_item_type_text': <propertyGrid_item_type_.propertyGrid_item_type_text: 0>, 'propertyGrid_item_type_edit': <propertyGrid_item_type_.propertyGrid_item_type_edit: 1>, 'propertyGrid_item_type_edit_color': <propertyGrid_item_type_.propertyGrid_item_type_edit_color: 2>, 'propertyGrid_item_type_edit_file': <propertyGrid_item_type_.propertyGrid_item_type_edit_file: 3>, 'propertyGrid_item_type_edit_set': <propertyGrid_item_type_.propertyGrid_item_type_edit_set: 4>, 'propertyGrid_item_type_comboBox': <propertyGrid_item_type_.propertyGrid_item_type_comboBox: 5>, 'propertyGrid_item_type_group': <propertyGrid_item_type_.propertyGrid_item_type_group: 6>, 'propertyGrid_item_type_panel': <propertyGrid_item_type_.propertyGrid_item_type_panel: 7>}
    propertyGrid_item_type_comboBox: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_comboBox: 5>
    propertyGrid_item_type_edit: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit: 1>
    propertyGrid_item_type_edit_color: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_color: 2>
    propertyGrid_item_type_edit_file: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_file: 3>
    propertyGrid_item_type_edit_set: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_set: 4>
    propertyGrid_item_type_group: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_group: 6>
    propertyGrid_item_type_panel: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_panel: 7>
    propertyGrid_item_type_text: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_text: 0>
    pass
class propertyGrid_state_flag_():
    """
    Members:

      propertyGrid_state_flag_item_leave

      propertyGrid_state_flag_item_stay

      propertyGrid_state_flag_item_select

      propertyGrid_state_flag_item_select_no

      propertyGrid_state_flag_group_leave

      propertyGrid_state_flag_group_expand

      propertyGrid_state_flag_group_expand_no
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'propertyGrid_state_flag_item_leave': <propertyGrid_state_flag_.propertyGrid_state_flag_item_leave: 128>, 'propertyGrid_state_flag_item_stay': <propertyGrid_state_flag_.propertyGrid_state_flag_item_stay: 256>, 'propertyGrid_state_flag_item_select': <propertyGrid_state_flag_.propertyGrid_state_flag_item_select: 512>, 'propertyGrid_state_flag_item_select_no': <propertyGrid_state_flag_.propertyGrid_state_flag_item_select_no: 1024>, 'propertyGrid_state_flag_group_leave': <propertyGrid_state_flag_.propertyGrid_state_flag_group_leave: 2048>, 'propertyGrid_state_flag_group_expand': <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand: 4096>, 'propertyGrid_state_flag_group_expand_no': <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand_no: 8192>}
    propertyGrid_state_flag_group_expand: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand: 4096>
    propertyGrid_state_flag_group_expand_no: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand_no: 8192>
    propertyGrid_state_flag_group_leave: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_leave: 2048>
    propertyGrid_state_flag_item_leave: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_leave: 128>
    propertyGrid_state_flag_item_select: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select: 512>
    propertyGrid_state_flag_item_select_no: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select_no: 1024>
    propertyGrid_state_flag_item_stay: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_stay: 256>
    pass
class table_flag_():
    """
    Members:

      table_flag_full

      table_flag_none
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'table_flag_full': <table_flag_.table_flag_full: 0>, 'table_flag_none': <table_flag_.table_flag_none: 1>}
    table_flag_full: _xcgui.table_flag_ # value = <table_flag_.table_flag_full: 0>
    table_flag_none: _xcgui.table_flag_ # value = <table_flag_.table_flag_none: 1>
    pass
class table_line_flag_():
    """
    Members:

      table_line_flag_left

      table_line_flag_top

      table_line_flag_right

      table_line_flag_bottom

      table_line_flag_left2

      table_line_flag_top2

      table_line_flag_right2

      table_line_flag_bottom2
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'table_line_flag_left': <table_line_flag_.table_line_flag_left: 1>, 'table_line_flag_top': <table_line_flag_.table_line_flag_top: 2>, 'table_line_flag_right': <table_line_flag_.table_line_flag_right: 4>, 'table_line_flag_bottom': <table_line_flag_.table_line_flag_bottom: 8>, 'table_line_flag_left2': <table_line_flag_.table_line_flag_left2: 16>, 'table_line_flag_top2': <table_line_flag_.table_line_flag_top2: 32>, 'table_line_flag_right2': <table_line_flag_.table_line_flag_right2: 64>, 'table_line_flag_bottom2': <table_line_flag_.table_line_flag_bottom2: 128>}
    table_line_flag_bottom: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_bottom: 8>
    table_line_flag_bottom2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_bottom2: 128>
    table_line_flag_left: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_left: 1>
    table_line_flag_left2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_left2: 16>
    table_line_flag_right: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_right: 4>
    table_line_flag_right2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_right2: 64>
    table_line_flag_top: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_top: 2>
    table_line_flag_top2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_top2: 32>
    pass
class textFormatFlag_():
    """
    Members:

      textAlignFlag_left

      textAlignFlag_top

      textAlignFlag_left_top

      textAlignFlag_center

      textAlignFlag_right

      textAlignFlag_vcenter

      textAlignFlag_bottom

      textFormatFlag_DirectionRightToLeft

      textFormatFlag_NoWrap

      textFormatFlag_DirectionVertical

      textFormatFlag_NoFitBlackBox

      textFormatFlag_DisplayFormatControl

      textFormatFlag_NoFontFallback

      textFormatFlag_MeasureTrailingSpaces

      textFormatFlag_LineLimit

      textFormatFlag_NoClip

      textTrimming_None

      textTrimming_Character

      textTrimming_Word

      textTrimming_EllipsisCharacter

      textTrimming_EllipsisWord

      textTrimming_EllipsisPath
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'textAlignFlag_left': <textFormatFlag_.textAlignFlag_left: 0>, 'textAlignFlag_top': <textFormatFlag_.textAlignFlag_left: 0>, 'textAlignFlag_left_top': <textFormatFlag_.textAlignFlag_left_top: 16384>, 'textAlignFlag_center': <textFormatFlag_.textAlignFlag_center: 1>, 'textAlignFlag_right': <textFormatFlag_.textAlignFlag_right: 2>, 'textAlignFlag_vcenter': <textFormatFlag_.textAlignFlag_vcenter: 4>, 'textAlignFlag_bottom': <textFormatFlag_.textAlignFlag_bottom: 8>, 'textFormatFlag_DirectionRightToLeft': <textFormatFlag_.textFormatFlag_DirectionRightToLeft: 16>, 'textFormatFlag_NoWrap': <textFormatFlag_.textFormatFlag_NoWrap: 32>, 'textFormatFlag_DirectionVertical': <textFormatFlag_.textFormatFlag_DirectionVertical: 64>, 'textFormatFlag_NoFitBlackBox': <textFormatFlag_.textFormatFlag_NoFitBlackBox: 128>, 'textFormatFlag_DisplayFormatControl': <textFormatFlag_.textFormatFlag_DisplayFormatControl: 256>, 'textFormatFlag_NoFontFallback': <textFormatFlag_.textFormatFlag_NoFontFallback: 512>, 'textFormatFlag_MeasureTrailingSpaces': <textFormatFlag_.textFormatFlag_MeasureTrailingSpaces: 1024>, 'textFormatFlag_LineLimit': <textFormatFlag_.textFormatFlag_LineLimit: 2048>, 'textFormatFlag_NoClip': <textFormatFlag_.textFormatFlag_NoClip: 4096>, 'textTrimming_None': <textFormatFlag_.textAlignFlag_left: 0>, 'textTrimming_Character': <textFormatFlag_.textTrimming_Character: 262144>, 'textTrimming_Word': <textFormatFlag_.textTrimming_Word: 524288>, 'textTrimming_EllipsisCharacter': <textFormatFlag_.textTrimming_EllipsisCharacter: 32768>, 'textTrimming_EllipsisWord': <textFormatFlag_.textTrimming_EllipsisWord: 65536>, 'textTrimming_EllipsisPath': <textFormatFlag_.textTrimming_EllipsisPath: 131072>}
    textAlignFlag_bottom: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_bottom: 8>
    textAlignFlag_center: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_center: 1>
    textAlignFlag_left: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left: 0>
    textAlignFlag_left_top: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left_top: 16384>
    textAlignFlag_right: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_right: 2>
    textAlignFlag_top: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left: 0>
    textAlignFlag_vcenter: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_vcenter: 4>
    textFormatFlag_DirectionRightToLeft: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_DirectionRightToLeft: 16>
    textFormatFlag_DirectionVertical: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_DirectionVertical: 64>
    textFormatFlag_DisplayFormatControl: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_DisplayFormatControl: 256>
    textFormatFlag_LineLimit: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_LineLimit: 2048>
    textFormatFlag_MeasureTrailingSpaces: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_MeasureTrailingSpaces: 1024>
    textFormatFlag_NoClip: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoClip: 4096>
    textFormatFlag_NoFitBlackBox: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoFitBlackBox: 128>
    textFormatFlag_NoFontFallback: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoFontFallback: 512>
    textFormatFlag_NoWrap: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoWrap: 32>
    textTrimming_Character: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_Character: 262144>
    textTrimming_EllipsisCharacter: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_EllipsisCharacter: 32768>
    textTrimming_EllipsisPath: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_EllipsisPath: 131072>
    textTrimming_EllipsisWord: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_EllipsisWord: 65536>
    textTrimming_None: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left: 0>
    textTrimming_Word: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_Word: 524288>
    pass
class tree_drag_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> tree_drag_item_: ...
    @property
    def nDestItem(self) -> int:
        """
        :type: int
        """
    @nDestItem.setter
    def nDestItem(self, arg0: int) -> None:
        pass
    @property
    def nDragItem(self) -> int:
        """
        :type: int
        """
    @nDragItem.setter
    def nDragItem(self, arg0: int) -> None:
        pass
    @property
    def nType(self) -> int:
        """
        :type: int
        """
    @nType.setter
    def nType(self, arg0: int) -> None:
        pass
    pass
class tree_item_():
    def __init__(self) -> None: ...
    @staticmethod
    def cast(pointer: int) -> tree_item_: ...
    @property
    def bExpand(self) -> bool:
        """
        :type: bool
        """
    @bExpand.setter
    def bExpand(self, arg1: bool) -> None:
        pass
    @property
    def hLayout(self) -> int:
        """
        :type: int
        """
    @hLayout.setter
    def hLayout(self, arg1: int) -> None:
        pass
    @property
    def hTemp(self) -> int:
        """
        :type: int
        """
    @hTemp.setter
    def hTemp(self, arg1: int) -> None:
        pass
    @property
    def nDepth(self) -> int:
        """
        :type: int
        """
    @nDepth.setter
    def nDepth(self, arg0: int) -> None:
        pass
    @property
    def nHeight(self) -> int:
        """
        :type: int
        """
    @nHeight.setter
    def nHeight(self, arg0: int) -> None:
        pass
    @property
    def nID(self) -> int:
        """
        :type: int
        """
    @nID.setter
    def nID(self, arg0: int) -> None:
        pass
    @property
    def nSelHeight(self) -> int:
        """
        :type: int
        """
    @nSelHeight.setter
    def nSelHeight(self, arg0: int) -> None:
        pass
    @property
    def nState(self) -> tree_item_state_:
        """
        :type: tree_item_state_
        """
    @nState.setter
    def nState(self, arg0: tree_item_state_) -> None:
        pass
    @property
    def nUserData(self) -> int:
        """
        :type: int
        """
    @nUserData.setter
    def nUserData(self, arg0: int) -> None:
        pass
    @property
    def rcItem(self) -> RECT:
        """
        :type: RECT
        """
    @rcItem.setter
    def rcItem(self, arg0: RECT) -> None:
        pass
    pass
class tree_item_state_():
    """
    Members:

      tree_item_state_leave

      tree_item_state_stay

      tree_item_state_select
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'tree_item_state_leave': <tree_item_state_.tree_item_state_leave: 0>, 'tree_item_state_stay': <tree_item_state_.tree_item_state_stay: 1>, 'tree_item_state_select': <tree_item_state_.tree_item_state_select: 2>}
    tree_item_state_leave: _xcgui.tree_item_state_ # value = <tree_item_state_.tree_item_state_leave: 0>
    tree_item_state_select: _xcgui.tree_item_state_ # value = <tree_item_state_.tree_item_state_select: 2>
    tree_item_state_stay: _xcgui.tree_item_state_ # value = <tree_item_state_.tree_item_state_stay: 1>
    pass
class tree_state_flag_():
    """
    Members:

      tree_state_flag_item_leave

      tree_state_flag_item_stay

      tree_state_flag_item_select

      tree_state_flag_item_select_no

      tree_state_flag_group

      tree_state_flag_group_no
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'tree_state_flag_item_leave': <tree_state_flag_.tree_state_flag_item_leave: 128>, 'tree_state_flag_item_stay': <tree_state_flag_.tree_state_flag_item_stay: 256>, 'tree_state_flag_item_select': <tree_state_flag_.tree_state_flag_item_select: 512>, 'tree_state_flag_item_select_no': <tree_state_flag_.tree_state_flag_item_select_no: 1024>, 'tree_state_flag_group': <tree_state_flag_.tree_state_flag_group: 2048>, 'tree_state_flag_group_no': <tree_state_flag_.tree_state_flag_group_no: 4096>}
    tree_state_flag_group: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_group: 2048>
    tree_state_flag_group_no: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_group_no: 4096>
    tree_state_flag_item_leave: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_leave: 128>
    tree_state_flag_item_select: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_select: 512>
    tree_state_flag_item_select_no: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_select_no: 1024>
    tree_state_flag_item_stay: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_stay: 256>
    pass
class window_position_():
    """
    Members:

      window_position_error

      window_position_top

      window_position_bottom

      window_position_left

      window_position_right

      window_position_body

      window_position_window
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'window_position_error': <window_position_.window_position_error: -1>, 'window_position_top': <window_position_.window_position_top: 0>, 'window_position_bottom': <window_position_.window_position_bottom: 1>, 'window_position_left': <window_position_.window_position_left: 2>, 'window_position_right': <window_position_.window_position_right: 3>, 'window_position_body': <window_position_.window_position_body: 4>, 'window_position_window': <window_position_.window_position_window: 5>}
    window_position_body: _xcgui.window_position_ # value = <window_position_.window_position_body: 4>
    window_position_bottom: _xcgui.window_position_ # value = <window_position_.window_position_bottom: 1>
    window_position_error: _xcgui.window_position_ # value = <window_position_.window_position_error: -1>
    window_position_left: _xcgui.window_position_ # value = <window_position_.window_position_left: 2>
    window_position_right: _xcgui.window_position_ # value = <window_position_.window_position_right: 3>
    window_position_top: _xcgui.window_position_ # value = <window_position_.window_position_top: 0>
    window_position_window: _xcgui.window_position_ # value = <window_position_.window_position_window: 5>
    pass
class window_state_flag_():
    """
    Members:

      window_state_flag_nothing

      window_state_flag_leave

      window_state_flag_body_leave

      window_state_flag_top_leave

      window_state_flag_bottom_leave

      window_state_flag_left_leave

      window_state_flag_right_leave

      window_state_flag_layout_body
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'window_state_flag_nothing': <window_state_flag_.window_state_flag_nothing: 0>, 'window_state_flag_leave': <window_state_flag_.window_state_flag_leave: 1>, 'window_state_flag_body_leave': <window_state_flag_.window_state_flag_body_leave: 2>, 'window_state_flag_top_leave': <window_state_flag_.window_state_flag_top_leave: 4>, 'window_state_flag_bottom_leave': <window_state_flag_.window_state_flag_bottom_leave: 8>, 'window_state_flag_left_leave': <window_state_flag_.window_state_flag_left_leave: 16>, 'window_state_flag_right_leave': <window_state_flag_.window_state_flag_right_leave: 32>, 'window_state_flag_layout_body': <window_state_flag_.window_state_flag_layout_body: 536870912>}
    window_state_flag_body_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_body_leave: 2>
    window_state_flag_bottom_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_bottom_leave: 8>
    window_state_flag_layout_body: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_layout_body: 536870912>
    window_state_flag_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_leave: 1>
    window_state_flag_left_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_left_leave: 16>
    window_state_flag_nothing: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_nothing: 0>
    window_state_flag_right_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_right_leave: 32>
    window_state_flag_top_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_top_leave: 4>
    pass
class window_style_():
    """
    Members:

      window_style_nothing

      window_style_caption

      window_style_border

      window_style_center

      window_style_drag_border

      window_style_drag_window

      window_style_allow_maxWindow

      window_style_icon

      window_style_title

      window_style_btn_min

      window_style_btn_max

      window_style_btn_close

      window_style_default

      window_style_simple

      window_style_pop

      window_style_modal

      window_style_modal_simple
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'window_style_nothing': <window_style_.window_style_nothing: 0>, 'window_style_caption': <window_style_.window_style_caption: 1>, 'window_style_border': <window_style_.window_style_border: 2>, 'window_style_center': <window_style_.window_style_center: 4>, 'window_style_drag_border': <window_style_.window_style_drag_border: 8>, 'window_style_drag_window': <window_style_.window_style_drag_window: 16>, 'window_style_allow_maxWindow': <window_style_.window_style_allow_maxWindow: 32>, 'window_style_icon': <window_style_.window_style_icon: 64>, 'window_style_title': <window_style_.window_style_title: 128>, 'window_style_btn_min': <window_style_.window_style_btn_min: 256>, 'window_style_btn_max': <window_style_.window_style_btn_max: 512>, 'window_style_btn_close': <window_style_.window_style_btn_close: 1024>, 'window_style_default': <window_style_.window_style_default: 2031>, 'window_style_simple': <window_style_.window_style_simple: 47>, 'window_style_pop': <window_style_.window_style_pop: 1263>, 'window_style_modal': <window_style_.window_style_modal: 1223>, 'window_style_modal_simple': <window_style_.window_style_modal_simple: 7>}
    window_style_allow_maxWindow: _xcgui.window_style_ # value = <window_style_.window_style_allow_maxWindow: 32>
    window_style_border: _xcgui.window_style_ # value = <window_style_.window_style_border: 2>
    window_style_btn_close: _xcgui.window_style_ # value = <window_style_.window_style_btn_close: 1024>
    window_style_btn_max: _xcgui.window_style_ # value = <window_style_.window_style_btn_max: 512>
    window_style_btn_min: _xcgui.window_style_ # value = <window_style_.window_style_btn_min: 256>
    window_style_caption: _xcgui.window_style_ # value = <window_style_.window_style_caption: 1>
    window_style_center: _xcgui.window_style_ # value = <window_style_.window_style_center: 4>
    window_style_default: _xcgui.window_style_ # value = <window_style_.window_style_default: 2031>
    window_style_drag_border: _xcgui.window_style_ # value = <window_style_.window_style_drag_border: 8>
    window_style_drag_window: _xcgui.window_style_ # value = <window_style_.window_style_drag_window: 16>
    window_style_icon: _xcgui.window_style_ # value = <window_style_.window_style_icon: 64>
    window_style_modal: _xcgui.window_style_ # value = <window_style_.window_style_modal: 1223>
    window_style_modal_simple: _xcgui.window_style_ # value = <window_style_.window_style_modal_simple: 7>
    window_style_nothing: _xcgui.window_style_ # value = <window_style_.window_style_nothing: 0>
    window_style_pop: _xcgui.window_style_ # value = <window_style_.window_style_pop: 1263>
    window_style_simple: _xcgui.window_style_ # value = <window_style_.window_style_simple: 47>
    window_style_title: _xcgui.window_style_ # value = <window_style_.window_style_title: 128>
    pass
class window_transparent_():
    """
    Members:

      window_transparent_false

      window_transparent_shaped

      window_transparent_shadow

      window_transparent_simple

      window_transparent_win7
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'window_transparent_false': <window_transparent_.window_transparent_false: 0>, 'window_transparent_shaped': <window_transparent_.window_transparent_shaped: 1>, 'window_transparent_shadow': <window_transparent_.window_transparent_shadow: 2>, 'window_transparent_simple': <window_transparent_.window_transparent_simple: 3>, 'window_transparent_win7': <window_transparent_.window_transparent_win7: 4>}
    window_transparent_false: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_false: 0>
    window_transparent_shadow: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_shadow: 2>
    window_transparent_shaped: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_shaped: 1>
    window_transparent_simple: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_simple: 3>
    window_transparent_win7: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_win7: 4>
    pass
class zorder_():
    """
    Members:

      zorder_top

      zorder_bottom

      zorder_before

      zorder_after
    """
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    __members__: dict # value = {'zorder_top': <zorder_.zorder_top: 0>, 'zorder_bottom': <zorder_.zorder_bottom: 1>, 'zorder_before': <zorder_.zorder_before: 2>, 'zorder_after': <zorder_.zorder_after: 3>}
    zorder_after: _xcgui.zorder_ # value = <zorder_.zorder_after: 3>
    zorder_before: _xcgui.zorder_ # value = <zorder_.zorder_before: 2>
    zorder_bottom: _xcgui.zorder_ # value = <zorder_.zorder_bottom: 1>
    zorder_top: _xcgui.zorder_ # value = <zorder_.zorder_top: 0>
    pass
def Alert(title: str, text: str) -> None:
    pass
def CallUiThread(func: object, *args, **kwargs) -> None:
    pass
def Cast(handle: int) -> XObject:
    pass
def CombineRect(rect1: XRect, rect2: XRect) -> XRect:
    pass
def Free(pointer: int) -> None:
    pass
def FreeLibrary(hModule: int) -> bool:
    pass
def GetDefaultFont() -> XFont:
    pass
def GetProcAddress(hModule: int, procName: str) -> int:
    pass
def GetTextShowRect(text: str, font: XFont, textAlign: int, maxWidth: int) -> XSize:
    pass
def GetTextShowSize(text: str, font: XFont) -> XSize:
    pass
def GetTextShowSizeEx(text: str, font: XFont, textAlign: int) -> XSize:
    pass
def GetTextSize(text: str, font: XFont) -> XSize:
    pass
def LoadDll(fileName: str) -> int:
    pass
def LoadLibrary(fileName: str) -> int:
    pass
def Malloc(size: int) -> int:
    pass
def MessageBox(title: str, text: str, flags: int, hWndParent: int, xcStyle: int = 1223) -> int:
    pass
def PointClientToScreen(hwnd: int, point: XPoint) -> XPoint:
    pass
def PostMessage(hwnd: int, msg: int, wParam: int, lParam: int) -> bool:
    pass
def PostQuitMessage(exitCode: int) -> None:
    pass
@typing.overload
def RGB(hexcolor: str) -> int:
    pass
@typing.overload
def RGB(r: int, g: int, b: int) -> int:
    pass
@typing.overload
def RGBA(hexcolor: str) -> int:
    pass
@typing.overload
def RGBA(r: int, g: int, b: int, a: int) -> int:
    pass
@typing.overload
def RGBA(rgb: int, a: int) -> int:
    pass
def RectInRect(rect1: XRect, rect2: XRect) -> bool:
    pass
def RegisterWindowClassName(className: str) -> bool:
    pass
def SendMessage(hwnd: int, msg: int, wParam: int, lParam: int) -> bool:
    pass
def SetActivateTopWindow() -> bool:
    pass
def SetDefaultFont(font: XFont) -> None:
    pass
WINDOW_BODY = 10
WINDOW_BOTTOM = 2
WINDOW_BOTTOMLEFT = 7
WINDOW_BOTTOMRIGHT = 8
WINDOW_CAPTION = 9
WINDOW_LEFT = 3
WINDOW_RIGHT = 4
WINDOW_TOP = 1
WINDOW_TOPLEFT = 5
WINDOW_TOPRIGHT = 6
WM_CAPTURECHANGED = 533
WM_CHAR = 258
WM_DESTROY = 2
WM_DROPFILES = 563
WM_EXITSIZEMOVE = 562
WM_KEYDOWN = 256
WM_KEYUP = 257
WM_KILLFOCUS = 8
WM_LBUTTONDBLCLK = 515
WM_LBUTTONDOWN = 513
WM_MOUSEHOVER = 673
WM_MOUSEMOVE = 512
WM_MOUSEWHEEL = 522
WM_NCDESTROY = 130
WM_PAINT = 15
WM_RBUTTONDBLCLK = 518
WM_RBUTTONDOWN = 516
WM_RBUTTONUP = 517
WM_SETCURSOR = 32
WM_SETFOCUS = 7
WM_SIZE = 5
WM_TIMER = 275
XC_ADAPTER: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER: 102>
XC_ADAPTER_LISTVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_LISTVIEW: 105>
XC_ADAPTER_MAP: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_MAP: 106>
XC_ADAPTER_TABLE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_TABLE: 103>
XC_ADAPTER_TREE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ADAPTER_TREE: 104>
XC_ANIMATION_GROUP: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ANIMATION_GROUP: 132>
XC_ANIMATION_ITEM: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ANIMATION_ITEM: 133>
XC_ANIMATION_SEQUENCE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ANIMATION_SEQUENCE: 131>
XC_BKINFOM: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_BKINFOM: 116>
XC_BUTTON: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_BUTTON: 22>
XC_COMBOBOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_COMBOBOX: 24>
XC_COMBOBOXWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_COMBOBOXWINDOW: 11>
XC_DATETIME: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_DATETIME: 36>
XC_DWRITE_RENDERING_MODE_ALIASED: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_ALIASED: 1>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC: 2>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL: 3>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL: 4>
XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC: 5>
XC_DWRITE_RENDERING_MODE_DEFAULT: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_DEFAULT: 0>
XC_DWRITE_RENDERING_MODE_OUTLINE: _xcgui.XC_DWRITE_RENDERING_MODE # value = <XC_DWRITE_RENDERING_MODE.XC_DWRITE_RENDERING_MODE_OUTLINE: 6>
XC_EDIT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT: 45>
XC_EDITOR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDITOR: 46>
XC_EDIT_COLOR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_COLOR: 38>
XC_EDIT_FILE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_FILE: 50>
XC_EDIT_FOLDER: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_FOLDER: 51>
XC_EDIT_SET: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_EDIT_SET: 39>
XC_ELE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ELE: 21>
XC_ELE_LAYOUT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ELE_LAYOUT: 53>
XC_ERROR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_ERROR: -1>
XC_FLOATWND: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_FLOATWND: 4>
XC_FONT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_FONT: 84>
XC_FRAMEWND: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_FRAMEWND: 3>
XC_HDRAW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_HDRAW: 83>
XC_ID_ERROR = -1
XC_ID_FIRST = -2
XC_ID_LAST = -3
XC_ID_ROOT = 0
XC_IMAGE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
XC_IMAGE_FRAME: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_IMAGE_FRAME: 88>
XC_IMAGE_TEXTURE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_IMAGE: 82>
XC_LAYOUT_BOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_BOX: 124>
XC_LAYOUT_FRAME: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_FRAME: 54>
XC_LAYOUT_LIST: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_LIST: 112>
XC_LAYOUT_LISTVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_LISTVIEW: 111>
XC_LAYOUT_OBJECT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT: 101>
XC_LAYOUT_OBJECT_GROUP: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_GROUP: 113>
XC_LAYOUT_OBJECT_ITEM: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_OBJECT_ITEM: 114>
XC_LAYOUT_PANEL: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LAYOUT_PANEL: 115>
XC_LIST: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LIST: 27>
XC_LISTBOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LISTBOX: 28>
XC_LISTVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LISTVIEW: 29>
XC_LIST_HEADER: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_LIST_HEADER: 52>
XC_MENU: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MENU: 81>
XC_MENUBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MENUBAR: 31>
XC_MENUBAR_BUTTON: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MENUBAR_BUTTON: 44>
XC_MODALWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MODALWINDOW: 2>
XC_MONTHCAL: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_MONTHCAL: 35>
XC_NAME1 = 'name1'
XC_NAME2 = 'name2'
XC_NAME3 = 'name3'
XC_NAME4 = 'name4'
XC_NAME5 = 'name5'
XC_NAME6 = 'name6'
XC_NOTHING: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_NOTHING: 0>
XC_OBJECT_UI: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_OBJECT_UI: 19>
XC_PANE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PANE: 42>
XC_PANE_SPLIT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PANE_SPLIT: 43>
XC_POPUPMENUCHILDWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_POPUPMENUCHILDWINDOW: 13>
XC_POPUPMENUWINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_POPUPMENUWINDOW: 12>
XC_PROGRESSBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PROGRESSBAR: 33>
XC_PROPERTYGRID: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_PROPERTYGRID: 37>
XC_RICHEDIT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_RICHEDIT: 23>
XC_SCROLLBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SCROLLBAR: 25>
XC_SCROLLVIEW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SCROLLVIEW: 26>
XC_SHAPE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE: 61>
XC_SHAPE_ELLIPSE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_ELLIPSE: 65>
XC_SHAPE_GIF: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_GIF: 68>
XC_SHAPE_GROUPBOX: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_GROUPBOX: 67>
XC_SHAPE_LINE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_LINE: 66>
XC_SHAPE_PICTURE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_PICTURE: 63>
XC_SHAPE_RECT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_RECT: 64>
XC_SHAPE_TABLE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_TABLE: 69>
XC_SHAPE_TEXT: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SHAPE_TEXT: 62>
XC_SLIDERBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SLIDERBAR: 32>
XC_SVG: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_SVG: 89>
XC_TABBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TABBAR: 40>
XC_TEXTLINK: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TEXTLINK: 41>
XC_TOOLBAR: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TOOLBAR: 34>
XC_TREE: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_TREE: 30>
XC_WIDGET_UI: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_WIDGET_UI: 20>
XC_WINDOW: _xcgui.XC_OBJECT_TYPE # value = <XC_OBJECT_TYPE.XC_WINDOW: 1>
XE_ADJUSTLAYOUT = 17
XE_ADJUSTLAYOUT_END = 18
XE_BNCLICK = 34
XE_BUTTON_CHECK = 35
XE_CHAR = 41
XE_COMBOBOX_EXIT_LIST = 73
XE_COMBOBOX_POPUP_LIST = 72
XE_COMBOBOX_SELECT = 71
XE_COMBOBOX_SELECT_END = 74
XE_DATETIME_CHANGE = 241
XE_DATETIME_EXIT_MONTHCAL = 243
XE_DATETIME_POPUP_MONTHCAL = 242
XE_DESTROY = 33
XE_DESTROY_END = 42
XE_DROPFILES = 250
XE_EDITOR_AUTOMATCH_SELECT = 194
XE_EDITOR_MODIFY_ROWS = 190
XE_EDITOR_REMOVEBREAKPOINT = 192
XE_EDITOR_SETBREAKPOINT = 191
XE_EDIT_CHANGED = 182
XE_EDIT_COLOR_CHANGE = 260
XE_EDIT_DRAWROW = 181
XE_EDIT_ENTER_GET_TABALIGN = 185
XE_EDIT_POS_CHANGED = 183
XE_EDIT_ROW_CHANGED = 193
XE_EDIT_SET = 180
XE_EDIT_STYLE_CHANGED = 184
XE_EDIT_SWAPROW = 186
XE_ELEPROCE = 1
XE_KEYDOWN = 39
XE_KEYUP = 40
XE_KILLCAPTURE = 52
XE_KILLFOCUS = 32
XE_LBUTTONDBCLICK = 14
XE_LBUTTONDOWN = 10
XE_LBUTTONUP = 11
XE_LISTBOX_DRAWITEM = 85
XE_LISTBOX_SELECT = 86
XE_LISTBOX_TEMP_ADJUST_COORDINATE = 84
XE_LISTBOX_TEMP_CREATE = 81
XE_LISTBOX_TEMP_CREATE_END = 82
XE_LISTBOX_TEMP_DESTROY = 83
XE_LISTBOX_TEMP_UPDATE = 82
XE_LISTVIEW_DRAWITEM = 145
XE_LISTVIEW_EXPAND = 147
XE_LISTVIEW_SELECT = 146
XE_LISTVIEW_TEMP_ADJUST_COORDINATE = 144
XE_LISTVIEW_TEMP_CREATE = 141
XE_LISTVIEW_TEMP_CREATE_END = 142
XE_LISTVIEW_TEMP_DESTROY = 143
XE_LISTVIEW_TEMP_UPDATE = 142
XE_LIST_DRAWITEM = 105
XE_LIST_HEADER_CLICK = 108
XE_LIST_HEADER_DRAWITEM = 107
XE_LIST_HEADER_TEMP_ADJUST_COORDINATE = 113
XE_LIST_HEADER_TEMP_CREATE = 110
XE_LIST_HEADER_TEMP_CREATE_END = 111
XE_LIST_HEADER_TEMP_DESTROY = 112
XE_LIST_HEADER_WIDTH_CHANGE = 109
XE_LIST_SELECT = 106
XE_LIST_TEMP_ADJUST_COORDINATE = 104
XE_LIST_TEMP_CREATE = 101
XE_LIST_TEMP_CREATE_END = 102
XE_LIST_TEMP_DESTROY = 103
XE_LIST_TEMP_UPDATE = 102
XE_MENU_DRAWITEM = 61
XE_MENU_DRAW_BACKGROUND = 60
XE_MENU_EXIT = 62
XE_MENU_POPUP = 57
XE_MENU_POPUP_WND = 58
XE_MENU_SELECT = 59
XE_MONTHCAL_CHANGE = 231
XE_MOUSEHOVER = 7
XE_MOUSELEAVE = 8
XE_MOUSEMOVE = 5
XE_MOUSESTAY = 6
XE_MOUSEWHEEL = 9
XE_PAINT = 2
XE_PAINT_END = 3
XE_PAINT_SCROLLVIEW = 4
XE_PGRID_ITEM_ADJUST_COORDINATE = 154
XE_PGRID_ITEM_DESTROY = 155
XE_PGRID_ITEM_EXPAND = 156
XE_PGRID_ITEM_SELECT = 153
XE_PGRID_ITEM_SET = 152
XE_PGRID_VALUE_CHANGE = 151
XE_PROGRESSBAR_CHANGE = 64
XE_RBUTTONDOWN = 12
XE_RBUTTONUP = 13
XE_SBAR_SCROLL = 56
XE_SCROLLVIEW_SCROLL_H = 54
XE_SCROLLVIEW_SCROLL_V = 55
XE_SETCAPTURE = 51
XE_SETCURSOR = 53
XE_SETFOCUS = 31
XE_SETFONT = 38
XE_SHOW = 37
XE_SIZE = 36
XE_SLIDERBAR_CHANGE = 63
XE_SYSKEYDOWN = 42
XE_SYSKEYUP = 43
XE_TABBAR_DELETE = 222
XE_TABBAR_SELECT = 221
XE_TREE_DRAG_ITEM = 129
XE_TREE_DRAG_ITEM_ING = 128
XE_TREE_DRAWITEM = 125
XE_TREE_EXPAND = 127
XE_TREE_SELECT = 126
XE_TREE_TEMP_ADJUST_COORDINATE = 124
XE_TREE_TEMP_CREATE = 121
XE_TREE_TEMP_CREATE_END = 122
XE_TREE_TEMP_DESTROY = 123
XE_TREE_TEMP_UPDATE = 122
XE_XC_TIMER = 16
XWM_CALL_UI_THREAD = 28680
XWM_CLOUDUI_DOWNLOADFILE_COMPLETE = 28678
XWM_CLOUNDUI_OPENURL_WAIT = 28679
XWM_COMBOBOX_POPUP_DROPLIST = 28689
XWM_DOCK_POPUP = 28693
XWM_DRAW_T = 28675
XWM_EVENT_ALL = 33768
XWM_FLOATWND_DRAG = 28694
XWM_FLOAT_PANE = 28690
XWM_MENU_DRAWITEM = 28688
XWM_MENU_DRAW_BACKGROUND = 28687
XWM_MENU_EXIT = 28686
XWM_MENU_POPUP = 28683
XWM_MENU_POPUP_WND = 28684
XWM_MENU_SELECT = 28685
XWM_PAINT_DISPLAY = 28692
XWM_PAINT_END = 28691
XWM_PANE_SHOW = 28695
XWM_REDRAW_ELE = 28673
XWM_TIMER_T = 28676
XWM_WINDPROC = 28674
XWM_XC_TIMER = 28677
adapter_date_type_error: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_error: -1>
adapter_date_type_float: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_float: 1>
adapter_date_type_image: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_image: 3>
adapter_date_type_int: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_int: 0>
adapter_date_type_string: _xcgui.adapter_date_type_ # value = <adapter_date_type_.adapter_date_type_string: 2>
adjustLayout_all: _xcgui.adjustLayout_ # value = <adjustLayout_.adjustLayout_all: 1>
adjustLayout_no: _xcgui.adjustLayout_ # value = <adjustLayout_.adjustLayout_no: 0>
adjustLayout_self: _xcgui.adjustLayout_ # value = <adjustLayout_.adjustLayout_self: 2>
animation_move_x: _xcgui.animation_move_ # value = <animation_move_.animation_move_x: 1>
animation_move_y: _xcgui.animation_move_ # value = <animation_move_.animation_move_y: 2>
bkObject_align_flag_bottom: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_bottom: 8>
bkObject_align_flag_center: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_center: 16>
bkObject_align_flag_center_v: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_center_v: 32>
bkObject_align_flag_left: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_left: 1>
bkObject_align_flag_no: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_no: 0>
bkObject_align_flag_right: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_right: 4>
bkObject_align_flag_top: _xcgui.bkObject_align_flag_ # value = <bkObject_align_flag_.bkObject_align_flag_top: 2>
button_icon_align_bottom: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_bottom: 3>
button_icon_align_left: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_left: 0>
button_icon_align_right: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_right: 2>
button_icon_align_top: _xcgui.button_icon_align_ # value = <button_icon_align_.button_icon_align_top: 1>
button_state_check: _xcgui.button_state_ # value = <button_state_.button_state_check: 3>
button_state_disable: _xcgui.button_state_ # value = <button_state_.button_state_disable: 4>
button_state_down: _xcgui.button_state_ # value = <button_state_.button_state_down: 2>
button_state_flag_WindowMaximize: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_WindowMaximize: 1024>
button_state_flag_WindowRestore: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_WindowRestore: 512>
button_state_flag_check: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_check: 128>
button_state_flag_check_no: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_check_no: 256>
button_state_flag_down: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_down: 64>
button_state_flag_leave: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_leave: 16>
button_state_flag_stay: _xcgui.button_state_flag_ # value = <button_state_flag_.button_state_flag_stay: 32>
button_state_leave: _xcgui.button_state_ # value = <button_state_.button_state_leave: 0>
button_state_stay: _xcgui.button_state_ # value = <button_state_.button_state_stay: 1>
button_style_check: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_check: 2>
button_style_close: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_close: 5>
button_style_default: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.xc_style_default: 0>
button_style_expand: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_expand: 4>
button_style_icon: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_icon: 3>
button_style_max: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_max: 6>
button_style_min: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_min: 7>
button_style_pane_close: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_close: 19>
button_style_pane_dock_bottom: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_bottom: 25>
button_style_pane_dock_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_left: 22>
button_style_pane_dock_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_right: 24>
button_style_pane_dock_top: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_dock_top: 23>
button_style_pane_lock: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_lock: 20>
button_style_pane_menu: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_pane_menu: 21>
button_style_radio: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_radio: 1>
button_style_scrollbar_down: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_down: 11>
button_style_scrollbar_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_left: 8>
button_style_scrollbar_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_right: 9>
button_style_scrollbar_slider_h: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_h: 12>
button_style_scrollbar_slider_v: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_slider_v: 13>
button_style_scrollbar_up: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_scrollbar_up: 10>
button_style_slider: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_slider: 15>
button_style_tabBar: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_tabBar: 14>
button_style_toolBar: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_toolBar: 16>
button_style_toolBar_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_toolBar_left: 17>
button_style_toolBar_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.button_style_toolBar_right: 18>
button_type_check: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_check: 2>
button_type_close: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_close: 3>
button_type_default: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_default: 0>
button_type_max: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_max: 5>
button_type_min: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_min: 4>
button_type_radio: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.button_type_radio: 1>
chat_flag_center: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_center: 4>
chat_flag_left: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_left: 1>
chat_flag_next_row_bubble: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_next_row_bubble: 8>
chat_flag_right: _xcgui.chat_flag_ # value = <chat_flag_.chat_flag_right: 2>
comboBox_state_down: _xcgui.comboBox_state_ # value = <comboBox_state_.comboBox_state_down: 2>
comboBox_state_flag_down: _xcgui.comboBox_state_flag_ # value = <comboBox_state_flag_.comboBox_state_flag_down: 64>
comboBox_state_flag_leave: _xcgui.comboBox_state_flag_ # value = <comboBox_state_flag_.comboBox_state_flag_leave: 16>
comboBox_state_flag_stay: _xcgui.comboBox_state_flag_ # value = <comboBox_state_flag_.comboBox_state_flag_stay: 32>
comboBox_state_leave: _xcgui.comboBox_state_ # value = <comboBox_state_.comboBox_state_leave: 0>
comboBox_state_stay: _xcgui.comboBox_state_ # value = <comboBox_state_.comboBox_state_stay: 1>
common_state3_down: _xcgui.common_state3_ # value = <common_state3_.common_state3_down: 2>
common_state3_leave: _xcgui.common_state3_ # value = <common_state3_.common_state3_leave: 0>
common_state3_stay: _xcgui.common_state3_ # value = <common_state3_.common_state3_stay: 1>
easeIn: _xcgui.ease_type_ # value = <ease_type_.easeIn: 0>
easeInOut: _xcgui.ease_type_ # value = <ease_type_.easeInOut: 2>
easeOut: _xcgui.ease_type_ # value = <ease_type_.easeOut: 1>
ease_flag_back: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_back: 9>
ease_flag_bounce: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_bounce: 10>
ease_flag_circ: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_circ: 7>
ease_flag_cubic: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_cubic: 2>
ease_flag_elastic: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_elastic: 8>
ease_flag_expo: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_expo: 6>
ease_flag_in: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_in: 65536>
ease_flag_inOut: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_inOut: 196608>
ease_flag_linear: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_linear: 0>
ease_flag_out: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_out: 131072>
ease_flag_quad: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_quad: 1>
ease_flag_quart: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_quart: 3>
ease_flag_quint: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_quint: 4>
ease_flag_sine: _xcgui.ease_flag_ # value = <ease_flag_.ease_flag_sine: 5>
edit_style_type_font_color: _xcgui.edit_style_type_ # value = <edit_style_type_.edit_style_type_font_color: 1>
edit_style_type_image: _xcgui.edit_style_type_ # value = <edit_style_type_.edit_style_type_image: 2>
edit_style_type_obj: _xcgui.edit_style_type_ # value = <edit_style_type_.edit_style_type_obj: 3>
edit_textAlign_flag_bottom: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_bottom: 4>
edit_textAlign_flag_center: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_center: 2>
edit_textAlign_flag_center_v: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_center_v: 8>
edit_textAlign_flag_left: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
edit_textAlign_flag_right: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_right: 1>
edit_textAlign_flag_top: _xcgui.edit_textAlign_flag_ # value = <edit_textAlign_flag_.edit_textAlign_flag_left: 0>
edit_type_chat: _xcgui.edit_type_ # value = <edit_type_.edit_type_chat: 3>
edit_type_codeTable: _xcgui.edit_type_ # value = <edit_type_.edit_type_codeTable: 4>
edit_type_editor: _xcgui.edit_type_ # value = <edit_type_.edit_type_editor: 1>
edit_type_none: _xcgui.edit_type_ # value = <edit_type_.edit_type_none: 0>
edit_type_richedit: _xcgui.edit_type_ # value = <edit_type_.edit_type_richedit: 2>
element_position_bottom: _xcgui.element_position_ # value = <element_position_.element_position_bottom: 8>
element_position_left: _xcgui.element_position_ # value = <element_position_.element_position_left: 1>
element_position_no: _xcgui.element_position_ # value = <element_position_.element_position_no: 0>
element_position_right: _xcgui.element_position_ # value = <element_position_.element_position_right: 4>
element_position_top: _xcgui.element_position_ # value = <element_position_.element_position_top: 2>
element_state_flag_disable: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_disable: 2>
element_state_flag_down: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_down: 64>
element_state_flag_enable: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_enable: 1>
element_state_flag_focus: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focus: 4>
element_state_flag_focusEx: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focusEx: 1073741824>
element_state_flag_focusEx_no: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focusEx_no: -2147483648>
element_state_flag_focus_no: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_focus_no: 8>
element_state_flag_leave: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_leave: 16>
element_state_flag_nothing: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_nothing: 0>
element_state_flag_stay: _xcgui.element_state_flag_ # value = <element_state_flag_.element_state_flag_stay: 32>
element_style_frameWnd_dock_bottom: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_bottom: 29>
element_style_frameWnd_dock_left: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_left: 26>
element_style_frameWnd_dock_right: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_right: 28>
element_style_frameWnd_dock_top: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_frameWnd_dock_top: 27>
element_style_toolBar_separator: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.element_style_toolBar_separator: 30>
element_type_layout: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.element_type_layout: 6>
fontStyle_bold: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_bold: 1>
fontStyle_boldItalic: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_boldItalic: 3>
fontStyle_italic: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_italic: 2>
fontStyle_regular: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_regular: 0>
fontStyle_strikeout: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_strikeout: 8>
fontStyle_underline: _xcgui.fontStyle_ # value = <fontStyle_.fontStyle_underline: 4>
frameWnd_cell_type_bodyView: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_bodyView: 3>
frameWnd_cell_type_group: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_group: 2>
frameWnd_cell_type_left_right: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_left_right: 5>
frameWnd_cell_type_no: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_no: 0>
frameWnd_cell_type_pane: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_pane: 1>
frameWnd_cell_type_top_bottom: _xcgui.frameWnd_cell_type_ # value = <frameWnd_cell_type_.frameWnd_cell_type_top_bottom: 4>
image_draw_type_adaptive: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_adaptive: 2>
image_draw_type_adaptive_border: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_adaptive_border: 5>
image_draw_type_default: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_default: 0>
image_draw_type_fixed_ratio: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_fixed_ratio: 4>
image_draw_type_stretch: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_stretch: 1>
image_draw_type_tile: _xcgui.image_draw_type_ # value = <image_draw_type_.image_draw_type_tile: 3>
layout_align_axis_auto: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_auto: 0>
layout_align_axis_center: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_center: 2>
layout_align_axis_end: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_end: 3>
layout_align_axis_start: _xcgui.layout_align_axis_ # value = <layout_align_axis_.layout_align_axis_start: 1>
layout_align_bottom: _xcgui.layout_align_ # value = <layout_align_.layout_align_bottom: 3>
layout_align_center: _xcgui.layout_align_ # value = <layout_align_.layout_align_center: 4>
layout_align_equidistant: _xcgui.layout_align_ # value = <layout_align_.layout_align_equidistant: 5>
layout_align_left: _xcgui.layout_align_ # value = <layout_align_.layout_align_left: 0>
layout_align_right: _xcgui.layout_align_ # value = <layout_align_.layout_align_right: 2>
layout_align_top: _xcgui.layout_align_ # value = <layout_align_.layout_align_top: 1>
layout_size_auto: _xcgui.layout_size_ # value = <layout_size_.layout_size_auto: 2>
layout_size_disable: _xcgui.layout_size_ # value = <layout_size_.layout_size_disable: 5>
layout_size_fill: _xcgui.layout_size_ # value = <layout_size_.layout_size_fill: 1>
layout_size_fixed: _xcgui.layout_size_ # value = <layout_size_.layout_size_fixed: 0>
layout_size_percent: _xcgui.layout_size_ # value = <layout_size_.layout_size_percent: 4>
layout_size_weight: _xcgui.layout_size_ # value = <layout_size_.layout_size_weight: 3>
layout_state_flag_body: _xcgui.layout_state_flag_ # value = <layout_state_flag_.layout_state_flag_body: 2>
layout_state_flag_full: _xcgui.layout_state_flag_ # value = <layout_state_flag_.layout_state_flag_full: 1>
layout_state_flag_layout_body: _xcgui.element_state_flag_ # value = <element_state_flag_.layout_state_flag_layout_body: 536870912>
layout_state_flag_nothing: _xcgui.layout_state_flag_ # value = <layout_state_flag_.layout_state_flag_nothing: 0>
listBox_state_flag_item_leave: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_leave: 128>
listBox_state_flag_item_select: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_select: 512>
listBox_state_flag_item_select_no: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_select_no: 1024>
listBox_state_flag_item_stay: _xcgui.listBox_state_flag_ # value = <listBox_state_flag_.listBox_state_flag_item_stay: 256>
listBox_style_comboBox: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.listBox_style_comboBox: 31>
listHeader_state_flag_item_down: _xcgui.listHeader_state_flag_ # value = <listHeader_state_flag_.listHeader_state_flag_item_down: 512>
listHeader_state_flag_item_leave: _xcgui.listHeader_state_flag_ # value = <listHeader_state_flag_.listHeader_state_flag_item_leave: 128>
listHeader_state_flag_item_stay: _xcgui.listHeader_state_flag_ # value = <listHeader_state_flag_.listHeader_state_flag_item_stay: 256>
listItemTemp_type_list: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_list: 12>
listItemTemp_type_listBox: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listBox: 2>
listItemTemp_type_listView: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listView: 48>
listItemTemp_type_listView_group: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listView_group: 16>
listItemTemp_type_listView_item: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_listView_item: 32>
listItemTemp_type_list_head: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_list_head: 4>
listItemTemp_type_list_item: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_list_item: 8>
listItemTemp_type_tree: _xcgui.listItemTemp_type_ # value = <listItemTemp_type_.listItemTemp_type_tree: 1>
listView_state_flag_group_leave: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_leave: 2048>
listView_state_flag_group_select: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_select: 8192>
listView_state_flag_group_select_no: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_select_no: 16384>
listView_state_flag_group_stay: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_group_stay: 4096>
listView_state_flag_item_leave: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_leave: 128>
listView_state_flag_item_select: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_select: 512>
listView_state_flag_item_select_no: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_select_no: 1024>
listView_state_flag_item_stay: _xcgui.listView_state_flag_ # value = <listView_state_flag_.listView_state_flag_item_stay: 256>
list_drawItemBk_flag_group_leave: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_leave: 8>
list_drawItemBk_flag_group_stay: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_group_stay: 16>
list_drawItemBk_flag_leave: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_leave: 1>
list_drawItemBk_flag_line: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_line: 32>
list_drawItemBk_flag_lineV: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_lineV: 64>
list_drawItemBk_flag_nothing: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_nothing: 0>
list_drawItemBk_flag_select: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_select: 4>
list_drawItemBk_flag_stay: _xcgui.list_drawItemBk_flag_ # value = <list_drawItemBk_flag_.list_drawItemBk_flag_stay: 2>
list_item_state_cache: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_cache: 3>
list_item_state_leave: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_leave: 0>
list_item_state_select: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_select: 2>
list_item_state_stay: _xcgui.list_item_state_ # value = <list_item_state_.list_item_state_stay: 1>
list_state_flag_item_leave: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_leave: 128>
list_state_flag_item_select: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_select: 512>
list_state_flag_item_select_no: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_select_no: 1024>
list_state_flag_item_stay: _xcgui.list_state_flag_ # value = <list_state_flag_.list_state_flag_item_stay: 256>
menu_item_flag_check: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_check: 2>
menu_item_flag_disable: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_disable: 16>
menu_item_flag_normal: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_normal: 0>
menu_item_flag_popup: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_popup: 4>
menu_item_flag_select: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_select: 1>
menu_item_flag_separator: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_separator: 8>
menu_item_flag_stay: _xcgui.menu_item_flag_ # value = <menu_item_flag_.menu_item_flag_select: 1>
menu_popup_position_center_bottom: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_bottom: 7>
menu_popup_position_center_left: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_left: 4>
menu_popup_position_center_right: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_right: 6>
menu_popup_position_center_top: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_center_top: 5>
menu_popup_position_left_bottom: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_left_bottom: 1>
menu_popup_position_left_top: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_left_top: 0>
menu_popup_position_right_bottom: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_right_bottom: 3>
menu_popup_position_right_top: _xcgui.menu_popup_position_ # value = <menu_popup_position_.menu_popup_position_right_top: 2>
messageBox_flag_cancel: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_cancel: 2>
messageBox_flag_icon_appicon: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_appicon: 4096>
messageBox_flag_icon_error: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_error: 32768>
messageBox_flag_icon_info: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_info: 8192>
messageBox_flag_icon_qustion: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_qustion: 16384>
messageBox_flag_icon_shield: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_shield: 131072>
messageBox_flag_icon_warning: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_icon_warning: 65536>
messageBox_flag_ok: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_ok: 1>
messageBox_flag_other: _xcgui.messageBox_flag_ # value = <messageBox_flag_.messageBox_flag_other: 0>
monthCal_button_type_last_month: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_last_month: 3>
monthCal_button_type_last_year: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_last_year: 1>
monthCal_button_type_next_month: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_next_month: 4>
monthCal_button_type_next_year: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_next_year: 2>
monthCal_button_type_today: _xcgui.monthCal_button_type_ # value = <monthCal_button_type_.monthCal_button_type_today: 0>
monthCal_state_flag_item_cur_month: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_cur_month: 16384>
monthCal_state_flag_item_down: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_down: 512>
monthCal_state_flag_item_last_month: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_last_month: 8192>
monthCal_state_flag_item_leave: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_leave: 128>
monthCal_state_flag_item_next_month: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_next_month: 32768>
monthCal_state_flag_item_select: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_select: 1024>
monthCal_state_flag_item_select_no: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_select_no: 2048>
monthCal_state_flag_item_stay: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_stay: 256>
monthCal_state_flag_item_today: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_item_today: 4096>
monthCal_state_flag_leave: _xcgui.monthCal_state_flag_ # value = <monthCal_state_flag_.monthCal_state_flag_leave: 16>
notifyMsg_skin_error: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_error: 4>
notifyMsg_skin_message: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_message: 3>
notifyMsg_skin_no: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_no: 0>
notifyMsg_skin_success: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_success: 1>
notifyMsg_skin_warning: _xcgui.notifyMsg_skin_ # value = <notifyMsg_skin_.notifyMsg_skin_warning: 2>
pane_align_bottom: _xcgui.pane_align_ # value = <pane_align_.pane_align_bottom: 3>
pane_align_center: _xcgui.pane_align_ # value = <pane_align_.pane_align_center: 4>
pane_align_error: _xcgui.pane_align_ # value = <pane_align_.pane_align_error: -1>
pane_align_left: _xcgui.pane_align_ # value = <pane_align_.pane_align_left: 0>
pane_align_right: _xcgui.pane_align_ # value = <pane_align_.pane_align_right: 2>
pane_align_top: _xcgui.pane_align_ # value = <pane_align_.pane_align_top: 1>
pane_state_any: _xcgui.pane_state_ # value = <pane_state_.pane_state_any: 0>
pane_state_dock: _xcgui.pane_state_ # value = <pane_state_.pane_state_dock: 2>
pane_state_error: _xcgui.pane_state_ # value = <pane_state_.pane_state_error: -1>
pane_state_flag_body: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_body: 256>
pane_state_flag_caption: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_caption: 128>
pane_state_flag_leave: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_leave: 16>
pane_state_flag_stay: _xcgui.pane_state_flag_ # value = <pane_state_flag_.pane_state_flag_stay: 32>
pane_state_float: _xcgui.pane_state_ # value = <pane_state_.pane_state_float: 3>
pane_state_lock: _xcgui.pane_state_ # value = <pane_state_.pane_state_lock: 1>
position_flag_bottom: _xcgui.position_flag_ # value = <position_flag_.position_flag_bottom: 3>
position_flag_center: _xcgui.position_flag_ # value = <position_flag_.position_flag_center: 8>
position_flag_left: _xcgui.position_flag_ # value = <position_flag_.position_flag_left: 0>
position_flag_leftBottom: _xcgui.position_flag_ # value = <position_flag_.position_flag_leftBottom: 5>
position_flag_leftTop: _xcgui.position_flag_ # value = <position_flag_.position_flag_leftTop: 4>
position_flag_right: _xcgui.position_flag_ # value = <position_flag_.position_flag_right: 2>
position_flag_rightBottom: _xcgui.position_flag_ # value = <position_flag_.position_flag_rightBottom: 7>
position_flag_rightTop: _xcgui.position_flag_ # value = <position_flag_.position_flag_rightTop: 6>
position_flag_top: _xcgui.position_flag_ # value = <position_flag_.position_flag_top: 1>
propertyGrid_item_type_comboBox: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_comboBox: 5>
propertyGrid_item_type_edit: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit: 1>
propertyGrid_item_type_edit_color: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_color: 2>
propertyGrid_item_type_edit_file: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_file: 3>
propertyGrid_item_type_edit_set: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_edit_set: 4>
propertyGrid_item_type_group: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_group: 6>
propertyGrid_item_type_panel: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_panel: 7>
propertyGrid_item_type_text: _xcgui.propertyGrid_item_type_ # value = <propertyGrid_item_type_.propertyGrid_item_type_text: 0>
propertyGrid_state_flag_group_expand: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand: 4096>
propertyGrid_state_flag_group_expand_no: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_expand_no: 8192>
propertyGrid_state_flag_group_leave: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_group_leave: 2048>
propertyGrid_state_flag_item_leave: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_leave: 128>
propertyGrid_state_flag_item_select: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select: 512>
propertyGrid_state_flag_item_select_no: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_select_no: 1024>
propertyGrid_state_flag_item_stay: _xcgui.propertyGrid_state_flag_ # value = <propertyGrid_state_flag_.propertyGrid_state_flag_item_stay: 256>
table_flag_full: _xcgui.table_flag_ # value = <table_flag_.table_flag_full: 0>
table_flag_none: _xcgui.table_flag_ # value = <table_flag_.table_flag_none: 1>
table_line_flag_bottom: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_bottom: 8>
table_line_flag_bottom2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_bottom2: 128>
table_line_flag_left: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_left: 1>
table_line_flag_left2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_left2: 16>
table_line_flag_right: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_right: 4>
table_line_flag_right2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_right2: 64>
table_line_flag_top: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_top: 2>
table_line_flag_top2: _xcgui.table_line_flag_ # value = <table_line_flag_.table_line_flag_top2: 32>
textAlignFlag_bottom: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_bottom: 8>
textAlignFlag_center: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_center: 1>
textAlignFlag_left: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left: 0>
textAlignFlag_left_top: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left_top: 16384>
textAlignFlag_right: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_right: 2>
textAlignFlag_top: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left: 0>
textAlignFlag_vcenter: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_vcenter: 4>
textFormatFlag_DirectionRightToLeft: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_DirectionRightToLeft: 16>
textFormatFlag_DirectionVertical: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_DirectionVertical: 64>
textFormatFlag_DisplayFormatControl: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_DisplayFormatControl: 256>
textFormatFlag_LineLimit: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_LineLimit: 2048>
textFormatFlag_MeasureTrailingSpaces: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_MeasureTrailingSpaces: 1024>
textFormatFlag_NoClip: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoClip: 4096>
textFormatFlag_NoFitBlackBox: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoFitBlackBox: 128>
textFormatFlag_NoFontFallback: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoFontFallback: 512>
textFormatFlag_NoWrap: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textFormatFlag_NoWrap: 32>
textTrimming_Character: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_Character: 262144>
textTrimming_EllipsisCharacter: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_EllipsisCharacter: 32768>
textTrimming_EllipsisPath: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_EllipsisPath: 131072>
textTrimming_EllipsisWord: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_EllipsisWord: 65536>
textTrimming_None: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textAlignFlag_left: 0>
textTrimming_Word: _xcgui.textFormatFlag_ # value = <textFormatFlag_.textTrimming_Word: 524288>
tree_item_state_leave: _xcgui.tree_item_state_ # value = <tree_item_state_.tree_item_state_leave: 0>
tree_item_state_select: _xcgui.tree_item_state_ # value = <tree_item_state_.tree_item_state_select: 2>
tree_item_state_stay: _xcgui.tree_item_state_ # value = <tree_item_state_.tree_item_state_stay: 1>
tree_state_flag_group: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_group: 2048>
tree_state_flag_group_no: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_group_no: 4096>
tree_state_flag_item_leave: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_leave: 128>
tree_state_flag_item_select: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_select: 512>
tree_state_flag_item_select_no: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_select_no: 1024>
tree_state_flag_item_stay: _xcgui.tree_state_flag_ # value = <tree_state_flag_.tree_state_flag_item_stay: 256>
window_position_body: _xcgui.window_position_ # value = <window_position_.window_position_body: 4>
window_position_bottom: _xcgui.window_position_ # value = <window_position_.window_position_bottom: 1>
window_position_error: _xcgui.window_position_ # value = <window_position_.window_position_error: -1>
window_position_left: _xcgui.window_position_ # value = <window_position_.window_position_left: 2>
window_position_right: _xcgui.window_position_ # value = <window_position_.window_position_right: 3>
window_position_top: _xcgui.window_position_ # value = <window_position_.window_position_top: 0>
window_position_window: _xcgui.window_position_ # value = <window_position_.window_position_window: 5>
window_state_flag_body_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_body_leave: 2>
window_state_flag_bottom_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_bottom_leave: 8>
window_state_flag_layout_body: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_layout_body: 536870912>
window_state_flag_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_leave: 1>
window_state_flag_left_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_left_leave: 16>
window_state_flag_nothing: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_nothing: 0>
window_state_flag_right_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_right_leave: 32>
window_state_flag_top_leave: _xcgui.window_state_flag_ # value = <window_state_flag_.window_state_flag_top_leave: 4>
window_style_allow_maxWindow: _xcgui.window_style_ # value = <window_style_.window_style_allow_maxWindow: 32>
window_style_border: _xcgui.window_style_ # value = <window_style_.window_style_border: 2>
window_style_btn_close: _xcgui.window_style_ # value = <window_style_.window_style_btn_close: 1024>
window_style_btn_max: _xcgui.window_style_ # value = <window_style_.window_style_btn_max: 512>
window_style_btn_min: _xcgui.window_style_ # value = <window_style_.window_style_btn_min: 256>
window_style_caption: _xcgui.window_style_ # value = <window_style_.window_style_caption: 1>
window_style_center: _xcgui.window_style_ # value = <window_style_.window_style_center: 4>
window_style_default: _xcgui.window_style_ # value = <window_style_.window_style_default: 2031>
window_style_drag_border: _xcgui.window_style_ # value = <window_style_.window_style_drag_border: 8>
window_style_drag_window: _xcgui.window_style_ # value = <window_style_.window_style_drag_window: 16>
window_style_icon: _xcgui.window_style_ # value = <window_style_.window_style_icon: 64>
window_style_modal: _xcgui.window_style_ # value = <window_style_.window_style_modal: 1223>
window_style_modal_simple: _xcgui.window_style_ # value = <window_style_.window_style_modal_simple: 7>
window_style_nothing: _xcgui.window_style_ # value = <window_style_.window_style_nothing: 0>
window_style_pop: _xcgui.window_style_ # value = <window_style_.window_style_pop: 1263>
window_style_simple: _xcgui.window_style_ # value = <window_style_.window_style_simple: 47>
window_style_title: _xcgui.window_style_ # value = <window_style_.window_style_title: 128>
window_transparent_false: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_false: 0>
window_transparent_shadow: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_shadow: 2>
window_transparent_shaped: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_shaped: 1>
window_transparent_simple: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_simple: 3>
window_transparent_win7: _xcgui.window_transparent_ # value = <window_transparent_.window_transparent_win7: 4>
xc_ex_error: _xcgui.XC_OBJECT_TYPE_EX # value = <XC_OBJECT_TYPE_EX.xc_ex_error: -1>
xc_style_default: _xcgui.XC_OBJECT_STYLE # value = <XC_OBJECT_STYLE.xc_style_default: 0>
zorder_after: _xcgui.zorder_ # value = <zorder_.zorder_after: 3>
zorder_before: _xcgui.zorder_ # value = <zorder_.zorder_before: 2>
zorder_bottom: _xcgui.zorder_ # value = <zorder_.zorder_bottom: 1>
zorder_top: _xcgui.zorder_ # value = <zorder_.zorder_top: 0>
